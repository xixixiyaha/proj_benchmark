/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.freeb.thrift.CartServer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import javax.annotation.Generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2022-01-21")
public class CartInfo implements org.apache.thrift.TBase<CartInfo, CartInfo._Fields>, java.io.Serializable, Cloneable, Comparable<CartInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CartInfo");

  private static final org.apache.thrift.protocol.TField CART_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cartId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField OBJ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("objId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField INCART_QUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("incartQuantity", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField INCART_SELECT_FIELD_DESC = new org.apache.thrift.protocol.TField("incartSelect", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CartInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CartInfoTupleSchemeFactory());
  }

  public long cartId; // required
  public long userId; // required
  public long objId; // optional
  public long merchantId; // optional
  public int incartQuantity; // optional
  public int incartSelect; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CART_ID((short)1, "cartId"),
    USER_ID((short)2, "userId"),
    OBJ_ID((short)3, "objId"),
    MERCHANT_ID((short)4, "merchantId"),
    INCART_QUANTITY((short)5, "incartQuantity"),
    INCART_SELECT((short)6, "incartSelect");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CART_ID
          return CART_ID;
        case 2: // USER_ID
          return USER_ID;
        case 3: // OBJ_ID
          return OBJ_ID;
        case 4: // MERCHANT_ID
          return MERCHANT_ID;
        case 5: // INCART_QUANTITY
          return INCART_QUANTITY;
        case 6: // INCART_SELECT
          return INCART_SELECT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CARTID_ISSET_ID = 0;
  private static final int __USERID_ISSET_ID = 1;
  private static final int __OBJID_ISSET_ID = 2;
  private static final int __MERCHANTID_ISSET_ID = 3;
  private static final int __INCARTQUANTITY_ISSET_ID = 4;
  private static final int __INCARTSELECT_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.OBJ_ID,_Fields.MERCHANT_ID,_Fields.INCART_QUANTITY,_Fields.INCART_SELECT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CART_ID, new org.apache.thrift.meta_data.FieldMetaData("cartId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OBJ_ID, new org.apache.thrift.meta_data.FieldMetaData("objId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INCART_QUANTITY, new org.apache.thrift.meta_data.FieldMetaData("incartQuantity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INCART_SELECT, new org.apache.thrift.meta_data.FieldMetaData("incartSelect", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CartInfo.class, metaDataMap);
  }

  public CartInfo() {
  }

  public CartInfo(
    long cartId,
    long userId)
  {
    this();
    this.cartId = cartId;
    setCartIdIsSet(true);
    this.userId = userId;
    setUserIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CartInfo(CartInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.cartId = other.cartId;
    this.userId = other.userId;
    this.objId = other.objId;
    this.merchantId = other.merchantId;
    this.incartQuantity = other.incartQuantity;
    this.incartSelect = other.incartSelect;
  }

  public CartInfo deepCopy() {
    return new CartInfo(this);
  }

  @Override
  public void clear() {
    setCartIdIsSet(false);
    this.cartId = 0;
    setUserIdIsSet(false);
    this.userId = 0;
    setObjIdIsSet(false);
    this.objId = 0;
    setMerchantIdIsSet(false);
    this.merchantId = 0;
    setIncartQuantityIsSet(false);
    this.incartQuantity = 0;
    setIncartSelectIsSet(false);
    this.incartSelect = 0;
  }

  public long getCartId() {
    return this.cartId;
  }

  public CartInfo setCartId(long cartId) {
    this.cartId = cartId;
    setCartIdIsSet(true);
    return this;
  }

  public void unsetCartId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CARTID_ISSET_ID);
  }

  /** Returns true if field cartId is set (has been assigned a value) and false otherwise */
  public boolean isSetCartId() {
    return EncodingUtils.testBit(__isset_bitfield, __CARTID_ISSET_ID);
  }

  public void setCartIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CARTID_ISSET_ID, value);
  }

  public long getUserId() {
    return this.userId;
  }

  public CartInfo setUserId(long userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public long getObjId() {
    return this.objId;
  }

  public CartInfo setObjId(long objId) {
    this.objId = objId;
    setObjIdIsSet(true);
    return this;
  }

  public void unsetObjId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OBJID_ISSET_ID);
  }

  /** Returns true if field objId is set (has been assigned a value) and false otherwise */
  public boolean isSetObjId() {
    return EncodingUtils.testBit(__isset_bitfield, __OBJID_ISSET_ID);
  }

  public void setObjIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OBJID_ISSET_ID, value);
  }

  public long getMerchantId() {
    return this.merchantId;
  }

  public CartInfo setMerchantId(long merchantId) {
    this.merchantId = merchantId;
    setMerchantIdIsSet(true);
    return this;
  }

  public void unsetMerchantId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MERCHANTID_ISSET_ID);
  }

  /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantId() {
    return EncodingUtils.testBit(__isset_bitfield, __MERCHANTID_ISSET_ID);
  }

  public void setMerchantIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MERCHANTID_ISSET_ID, value);
  }

  public int getIncartQuantity() {
    return this.incartQuantity;
  }

  public CartInfo setIncartQuantity(int incartQuantity) {
    this.incartQuantity = incartQuantity;
    setIncartQuantityIsSet(true);
    return this;
  }

  public void unsetIncartQuantity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCARTQUANTITY_ISSET_ID);
  }

  /** Returns true if field incartQuantity is set (has been assigned a value) and false otherwise */
  public boolean isSetIncartQuantity() {
    return EncodingUtils.testBit(__isset_bitfield, __INCARTQUANTITY_ISSET_ID);
  }

  public void setIncartQuantityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCARTQUANTITY_ISSET_ID, value);
  }

  public int getIncartSelect() {
    return this.incartSelect;
  }

  public CartInfo setIncartSelect(int incartSelect) {
    this.incartSelect = incartSelect;
    setIncartSelectIsSet(true);
    return this;
  }

  public void unsetIncartSelect() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCARTSELECT_ISSET_ID);
  }

  /** Returns true if field incartSelect is set (has been assigned a value) and false otherwise */
  public boolean isSetIncartSelect() {
    return EncodingUtils.testBit(__isset_bitfield, __INCARTSELECT_ISSET_ID);
  }

  public void setIncartSelectIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCARTSELECT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CART_ID:
      if (value == null) {
        unsetCartId();
      } else {
        setCartId((Long)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Long)value);
      }
      break;

    case OBJ_ID:
      if (value == null) {
        unsetObjId();
      } else {
        setObjId((Long)value);
      }
      break;

    case MERCHANT_ID:
      if (value == null) {
        unsetMerchantId();
      } else {
        setMerchantId((Long)value);
      }
      break;

    case INCART_QUANTITY:
      if (value == null) {
        unsetIncartQuantity();
      } else {
        setIncartQuantity((Integer)value);
      }
      break;

    case INCART_SELECT:
      if (value == null) {
        unsetIncartSelect();
      } else {
        setIncartSelect((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CART_ID:
      return getCartId();

    case USER_ID:
      return getUserId();

    case OBJ_ID:
      return getObjId();

    case MERCHANT_ID:
      return getMerchantId();

    case INCART_QUANTITY:
      return getIncartQuantity();

    case INCART_SELECT:
      return getIncartSelect();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CART_ID:
      return isSetCartId();
    case USER_ID:
      return isSetUserId();
    case OBJ_ID:
      return isSetObjId();
    case MERCHANT_ID:
      return isSetMerchantId();
    case INCART_QUANTITY:
      return isSetIncartQuantity();
    case INCART_SELECT:
      return isSetIncartSelect();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CartInfo)
      return this.equals((CartInfo)that);
    return false;
  }

  public boolean equals(CartInfo that) {
    if (that == null)
      return false;

    boolean this_present_cartId = true;
    boolean that_present_cartId = true;
    if (this_present_cartId || that_present_cartId) {
      if (!(this_present_cartId && that_present_cartId))
        return false;
      if (this.cartId != that.cartId)
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_objId = true && this.isSetObjId();
    boolean that_present_objId = true && that.isSetObjId();
    if (this_present_objId || that_present_objId) {
      if (!(this_present_objId && that_present_objId))
        return false;
      if (this.objId != that.objId)
        return false;
    }

    boolean this_present_merchantId = true && this.isSetMerchantId();
    boolean that_present_merchantId = true && that.isSetMerchantId();
    if (this_present_merchantId || that_present_merchantId) {
      if (!(this_present_merchantId && that_present_merchantId))
        return false;
      if (this.merchantId != that.merchantId)
        return false;
    }

    boolean this_present_incartQuantity = true && this.isSetIncartQuantity();
    boolean that_present_incartQuantity = true && that.isSetIncartQuantity();
    if (this_present_incartQuantity || that_present_incartQuantity) {
      if (!(this_present_incartQuantity && that_present_incartQuantity))
        return false;
      if (this.incartQuantity != that.incartQuantity)
        return false;
    }

    boolean this_present_incartSelect = true && this.isSetIncartSelect();
    boolean that_present_incartSelect = true && that.isSetIncartSelect();
    if (this_present_incartSelect || that_present_incartSelect) {
      if (!(this_present_incartSelect && that_present_incartSelect))
        return false;
      if (this.incartSelect != that.incartSelect)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_cartId = true;
    list.add(present_cartId);
    if (present_cartId)
      list.add(cartId);

    boolean present_userId = true;
    list.add(present_userId);
    if (present_userId)
      list.add(userId);

    boolean present_objId = true && (isSetObjId());
    list.add(present_objId);
    if (present_objId)
      list.add(objId);

    boolean present_merchantId = true && (isSetMerchantId());
    list.add(present_merchantId);
    if (present_merchantId)
      list.add(merchantId);

    boolean present_incartQuantity = true && (isSetIncartQuantity());
    list.add(present_incartQuantity);
    if (present_incartQuantity)
      list.add(incartQuantity);

    boolean present_incartSelect = true && (isSetIncartSelect());
    list.add(present_incartSelect);
    if (present_incartSelect)
      list.add(incartSelect);

    return list.hashCode();
  }

  @Override
  public int compareTo(CartInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCartId()).compareTo(other.isSetCartId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCartId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cartId, other.cartId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetObjId()).compareTo(other.isSetObjId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObjId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.objId, other.objId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncartQuantity()).compareTo(other.isSetIncartQuantity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncartQuantity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.incartQuantity, other.incartQuantity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncartSelect()).compareTo(other.isSetIncartSelect());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncartSelect()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.incartSelect, other.incartSelect);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CartInfo(");
    boolean first = true;

    sb.append("cartId:");
    sb.append(this.cartId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (isSetObjId()) {
      if (!first) sb.append(", ");
      sb.append("objId:");
      sb.append(this.objId);
      first = false;
    }
    if (isSetMerchantId()) {
      if (!first) sb.append(", ");
      sb.append("merchantId:");
      sb.append(this.merchantId);
      first = false;
    }
    if (isSetIncartQuantity()) {
      if (!first) sb.append(", ");
      sb.append("incartQuantity:");
      sb.append(this.incartQuantity);
      first = false;
    }
    if (isSetIncartSelect()) {
      if (!first) sb.append(", ");
      sb.append("incartSelect:");
      sb.append(this.incartSelect);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // alas, we cannot check 'cartId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'userId' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CartInfoStandardSchemeFactory implements SchemeFactory {
    public CartInfoStandardScheme getScheme() {
      return new CartInfoStandardScheme();
    }
  }

  private static class CartInfoStandardScheme extends StandardScheme<CartInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CartInfo struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CART_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cartId = iprot.readI64();
              struct.setCartIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.userId = iprot.readI64();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OBJ_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.objId = iprot.readI64();
              struct.setObjIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MERCHANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.merchantId = iprot.readI64();
              struct.setMerchantIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INCART_QUANTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.incartQuantity = iprot.readI32();
              struct.setIncartQuantityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // INCART_SELECT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.incartSelect = iprot.readI32();
              struct.setIncartSelectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetCartId()) {
        throw new TProtocolException("Required field 'cartId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetUserId()) {
        throw new TProtocolException("Required field 'userId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CartInfo struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CART_ID_FIELD_DESC);
      oprot.writeI64(struct.cartId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI64(struct.userId);
      oprot.writeFieldEnd();
      if (struct.isSetObjId()) {
        oprot.writeFieldBegin(OBJ_ID_FIELD_DESC);
        oprot.writeI64(struct.objId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMerchantId()) {
        oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
        oprot.writeI64(struct.merchantId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIncartQuantity()) {
        oprot.writeFieldBegin(INCART_QUANTITY_FIELD_DESC);
        oprot.writeI32(struct.incartQuantity);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIncartSelect()) {
        oprot.writeFieldBegin(INCART_SELECT_FIELD_DESC);
        oprot.writeI32(struct.incartSelect);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CartInfoTupleSchemeFactory implements SchemeFactory {
    public CartInfoTupleScheme getScheme() {
      return new CartInfoTupleScheme();
    }
  }

  private static class CartInfoTupleScheme extends TupleScheme<CartInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CartInfo struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.cartId);
      oprot.writeI64(struct.userId);
      BitSet optionals = new BitSet();
      if (struct.isSetObjId()) {
        optionals.set(0);
      }
      if (struct.isSetMerchantId()) {
        optionals.set(1);
      }
      if (struct.isSetIncartQuantity()) {
        optionals.set(2);
      }
      if (struct.isSetIncartSelect()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetObjId()) {
        oprot.writeI64(struct.objId);
      }
      if (struct.isSetMerchantId()) {
        oprot.writeI64(struct.merchantId);
      }
      if (struct.isSetIncartQuantity()) {
        oprot.writeI32(struct.incartQuantity);
      }
      if (struct.isSetIncartSelect()) {
        oprot.writeI32(struct.incartSelect);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CartInfo struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.cartId = iprot.readI64();
      struct.setCartIdIsSet(true);
      struct.userId = iprot.readI64();
      struct.setUserIdIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.objId = iprot.readI64();
        struct.setObjIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.merchantId = iprot.readI64();
        struct.setMerchantIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.incartQuantity = iprot.readI32();
        struct.setIncartQuantityIsSet(true);
      }
      if (incoming.get(3)) {
        struct.incartSelect = iprot.readI32();
        struct.setIncartSelectIsSet(true);
      }
    }
  }

}

