/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.freeb.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2022-01-21")
public class CategoryService {

  public interface Iface {

    public ProductPage GetProductPage(long prodId) throws TException;

    public List<CategoryPage> GetCategoryPage(long userId, String searchKey) throws TException;

    public List<ProductInfo> BM2CompareParallelRpcEfficiency(int totalComputationLoad, int threadNum) throws TException;

    public List<ProductPage> BM4ComparePatternFanout(List<Long> pidLst) throws TException;

  }

  public interface AsyncIface {

    public void GetProductPage(long prodId, AsyncMethodCallback resultHandler) throws TException;

    public void GetCategoryPage(long userId, String searchKey, AsyncMethodCallback resultHandler) throws TException;

    public void BM2CompareParallelRpcEfficiency(int totalComputationLoad, int threadNum, AsyncMethodCallback resultHandler) throws TException;

    public void BM4ComparePatternFanout(List<Long> pidLst, AsyncMethodCallback resultHandler) throws TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public ProductPage GetProductPage(long prodId) throws TException
    {
      send_GetProductPage(prodId);
      return recv_GetProductPage();
    }

    public void send_GetProductPage(long prodId) throws TException
    {
      GetProductPage_args args = new GetProductPage_args();
      args.setProdId(prodId);
      sendBase("GetProductPage", args);
    }

    public ProductPage recv_GetProductPage() throws TException
    {
      GetProductPage_result result = new GetProductPage_result();
      receiveBase(result, "GetProductPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetProductPage failed: unknown result");
    }

    public List<CategoryPage> GetCategoryPage(long userId, String searchKey) throws TException
    {
      send_GetCategoryPage(userId, searchKey);
      return recv_GetCategoryPage();
    }

    public void send_GetCategoryPage(long userId, String searchKey) throws TException
    {
      GetCategoryPage_args args = new GetCategoryPage_args();
      args.setUserId(userId);
      args.setSearchKey(searchKey);
      sendBase("GetCategoryPage", args);
    }

    public List<CategoryPage> recv_GetCategoryPage() throws TException
    {
      GetCategoryPage_result result = new GetCategoryPage_result();
      receiveBase(result, "GetCategoryPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetCategoryPage failed: unknown result");
    }

    public List<ProductInfo> BM2CompareParallelRpcEfficiency(int totalComputationLoad, int threadNum) throws TException
    {
      send_BM2CompareParallelRpcEfficiency(totalComputationLoad, threadNum);
      return recv_BM2CompareParallelRpcEfficiency();
    }

    public void send_BM2CompareParallelRpcEfficiency(int totalComputationLoad, int threadNum) throws TException
    {
      BM2CompareParallelRpcEfficiency_args args = new BM2CompareParallelRpcEfficiency_args();
      args.setTotalComputationLoad(totalComputationLoad);
      args.setThreadNum(threadNum);
      sendBase("BM2CompareParallelRpcEfficiency", args);
    }

    public List<ProductInfo> recv_BM2CompareParallelRpcEfficiency() throws TException
    {
      BM2CompareParallelRpcEfficiency_result result = new BM2CompareParallelRpcEfficiency_result();
      receiveBase(result, "BM2CompareParallelRpcEfficiency");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "BM2CompareParallelRpcEfficiency failed: unknown result");
    }

    public List<ProductPage> BM4ComparePatternFanout(List<Long> pidLst) throws TException
    {
      send_BM4ComparePatternFanout(pidLst);
      return recv_BM4ComparePatternFanout();
    }

    public void send_BM4ComparePatternFanout(List<Long> pidLst) throws TException
    {
      BM4ComparePatternFanout_args args = new BM4ComparePatternFanout_args();
      args.setPidLst(pidLst);
      sendBase("BM4ComparePatternFanout", args);
    }

    public List<ProductPage> recv_BM4ComparePatternFanout() throws TException
    {
      BM4ComparePatternFanout_result result = new BM4ComparePatternFanout_result();
      receiveBase(result, "BM4ComparePatternFanout");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "BM4ComparePatternFanout failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void GetProductPage(long prodId, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      GetProductPage_call method_call = new GetProductPage_call(prodId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetProductPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long prodId;
      public GetProductPage_call(long prodId, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.prodId = prodId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetProductPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetProductPage_args args = new GetProductPage_args();
        args.setProdId(prodId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ProductPage getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetProductPage();
      }
    }

    public void GetCategoryPage(long userId, String searchKey, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      GetCategoryPage_call method_call = new GetCategoryPage_call(userId, searchKey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetCategoryPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long userId;
      private String searchKey;
      public GetCategoryPage_call(long userId, String searchKey, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.searchKey = searchKey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetCategoryPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetCategoryPage_args args = new GetCategoryPage_args();
        args.setUserId(userId);
        args.setSearchKey(searchKey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<CategoryPage> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetCategoryPage();
      }
    }

    public void BM2CompareParallelRpcEfficiency(int totalComputationLoad, int threadNum, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      BM2CompareParallelRpcEfficiency_call method_call = new BM2CompareParallelRpcEfficiency_call(totalComputationLoad, threadNum, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class BM2CompareParallelRpcEfficiency_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int totalComputationLoad;
      private int threadNum;
      public BM2CompareParallelRpcEfficiency_call(int totalComputationLoad, int threadNum, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.totalComputationLoad = totalComputationLoad;
        this.threadNum = threadNum;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("BM2CompareParallelRpcEfficiency", org.apache.thrift.protocol.TMessageType.CALL, 0));
        BM2CompareParallelRpcEfficiency_args args = new BM2CompareParallelRpcEfficiency_args();
        args.setTotalComputationLoad(totalComputationLoad);
        args.setThreadNum(threadNum);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ProductInfo> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_BM2CompareParallelRpcEfficiency();
      }
    }

    public void BM4ComparePatternFanout(List<Long> pidLst, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      BM4ComparePatternFanout_call method_call = new BM4ComparePatternFanout_call(pidLst, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class BM4ComparePatternFanout_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Long> pidLst;
      public BM4ComparePatternFanout_call(List<Long> pidLst, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pidLst = pidLst;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("BM4ComparePatternFanout", org.apache.thrift.protocol.TMessageType.CALL, 0));
        BM4ComparePatternFanout_args args = new BM4ComparePatternFanout_args();
        args.setPidLst(pidLst);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ProductPage> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_BM4ComparePatternFanout();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("GetProductPage", new GetProductPage());
      processMap.put("GetCategoryPage", new GetCategoryPage());
      processMap.put("BM2CompareParallelRpcEfficiency", new BM2CompareParallelRpcEfficiency());
      processMap.put("BM4ComparePatternFanout", new BM4ComparePatternFanout());
      return processMap;
    }

    public static class GetProductPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetProductPage_args> {
      public GetProductPage() {
        super("GetProductPage");
      }

      public GetProductPage_args getEmptyArgsInstance() {
        return new GetProductPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetProductPage_result getResult(I iface, GetProductPage_args args) throws TException {
        GetProductPage_result result = new GetProductPage_result();
        result.success = iface.GetProductPage(args.prodId);
        return result;
      }
    }

    public static class GetCategoryPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetCategoryPage_args> {
      public GetCategoryPage() {
        super("GetCategoryPage");
      }

      public GetCategoryPage_args getEmptyArgsInstance() {
        return new GetCategoryPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetCategoryPage_result getResult(I iface, GetCategoryPage_args args) throws TException {
        GetCategoryPage_result result = new GetCategoryPage_result();
        result.success = iface.GetCategoryPage(args.userId, args.searchKey);
        return result;
      }
    }

    public static class BM2CompareParallelRpcEfficiency<I extends Iface> extends org.apache.thrift.ProcessFunction<I, BM2CompareParallelRpcEfficiency_args> {
      public BM2CompareParallelRpcEfficiency() {
        super("BM2CompareParallelRpcEfficiency");
      }

      public BM2CompareParallelRpcEfficiency_args getEmptyArgsInstance() {
        return new BM2CompareParallelRpcEfficiency_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public BM2CompareParallelRpcEfficiency_result getResult(I iface, BM2CompareParallelRpcEfficiency_args args) throws TException {
        BM2CompareParallelRpcEfficiency_result result = new BM2CompareParallelRpcEfficiency_result();
        result.success = iface.BM2CompareParallelRpcEfficiency(args.totalComputationLoad, args.threadNum);
        return result;
      }
    }

    public static class BM4ComparePatternFanout<I extends Iface> extends org.apache.thrift.ProcessFunction<I, BM4ComparePatternFanout_args> {
      public BM4ComparePatternFanout() {
        super("BM4ComparePatternFanout");
      }

      public BM4ComparePatternFanout_args getEmptyArgsInstance() {
        return new BM4ComparePatternFanout_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public BM4ComparePatternFanout_result getResult(I iface, BM4ComparePatternFanout_args args) throws TException {
        BM4ComparePatternFanout_result result = new BM4ComparePatternFanout_result();
        result.success = iface.BM4ComparePatternFanout(args.pidLst);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("GetProductPage", new GetProductPage());
      processMap.put("GetCategoryPage", new GetCategoryPage());
      processMap.put("BM2CompareParallelRpcEfficiency", new BM2CompareParallelRpcEfficiency());
      processMap.put("BM4ComparePatternFanout", new BM4ComparePatternFanout());
      return processMap;
    }

    public static class GetProductPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetProductPage_args, ProductPage> {
      public GetProductPage() {
        super("GetProductPage");
      }

      public GetProductPage_args getEmptyArgsInstance() {
        return new GetProductPage_args();
      }

      public AsyncMethodCallback<ProductPage> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ProductPage>() { 
          public void onComplete(ProductPage o) {
            GetProductPage_result result = new GetProductPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetProductPage_result result = new GetProductPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetProductPage_args args, AsyncMethodCallback<ProductPage> resultHandler) throws TException {
        iface.GetProductPage(args.prodId,resultHandler);
      }
    }

    public static class GetCategoryPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetCategoryPage_args, List<CategoryPage>> {
      public GetCategoryPage() {
        super("GetCategoryPage");
      }

      public GetCategoryPage_args getEmptyArgsInstance() {
        return new GetCategoryPage_args();
      }

      public AsyncMethodCallback<List<CategoryPage>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<CategoryPage>>() { 
          public void onComplete(List<CategoryPage> o) {
            GetCategoryPage_result result = new GetCategoryPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetCategoryPage_result result = new GetCategoryPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetCategoryPage_args args, AsyncMethodCallback<List<CategoryPage>> resultHandler) throws TException {
        iface.GetCategoryPage(args.userId, args.searchKey,resultHandler);
      }
    }

    public static class BM2CompareParallelRpcEfficiency<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, BM2CompareParallelRpcEfficiency_args, List<ProductInfo>> {
      public BM2CompareParallelRpcEfficiency() {
        super("BM2CompareParallelRpcEfficiency");
      }

      public BM2CompareParallelRpcEfficiency_args getEmptyArgsInstance() {
        return new BM2CompareParallelRpcEfficiency_args();
      }

      public AsyncMethodCallback<List<ProductInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ProductInfo>>() {
          public void onComplete(List<ProductInfo> o) {
            BM2CompareParallelRpcEfficiency_result result = new BM2CompareParallelRpcEfficiency_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            BM2CompareParallelRpcEfficiency_result result = new BM2CompareParallelRpcEfficiency_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, BM2CompareParallelRpcEfficiency_args args, AsyncMethodCallback<List<ProductInfo>> resultHandler) throws TException {
        iface.BM2CompareParallelRpcEfficiency(args.totalComputationLoad, args.threadNum,resultHandler);
      }
    }

    public static class BM4ComparePatternFanout<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, BM4ComparePatternFanout_args, List<ProductPage>> {
      public BM4ComparePatternFanout() {
        super("BM4ComparePatternFanout");
      }

      public BM4ComparePatternFanout_args getEmptyArgsInstance() {
        return new BM4ComparePatternFanout_args();
      }

      public AsyncMethodCallback<List<ProductPage>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ProductPage>>() { 
          public void onComplete(List<ProductPage> o) {
            BM4ComparePatternFanout_result result = new BM4ComparePatternFanout_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            BM4ComparePatternFanout_result result = new BM4ComparePatternFanout_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, BM4ComparePatternFanout_args args, AsyncMethodCallback<List<ProductPage>> resultHandler) throws TException {
        iface.BM4ComparePatternFanout(args.pidLst,resultHandler);
      }
    }

  }

  public static class GetProductPage_args implements org.apache.thrift.TBase<GetProductPage_args, GetProductPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetProductPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetProductPage_args");

    private static final org.apache.thrift.protocol.TField PROD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("prodId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetProductPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetProductPage_argsTupleSchemeFactory());
    }

    public long prodId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROD_ID((short)1, "prodId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROD_ID
            return PROD_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PRODID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROD_ID, new org.apache.thrift.meta_data.FieldMetaData("prodId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetProductPage_args.class, metaDataMap);
    }

    public GetProductPage_args() {
    }

    public GetProductPage_args(
      long prodId)
    {
      this();
      this.prodId = prodId;
      setProdIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetProductPage_args(GetProductPage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.prodId = other.prodId;
    }

    public GetProductPage_args deepCopy() {
      return new GetProductPage_args(this);
    }

    @Override
    public void clear() {
      setProdIdIsSet(false);
      this.prodId = 0;
    }

    public long getProdId() {
      return this.prodId;
    }

    public GetProductPage_args setProdId(long prodId) {
      this.prodId = prodId;
      setProdIdIsSet(true);
      return this;
    }

    public void unsetProdId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODID_ISSET_ID);
    }

    /** Returns true if field prodId is set (has been assigned a value) and false otherwise */
    public boolean isSetProdId() {
      return EncodingUtils.testBit(__isset_bitfield, __PRODID_ISSET_ID);
    }

    public void setProdIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROD_ID:
        if (value == null) {
          unsetProdId();
        } else {
          setProdId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROD_ID:
        return getProdId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROD_ID:
        return isSetProdId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetProductPage_args)
        return this.equals((GetProductPage_args)that);
      return false;
    }

    public boolean equals(GetProductPage_args that) {
      if (that == null)
        return false;

      boolean this_present_prodId = true;
      boolean that_present_prodId = true;
      if (this_present_prodId || that_present_prodId) {
        if (!(this_present_prodId && that_present_prodId))
          return false;
        if (this.prodId != that.prodId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_prodId = true;
      list.add(present_prodId);
      if (present_prodId)
        list.add(prodId);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetProductPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProdId()).compareTo(other.isSetProdId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProdId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prodId, other.prodId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetProductPage_args(");
      boolean first = true;

      sb.append("prodId:");
      sb.append(this.prodId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetProductPage_argsStandardSchemeFactory implements SchemeFactory {
      public GetProductPage_argsStandardScheme getScheme() {
        return new GetProductPage_argsStandardScheme();
      }
    }

    private static class GetProductPage_argsStandardScheme extends StandardScheme<GetProductPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetProductPage_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.prodId = iprot.readI64();
                struct.setProdIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetProductPage_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROD_ID_FIELD_DESC);
        oprot.writeI64(struct.prodId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetProductPage_argsTupleSchemeFactory implements SchemeFactory {
      public GetProductPage_argsTupleScheme getScheme() {
        return new GetProductPage_argsTupleScheme();
      }
    }

    private static class GetProductPage_argsTupleScheme extends TupleScheme<GetProductPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetProductPage_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProdId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProdId()) {
          oprot.writeI64(struct.prodId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetProductPage_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.prodId = iprot.readI64();
          struct.setProdIdIsSet(true);
        }
      }
    }

  }

  public static class GetProductPage_result implements org.apache.thrift.TBase<GetProductPage_result, GetProductPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetProductPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetProductPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetProductPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetProductPage_resultTupleSchemeFactory());
    }

    public ProductPage success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProductPage.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetProductPage_result.class, metaDataMap);
    }

    public GetProductPage_result() {
    }

    public GetProductPage_result(
      ProductPage success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetProductPage_result(GetProductPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new ProductPage(other.success);
      }
    }

    public GetProductPage_result deepCopy() {
      return new GetProductPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ProductPage getSuccess() {
      return this.success;
    }

    public GetProductPage_result setSuccess(ProductPage success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ProductPage)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetProductPage_result)
        return this.equals((GetProductPage_result)that);
      return false;
    }

    public boolean equals(GetProductPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetProductPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetProductPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetProductPage_resultStandardSchemeFactory implements SchemeFactory {
      public GetProductPage_resultStandardScheme getScheme() {
        return new GetProductPage_resultStandardScheme();
      }
    }

    private static class GetProductPage_resultStandardScheme extends StandardScheme<GetProductPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetProductPage_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ProductPage();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetProductPage_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetProductPage_resultTupleSchemeFactory implements SchemeFactory {
      public GetProductPage_resultTupleScheme getScheme() {
        return new GetProductPage_resultTupleScheme();
      }
    }

    private static class GetProductPage_resultTupleScheme extends TupleScheme<GetProductPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetProductPage_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetProductPage_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ProductPage();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetCategoryPage_args implements org.apache.thrift.TBase<GetCategoryPage_args, GetCategoryPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetCategoryPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetCategoryPage_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField SEARCH_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("searchKey", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetCategoryPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetCategoryPage_argsTupleSchemeFactory());
    }

    public long userId; // required
    public String searchKey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      SEARCH_KEY((short)2, "searchKey");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // SEARCH_KEY
            return SEARCH_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.SEARCH_KEY, new org.apache.thrift.meta_data.FieldMetaData("searchKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetCategoryPage_args.class, metaDataMap);
    }

    public GetCategoryPage_args() {
    }

    public GetCategoryPage_args(
      long userId,
      String searchKey)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.searchKey = searchKey;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetCategoryPage_args(GetCategoryPage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      if (other.isSetSearchKey()) {
        this.searchKey = other.searchKey;
      }
    }

    public GetCategoryPage_args deepCopy() {
      return new GetCategoryPage_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      this.searchKey = null;
    }

    public long getUserId() {
      return this.userId;
    }

    public GetCategoryPage_args setUserId(long userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public String getSearchKey() {
      return this.searchKey;
    }

    public GetCategoryPage_args setSearchKey(String searchKey) {
      this.searchKey = searchKey;
      return this;
    }

    public void unsetSearchKey() {
      this.searchKey = null;
    }

    /** Returns true if field searchKey is set (has been assigned a value) and false otherwise */
    public boolean isSetSearchKey() {
      return this.searchKey != null;
    }

    public void setSearchKeyIsSet(boolean value) {
      if (!value) {
        this.searchKey = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Long)value);
        }
        break;

      case SEARCH_KEY:
        if (value == null) {
          unsetSearchKey();
        } else {
          setSearchKey((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case SEARCH_KEY:
        return getSearchKey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case SEARCH_KEY:
        return isSetSearchKey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetCategoryPage_args)
        return this.equals((GetCategoryPage_args)that);
      return false;
    }

    public boolean equals(GetCategoryPage_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_searchKey = true && this.isSetSearchKey();
      boolean that_present_searchKey = true && that.isSetSearchKey();
      if (this_present_searchKey || that_present_searchKey) {
        if (!(this_present_searchKey && that_present_searchKey))
          return false;
        if (!this.searchKey.equals(that.searchKey))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_searchKey = true && (isSetSearchKey());
      list.add(present_searchKey);
      if (present_searchKey)
        list.add(searchKey);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetCategoryPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSearchKey()).compareTo(other.isSetSearchKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSearchKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchKey, other.searchKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetCategoryPage_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("searchKey:");
      if (this.searchKey == null) {
        sb.append("null");
      } else {
        sb.append(this.searchKey);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetCategoryPage_argsStandardSchemeFactory implements SchemeFactory {
      public GetCategoryPage_argsStandardScheme getScheme() {
        return new GetCategoryPage_argsStandardScheme();
      }
    }

    private static class GetCategoryPage_argsStandardScheme extends StandardScheme<GetCategoryPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetCategoryPage_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userId = iprot.readI64();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SEARCH_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.searchKey = iprot.readString();
                struct.setSearchKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetCategoryPage_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userId);
        oprot.writeFieldEnd();
        if (struct.searchKey != null) {
          oprot.writeFieldBegin(SEARCH_KEY_FIELD_DESC);
          oprot.writeString(struct.searchKey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetCategoryPage_argsTupleSchemeFactory implements SchemeFactory {
      public GetCategoryPage_argsTupleScheme getScheme() {
        return new GetCategoryPage_argsTupleScheme();
      }
    }

    private static class GetCategoryPage_argsTupleScheme extends TupleScheme<GetCategoryPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetCategoryPage_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetSearchKey()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserId()) {
          oprot.writeI64(struct.userId);
        }
        if (struct.isSetSearchKey()) {
          oprot.writeString(struct.searchKey);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetCategoryPage_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userId = iprot.readI64();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.searchKey = iprot.readString();
          struct.setSearchKeyIsSet(true);
        }
      }
    }

  }

  public static class GetCategoryPage_result implements org.apache.thrift.TBase<GetCategoryPage_result, GetCategoryPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetCategoryPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetCategoryPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetCategoryPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetCategoryPage_resultTupleSchemeFactory());
    }

    public List<CategoryPage> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CategoryPage.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetCategoryPage_result.class, metaDataMap);
    }

    public GetCategoryPage_result() {
    }

    public GetCategoryPage_result(
      List<CategoryPage> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetCategoryPage_result(GetCategoryPage_result other) {
      if (other.isSetSuccess()) {
        List<CategoryPage> __this__success = new ArrayList<CategoryPage>(other.success.size());
        for (CategoryPage other_element : other.success) {
          __this__success.add(new CategoryPage(other_element));
        }
        this.success = __this__success;
      }
    }

    public GetCategoryPage_result deepCopy() {
      return new GetCategoryPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<CategoryPage> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(CategoryPage elem) {
      if (this.success == null) {
        this.success = new ArrayList<CategoryPage>();
      }
      this.success.add(elem);
    }

    public List<CategoryPage> getSuccess() {
      return this.success;
    }

    public GetCategoryPage_result setSuccess(List<CategoryPage> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<CategoryPage>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetCategoryPage_result)
        return this.equals((GetCategoryPage_result)that);
      return false;
    }

    public boolean equals(GetCategoryPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetCategoryPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetCategoryPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetCategoryPage_resultStandardSchemeFactory implements SchemeFactory {
      public GetCategoryPage_resultStandardScheme getScheme() {
        return new GetCategoryPage_resultStandardScheme();
      }
    }

    private static class GetCategoryPage_resultStandardScheme extends StandardScheme<GetCategoryPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetCategoryPage_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<CategoryPage>(_list8.size);
                  CategoryPage _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new CategoryPage();
                    _elem9.read(iprot);
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetCategoryPage_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (CategoryPage _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetCategoryPage_resultTupleSchemeFactory implements SchemeFactory {
      public GetCategoryPage_resultTupleScheme getScheme() {
        return new GetCategoryPage_resultTupleScheme();
      }
    }

    private static class GetCategoryPage_resultTupleScheme extends TupleScheme<GetCategoryPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetCategoryPage_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (CategoryPage _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetCategoryPage_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<CategoryPage>(_list13.size);
            CategoryPage _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new CategoryPage();
              _elem14.read(iprot);
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class BM2CompareParallelRpcEfficiency_args implements org.apache.thrift.TBase<BM2CompareParallelRpcEfficiency_args, BM2CompareParallelRpcEfficiency_args._Fields>, java.io.Serializable, Cloneable, Comparable<BM2CompareParallelRpcEfficiency_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BM2CompareParallelRpcEfficiency_args");

    private static final org.apache.thrift.protocol.TField TOTAL_COMPUTATION_LOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("totalComputationLoad", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField THREAD_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("threadNum", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new BM2CompareParallelRpcEfficiency_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new BM2CompareParallelRpcEfficiency_argsTupleSchemeFactory());
    }

    public int totalComputationLoad; // required
    public int threadNum; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOTAL_COMPUTATION_LOAD((short)1, "totalComputationLoad"),
      THREAD_NUM((short)2, "threadNum");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOTAL_COMPUTATION_LOAD
            return TOTAL_COMPUTATION_LOAD;
          case 2: // THREAD_NUM
            return THREAD_NUM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TOTALCOMPUTATIONLOAD_ISSET_ID = 0;
    private static final int __THREADNUM_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOTAL_COMPUTATION_LOAD, new org.apache.thrift.meta_data.FieldMetaData("totalComputationLoad", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.THREAD_NUM, new org.apache.thrift.meta_data.FieldMetaData("threadNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BM2CompareParallelRpcEfficiency_args.class, metaDataMap);
    }

    public BM2CompareParallelRpcEfficiency_args() {
    }

    public BM2CompareParallelRpcEfficiency_args(
      int totalComputationLoad,
      int threadNum)
    {
      this();
      this.totalComputationLoad = totalComputationLoad;
      setTotalComputationLoadIsSet(true);
      this.threadNum = threadNum;
      setThreadNumIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public BM2CompareParallelRpcEfficiency_args(BM2CompareParallelRpcEfficiency_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.totalComputationLoad = other.totalComputationLoad;
      this.threadNum = other.threadNum;
    }

    public BM2CompareParallelRpcEfficiency_args deepCopy() {
      return new BM2CompareParallelRpcEfficiency_args(this);
    }

    @Override
    public void clear() {
      setTotalComputationLoadIsSet(false);
      this.totalComputationLoad = 0;
      setThreadNumIsSet(false);
      this.threadNum = 0;
    }

    public int getTotalComputationLoad() {
      return this.totalComputationLoad;
    }

    public BM2CompareParallelRpcEfficiency_args setTotalComputationLoad(int totalComputationLoad) {
      this.totalComputationLoad = totalComputationLoad;
      setTotalComputationLoadIsSet(true);
      return this;
    }

    public void unsetTotalComputationLoad() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALCOMPUTATIONLOAD_ISSET_ID);
    }

    /** Returns true if field totalComputationLoad is set (has been assigned a value) and false otherwise */
    public boolean isSetTotalComputationLoad() {
      return EncodingUtils.testBit(__isset_bitfield, __TOTALCOMPUTATIONLOAD_ISSET_ID);
    }

    public void setTotalComputationLoadIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALCOMPUTATIONLOAD_ISSET_ID, value);
    }

    public int getThreadNum() {
      return this.threadNum;
    }

    public BM2CompareParallelRpcEfficiency_args setThreadNum(int threadNum) {
      this.threadNum = threadNum;
      setThreadNumIsSet(true);
      return this;
    }

    public void unsetThreadNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __THREADNUM_ISSET_ID);
    }

    /** Returns true if field threadNum is set (has been assigned a value) and false otherwise */
    public boolean isSetThreadNum() {
      return EncodingUtils.testBit(__isset_bitfield, __THREADNUM_ISSET_ID);
    }

    public void setThreadNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __THREADNUM_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOTAL_COMPUTATION_LOAD:
        if (value == null) {
          unsetTotalComputationLoad();
        } else {
          setTotalComputationLoad((Integer)value);
        }
        break;

      case THREAD_NUM:
        if (value == null) {
          unsetThreadNum();
        } else {
          setThreadNum((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOTAL_COMPUTATION_LOAD:
        return getTotalComputationLoad();

      case THREAD_NUM:
        return getThreadNum();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOTAL_COMPUTATION_LOAD:
        return isSetTotalComputationLoad();
      case THREAD_NUM:
        return isSetThreadNum();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof BM2CompareParallelRpcEfficiency_args)
        return this.equals((BM2CompareParallelRpcEfficiency_args)that);
      return false;
    }

    public boolean equals(BM2CompareParallelRpcEfficiency_args that) {
      if (that == null)
        return false;

      boolean this_present_totalComputationLoad = true;
      boolean that_present_totalComputationLoad = true;
      if (this_present_totalComputationLoad || that_present_totalComputationLoad) {
        if (!(this_present_totalComputationLoad && that_present_totalComputationLoad))
          return false;
        if (this.totalComputationLoad != that.totalComputationLoad)
          return false;
      }

      boolean this_present_threadNum = true;
      boolean that_present_threadNum = true;
      if (this_present_threadNum || that_present_threadNum) {
        if (!(this_present_threadNum && that_present_threadNum))
          return false;
        if (this.threadNum != that.threadNum)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_totalComputationLoad = true;
      list.add(present_totalComputationLoad);
      if (present_totalComputationLoad)
        list.add(totalComputationLoad);

      boolean present_threadNum = true;
      list.add(present_threadNum);
      if (present_threadNum)
        list.add(threadNum);

      return list.hashCode();
    }

    @Override
    public int compareTo(BM2CompareParallelRpcEfficiency_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTotalComputationLoad()).compareTo(other.isSetTotalComputationLoad());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTotalComputationLoad()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalComputationLoad, other.totalComputationLoad);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetThreadNum()).compareTo(other.isSetThreadNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetThreadNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.threadNum, other.threadNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("BM2CompareParallelRpcEfficiency_args(");
      boolean first = true;

      sb.append("totalComputationLoad:");
      sb.append(this.totalComputationLoad);
      first = false;
      if (!first) sb.append(", ");
      sb.append("threadNum:");
      sb.append(this.threadNum);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class BM2CompareParallelRpcEfficiency_argsStandardSchemeFactory implements SchemeFactory {
      public BM2CompareParallelRpcEfficiency_argsStandardScheme getScheme() {
        return new BM2CompareParallelRpcEfficiency_argsStandardScheme();
      }
    }

    private static class BM2CompareParallelRpcEfficiency_argsStandardScheme extends StandardScheme<BM2CompareParallelRpcEfficiency_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, BM2CompareParallelRpcEfficiency_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOTAL_COMPUTATION_LOAD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.totalComputationLoad = iprot.readI32();
                struct.setTotalComputationLoadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // THREAD_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.threadNum = iprot.readI32();
                struct.setThreadNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, BM2CompareParallelRpcEfficiency_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TOTAL_COMPUTATION_LOAD_FIELD_DESC);
        oprot.writeI32(struct.totalComputationLoad);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(THREAD_NUM_FIELD_DESC);
        oprot.writeI32(struct.threadNum);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class BM2CompareParallelRpcEfficiency_argsTupleSchemeFactory implements SchemeFactory {
      public BM2CompareParallelRpcEfficiency_argsTupleScheme getScheme() {
        return new BM2CompareParallelRpcEfficiency_argsTupleScheme();
      }
    }

    private static class BM2CompareParallelRpcEfficiency_argsTupleScheme extends TupleScheme<BM2CompareParallelRpcEfficiency_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, BM2CompareParallelRpcEfficiency_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTotalComputationLoad()) {
          optionals.set(0);
        }
        if (struct.isSetThreadNum()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTotalComputationLoad()) {
          oprot.writeI32(struct.totalComputationLoad);
        }
        if (struct.isSetThreadNum()) {
          oprot.writeI32(struct.threadNum);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, BM2CompareParallelRpcEfficiency_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.totalComputationLoad = iprot.readI32();
          struct.setTotalComputationLoadIsSet(true);
        }
        if (incoming.get(1)) {
          struct.threadNum = iprot.readI32();
          struct.setThreadNumIsSet(true);
        }
      }
    }

  }

  public static class BM2CompareParallelRpcEfficiency_result implements org.apache.thrift.TBase<BM2CompareParallelRpcEfficiency_result, BM2CompareParallelRpcEfficiency_result._Fields>, java.io.Serializable, Cloneable, Comparable<BM2CompareParallelRpcEfficiency_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BM2CompareParallelRpcEfficiency_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new BM2CompareParallelRpcEfficiency_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new BM2CompareParallelRpcEfficiency_resultTupleSchemeFactory());
    }

    public List<ProductInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProductInfo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BM2CompareParallelRpcEfficiency_result.class, metaDataMap);
    }

    public BM2CompareParallelRpcEfficiency_result() {
    }

    public BM2CompareParallelRpcEfficiency_result(
      List<ProductInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public BM2CompareParallelRpcEfficiency_result(BM2CompareParallelRpcEfficiency_result other) {
      if (other.isSetSuccess()) {
        List<ProductInfo> __this__success = new ArrayList<ProductInfo>(other.success.size());
        for (ProductInfo other_element : other.success) {
          __this__success.add(new ProductInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    public BM2CompareParallelRpcEfficiency_result deepCopy() {
      return new BM2CompareParallelRpcEfficiency_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ProductInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ProductInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<ProductInfo>();
      }
      this.success.add(elem);
    }

    public List<ProductInfo> getSuccess() {
      return this.success;
    }

    public BM2CompareParallelRpcEfficiency_result setSuccess(List<ProductInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ProductInfo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof BM2CompareParallelRpcEfficiency_result)
        return this.equals((BM2CompareParallelRpcEfficiency_result)that);
      return false;
    }

    public boolean equals(BM2CompareParallelRpcEfficiency_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(BM2CompareParallelRpcEfficiency_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("BM2CompareParallelRpcEfficiency_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class BM2CompareParallelRpcEfficiency_resultStandardSchemeFactory implements SchemeFactory {
      public BM2CompareParallelRpcEfficiency_resultStandardScheme getScheme() {
        return new BM2CompareParallelRpcEfficiency_resultStandardScheme();
      }
    }

    private static class BM2CompareParallelRpcEfficiency_resultStandardScheme extends StandardScheme<BM2CompareParallelRpcEfficiency_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, BM2CompareParallelRpcEfficiency_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<ProductInfo>(_list16.size);
                  ProductInfo _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new ProductInfo();
                    _elem17.read(iprot);
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, BM2CompareParallelRpcEfficiency_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ProductInfo _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class BM2CompareParallelRpcEfficiency_resultTupleSchemeFactory implements SchemeFactory {
      public BM2CompareParallelRpcEfficiency_resultTupleScheme getScheme() {
        return new BM2CompareParallelRpcEfficiency_resultTupleScheme();
      }
    }

    private static class BM2CompareParallelRpcEfficiency_resultTupleScheme extends TupleScheme<BM2CompareParallelRpcEfficiency_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, BM2CompareParallelRpcEfficiency_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ProductInfo _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, BM2CompareParallelRpcEfficiency_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ProductInfo>(_list21.size);
            ProductInfo _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new ProductInfo();
              _elem22.read(iprot);
              struct.success.add(_elem22);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class BM4ComparePatternFanout_args implements org.apache.thrift.TBase<BM4ComparePatternFanout_args, BM4ComparePatternFanout_args._Fields>, java.io.Serializable, Cloneable, Comparable<BM4ComparePatternFanout_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BM4ComparePatternFanout_args");

    private static final org.apache.thrift.protocol.TField PID_LST_FIELD_DESC = new org.apache.thrift.protocol.TField("pidLst", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new BM4ComparePatternFanout_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new BM4ComparePatternFanout_argsTupleSchemeFactory());
    }

    public List<Long> pidLst; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PID_LST((short)1, "pidLst");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PID_LST
            return PID_LST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PID_LST, new org.apache.thrift.meta_data.FieldMetaData("pidLst", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BM4ComparePatternFanout_args.class, metaDataMap);
    }

    public BM4ComparePatternFanout_args() {
    }

    public BM4ComparePatternFanout_args(
      List<Long> pidLst)
    {
      this();
      this.pidLst = pidLst;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public BM4ComparePatternFanout_args(BM4ComparePatternFanout_args other) {
      if (other.isSetPidLst()) {
        List<Long> __this__pidLst = new ArrayList<Long>(other.pidLst);
        this.pidLst = __this__pidLst;
      }
    }

    public BM4ComparePatternFanout_args deepCopy() {
      return new BM4ComparePatternFanout_args(this);
    }

    @Override
    public void clear() {
      this.pidLst = null;
    }

    public int getPidLstSize() {
      return (this.pidLst == null) ? 0 : this.pidLst.size();
    }

    public java.util.Iterator<Long> getPidLstIterator() {
      return (this.pidLst == null) ? null : this.pidLst.iterator();
    }

    public void addToPidLst(long elem) {
      if (this.pidLst == null) {
        this.pidLst = new ArrayList<Long>();
      }
      this.pidLst.add(elem);
    }

    public List<Long> getPidLst() {
      return this.pidLst;
    }

    public BM4ComparePatternFanout_args setPidLst(List<Long> pidLst) {
      this.pidLst = pidLst;
      return this;
    }

    public void unsetPidLst() {
      this.pidLst = null;
    }

    /** Returns true if field pidLst is set (has been assigned a value) and false otherwise */
    public boolean isSetPidLst() {
      return this.pidLst != null;
    }

    public void setPidLstIsSet(boolean value) {
      if (!value) {
        this.pidLst = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PID_LST:
        if (value == null) {
          unsetPidLst();
        } else {
          setPidLst((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PID_LST:
        return getPidLst();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PID_LST:
        return isSetPidLst();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof BM4ComparePatternFanout_args)
        return this.equals((BM4ComparePatternFanout_args)that);
      return false;
    }

    public boolean equals(BM4ComparePatternFanout_args that) {
      if (that == null)
        return false;

      boolean this_present_pidLst = true && this.isSetPidLst();
      boolean that_present_pidLst = true && that.isSetPidLst();
      if (this_present_pidLst || that_present_pidLst) {
        if (!(this_present_pidLst && that_present_pidLst))
          return false;
        if (!this.pidLst.equals(that.pidLst))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pidLst = true && (isSetPidLst());
      list.add(present_pidLst);
      if (present_pidLst)
        list.add(pidLst);

      return list.hashCode();
    }

    @Override
    public int compareTo(BM4ComparePatternFanout_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPidLst()).compareTo(other.isSetPidLst());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPidLst()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pidLst, other.pidLst);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("BM4ComparePatternFanout_args(");
      boolean first = true;

      sb.append("pidLst:");
      if (this.pidLst == null) {
        sb.append("null");
      } else {
        sb.append(this.pidLst);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class BM4ComparePatternFanout_argsStandardSchemeFactory implements SchemeFactory {
      public BM4ComparePatternFanout_argsStandardScheme getScheme() {
        return new BM4ComparePatternFanout_argsStandardScheme();
      }
    }

    private static class BM4ComparePatternFanout_argsStandardScheme extends StandardScheme<BM4ComparePatternFanout_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, BM4ComparePatternFanout_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PID_LST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.pidLst = new ArrayList<Long>(_list24.size);
                  long _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = iprot.readI64();
                    struct.pidLst.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setPidLstIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, BM4ComparePatternFanout_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pidLst != null) {
          oprot.writeFieldBegin(PID_LST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.pidLst.size()));
            for (long _iter27 : struct.pidLst)
            {
              oprot.writeI64(_iter27);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class BM4ComparePatternFanout_argsTupleSchemeFactory implements SchemeFactory {
      public BM4ComparePatternFanout_argsTupleScheme getScheme() {
        return new BM4ComparePatternFanout_argsTupleScheme();
      }
    }

    private static class BM4ComparePatternFanout_argsTupleScheme extends TupleScheme<BM4ComparePatternFanout_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, BM4ComparePatternFanout_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPidLst()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPidLst()) {
          {
            oprot.writeI32(struct.pidLst.size());
            for (long _iter28 : struct.pidLst)
            {
              oprot.writeI64(_iter28);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, BM4ComparePatternFanout_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.pidLst = new ArrayList<Long>(_list29.size);
            long _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = iprot.readI64();
              struct.pidLst.add(_elem30);
            }
          }
          struct.setPidLstIsSet(true);
        }
      }
    }

  }

  public static class BM4ComparePatternFanout_result implements org.apache.thrift.TBase<BM4ComparePatternFanout_result, BM4ComparePatternFanout_result._Fields>, java.io.Serializable, Cloneable, Comparable<BM4ComparePatternFanout_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BM4ComparePatternFanout_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new BM4ComparePatternFanout_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new BM4ComparePatternFanout_resultTupleSchemeFactory());
    }

    public List<ProductPage> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProductPage.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BM4ComparePatternFanout_result.class, metaDataMap);
    }

    public BM4ComparePatternFanout_result() {
    }

    public BM4ComparePatternFanout_result(
      List<ProductPage> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public BM4ComparePatternFanout_result(BM4ComparePatternFanout_result other) {
      if (other.isSetSuccess()) {
        List<ProductPage> __this__success = new ArrayList<ProductPage>(other.success.size());
        for (ProductPage other_element : other.success) {
          __this__success.add(new ProductPage(other_element));
        }
        this.success = __this__success;
      }
    }

    public BM4ComparePatternFanout_result deepCopy() {
      return new BM4ComparePatternFanout_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ProductPage> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ProductPage elem) {
      if (this.success == null) {
        this.success = new ArrayList<ProductPage>();
      }
      this.success.add(elem);
    }

    public List<ProductPage> getSuccess() {
      return this.success;
    }

    public BM4ComparePatternFanout_result setSuccess(List<ProductPage> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ProductPage>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof BM4ComparePatternFanout_result)
        return this.equals((BM4ComparePatternFanout_result)that);
      return false;
    }

    public boolean equals(BM4ComparePatternFanout_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(BM4ComparePatternFanout_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("BM4ComparePatternFanout_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class BM4ComparePatternFanout_resultStandardSchemeFactory implements SchemeFactory {
      public BM4ComparePatternFanout_resultStandardScheme getScheme() {
        return new BM4ComparePatternFanout_resultStandardScheme();
      }
    }

    private static class BM4ComparePatternFanout_resultStandardScheme extends StandardScheme<BM4ComparePatternFanout_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, BM4ComparePatternFanout_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new ArrayList<ProductPage>(_list32.size);
                  ProductPage _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = new ProductPage();
                    _elem33.read(iprot);
                    struct.success.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, BM4ComparePatternFanout_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ProductPage _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class BM4ComparePatternFanout_resultTupleSchemeFactory implements SchemeFactory {
      public BM4ComparePatternFanout_resultTupleScheme getScheme() {
        return new BM4ComparePatternFanout_resultTupleScheme();
      }
    }

    private static class BM4ComparePatternFanout_resultTupleScheme extends TupleScheme<BM4ComparePatternFanout_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, BM4ComparePatternFanout_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ProductPage _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, BM4ComparePatternFanout_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ProductPage>(_list37.size);
            ProductPage _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = new ProductPage();
              _elem38.read(iprot);
              struct.success.add(_elem38);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
