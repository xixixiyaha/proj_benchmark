/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.freeb.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2022-01-21")
public class ProductPage implements org.apache.thrift.TBase<ProductPage, ProductPage._Fields>, java.io.Serializable, Cloneable, Comparable<ProductPage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProductPage");

  private static final org.apache.thrift.protocol.TField INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("info", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField MERCHANT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantName", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField DISCOUNT_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("discountVal", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField PROD_COMMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("prodComments", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProductPageStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProductPageTupleSchemeFactory());
  }

  public com.freeb.thrift.ProductInfo info; // required
  public long merchantId; // optional
  public long merchantName; // optional
  public double discountVal; // optional
  public List<com.freeb.thrift.CommentInfo> prodComments; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INFO((short)1, "info"),
    MERCHANT_ID((short)2, "merchantId"),
    MERCHANT_NAME((short)3, "merchantName"),
    DISCOUNT_VAL((short)4, "discountVal"),
    PROD_COMMENTS((short)5, "prodComments");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INFO
          return INFO;
        case 2: // MERCHANT_ID
          return MERCHANT_ID;
        case 3: // MERCHANT_NAME
          return MERCHANT_NAME;
        case 4: // DISCOUNT_VAL
          return DISCOUNT_VAL;
        case 5: // PROD_COMMENTS
          return PROD_COMMENTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MERCHANTID_ISSET_ID = 0;
  private static final int __MERCHANTNAME_ISSET_ID = 1;
  private static final int __DISCOUNTVAL_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.MERCHANT_ID,_Fields.MERCHANT_NAME,_Fields.DISCOUNT_VAL,_Fields.PROD_COMMENTS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INFO, new org.apache.thrift.meta_data.FieldMetaData("info", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.freeb.thrift.ProductInfo.class)));
    tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MERCHANT_NAME, new org.apache.thrift.meta_data.FieldMetaData("merchantName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DISCOUNT_VAL, new org.apache.thrift.meta_data.FieldMetaData("discountVal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PROD_COMMENTS, new org.apache.thrift.meta_data.FieldMetaData("prodComments", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.freeb.thrift.CommentInfo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProductPage.class, metaDataMap);
  }

  public ProductPage() {
  }

  public ProductPage(
    com.freeb.thrift.ProductInfo info)
  {
    this();
    this.info = info;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProductPage(ProductPage other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetInfo()) {
      this.info = new com.freeb.thrift.ProductInfo(other.info);
    }
    this.merchantId = other.merchantId;
    this.merchantName = other.merchantName;
    this.discountVal = other.discountVal;
    if (other.isSetProdComments()) {
      List<com.freeb.thrift.CommentInfo> __this__prodComments = new ArrayList<com.freeb.thrift.CommentInfo>(other.prodComments.size());
      for (com.freeb.thrift.CommentInfo other_element : other.prodComments) {
        __this__prodComments.add(new com.freeb.thrift.CommentInfo(other_element));
      }
      this.prodComments = __this__prodComments;
    }
  }

  public ProductPage deepCopy() {
    return new ProductPage(this);
  }

  @Override
  public void clear() {
    this.info = null;
    setMerchantIdIsSet(false);
    this.merchantId = 0;
    setMerchantNameIsSet(false);
    this.merchantName = 0;
    setDiscountValIsSet(false);
    this.discountVal = 0.0;
    this.prodComments = null;
  }

  public com.freeb.thrift.ProductInfo getInfo() {
    return this.info;
  }

  public ProductPage setInfo(com.freeb.thrift.ProductInfo info) {
    this.info = info;
    return this;
  }

  public void unsetInfo() {
    this.info = null;
  }

  /** Returns true if field info is set (has been assigned a value) and false otherwise */
  public boolean isSetInfo() {
    return this.info != null;
  }

  public void setInfoIsSet(boolean value) {
    if (!value) {
      this.info = null;
    }
  }

  public long getMerchantId() {
    return this.merchantId;
  }

  public ProductPage setMerchantId(long merchantId) {
    this.merchantId = merchantId;
    setMerchantIdIsSet(true);
    return this;
  }

  public void unsetMerchantId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MERCHANTID_ISSET_ID);
  }

  /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantId() {
    return EncodingUtils.testBit(__isset_bitfield, __MERCHANTID_ISSET_ID);
  }

  public void setMerchantIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MERCHANTID_ISSET_ID, value);
  }

  public long getMerchantName() {
    return this.merchantName;
  }

  public ProductPage setMerchantName(long merchantName) {
    this.merchantName = merchantName;
    setMerchantNameIsSet(true);
    return this;
  }

  public void unsetMerchantName() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MERCHANTNAME_ISSET_ID);
  }

  /** Returns true if field merchantName is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantName() {
    return EncodingUtils.testBit(__isset_bitfield, __MERCHANTNAME_ISSET_ID);
  }

  public void setMerchantNameIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MERCHANTNAME_ISSET_ID, value);
  }

  public double getDiscountVal() {
    return this.discountVal;
  }

  public ProductPage setDiscountVal(double discountVal) {
    this.discountVal = discountVal;
    setDiscountValIsSet(true);
    return this;
  }

  public void unsetDiscountVal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISCOUNTVAL_ISSET_ID);
  }

  /** Returns true if field discountVal is set (has been assigned a value) and false otherwise */
  public boolean isSetDiscountVal() {
    return EncodingUtils.testBit(__isset_bitfield, __DISCOUNTVAL_ISSET_ID);
  }

  public void setDiscountValIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISCOUNTVAL_ISSET_ID, value);
  }

  public int getProdCommentsSize() {
    return (this.prodComments == null) ? 0 : this.prodComments.size();
  }

  public java.util.Iterator<com.freeb.thrift.CommentInfo> getProdCommentsIterator() {
    return (this.prodComments == null) ? null : this.prodComments.iterator();
  }

  public void addToProdComments(com.freeb.thrift.CommentInfo elem) {
    if (this.prodComments == null) {
      this.prodComments = new ArrayList<com.freeb.thrift.CommentInfo>();
    }
    this.prodComments.add(elem);
  }

  public List<com.freeb.thrift.CommentInfo> getProdComments() {
    return this.prodComments;
  }

  public ProductPage setProdComments(List<com.freeb.thrift.CommentInfo> prodComments) {
    this.prodComments = prodComments;
    return this;
  }

  public void unsetProdComments() {
    this.prodComments = null;
  }

  /** Returns true if field prodComments is set (has been assigned a value) and false otherwise */
  public boolean isSetProdComments() {
    return this.prodComments != null;
  }

  public void setProdCommentsIsSet(boolean value) {
    if (!value) {
      this.prodComments = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INFO:
      if (value == null) {
        unsetInfo();
      } else {
        setInfo((com.freeb.thrift.ProductInfo)value);
      }
      break;

    case MERCHANT_ID:
      if (value == null) {
        unsetMerchantId();
      } else {
        setMerchantId((Long)value);
      }
      break;

    case MERCHANT_NAME:
      if (value == null) {
        unsetMerchantName();
      } else {
        setMerchantName((Long)value);
      }
      break;

    case DISCOUNT_VAL:
      if (value == null) {
        unsetDiscountVal();
      } else {
        setDiscountVal((Double)value);
      }
      break;

    case PROD_COMMENTS:
      if (value == null) {
        unsetProdComments();
      } else {
        setProdComments((List<com.freeb.thrift.CommentInfo>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INFO:
      return getInfo();

    case MERCHANT_ID:
      return getMerchantId();

    case MERCHANT_NAME:
      return getMerchantName();

    case DISCOUNT_VAL:
      return getDiscountVal();

    case PROD_COMMENTS:
      return getProdComments();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INFO:
      return isSetInfo();
    case MERCHANT_ID:
      return isSetMerchantId();
    case MERCHANT_NAME:
      return isSetMerchantName();
    case DISCOUNT_VAL:
      return isSetDiscountVal();
    case PROD_COMMENTS:
      return isSetProdComments();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProductPage)
      return this.equals((ProductPage)that);
    return false;
  }

  public boolean equals(ProductPage that) {
    if (that == null)
      return false;

    boolean this_present_info = true && this.isSetInfo();
    boolean that_present_info = true && that.isSetInfo();
    if (this_present_info || that_present_info) {
      if (!(this_present_info && that_present_info))
        return false;
      if (!this.info.equals(that.info))
        return false;
    }

    boolean this_present_merchantId = true && this.isSetMerchantId();
    boolean that_present_merchantId = true && that.isSetMerchantId();
    if (this_present_merchantId || that_present_merchantId) {
      if (!(this_present_merchantId && that_present_merchantId))
        return false;
      if (this.merchantId != that.merchantId)
        return false;
    }

    boolean this_present_merchantName = true && this.isSetMerchantName();
    boolean that_present_merchantName = true && that.isSetMerchantName();
    if (this_present_merchantName || that_present_merchantName) {
      if (!(this_present_merchantName && that_present_merchantName))
        return false;
      if (this.merchantName != that.merchantName)
        return false;
    }

    boolean this_present_discountVal = true && this.isSetDiscountVal();
    boolean that_present_discountVal = true && that.isSetDiscountVal();
    if (this_present_discountVal || that_present_discountVal) {
      if (!(this_present_discountVal && that_present_discountVal))
        return false;
      if (this.discountVal != that.discountVal)
        return false;
    }

    boolean this_present_prodComments = true && this.isSetProdComments();
    boolean that_present_prodComments = true && that.isSetProdComments();
    if (this_present_prodComments || that_present_prodComments) {
      if (!(this_present_prodComments && that_present_prodComments))
        return false;
      if (!this.prodComments.equals(that.prodComments))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_info = true && (isSetInfo());
    list.add(present_info);
    if (present_info)
      list.add(info);

    boolean present_merchantId = true && (isSetMerchantId());
    list.add(present_merchantId);
    if (present_merchantId)
      list.add(merchantId);

    boolean present_merchantName = true && (isSetMerchantName());
    list.add(present_merchantName);
    if (present_merchantName)
      list.add(merchantName);

    boolean present_discountVal = true && (isSetDiscountVal());
    list.add(present_discountVal);
    if (present_discountVal)
      list.add(discountVal);

    boolean present_prodComments = true && (isSetProdComments());
    list.add(present_prodComments);
    if (present_prodComments)
      list.add(prodComments);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProductPage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetInfo()).compareTo(other.isSetInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.info, other.info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantName()).compareTo(other.isSetMerchantName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantName, other.merchantName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDiscountVal()).compareTo(other.isSetDiscountVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiscountVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.discountVal, other.discountVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProdComments()).compareTo(other.isSetProdComments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProdComments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prodComments, other.prodComments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProductPage(");
    boolean first = true;

    sb.append("info:");
    if (this.info == null) {
      sb.append("null");
    } else {
      sb.append(this.info);
    }
    first = false;
    if (isSetMerchantId()) {
      if (!first) sb.append(", ");
      sb.append("merchantId:");
      sb.append(this.merchantId);
      first = false;
    }
    if (isSetMerchantName()) {
      if (!first) sb.append(", ");
      sb.append("merchantName:");
      sb.append(this.merchantName);
      first = false;
    }
    if (isSetDiscountVal()) {
      if (!first) sb.append(", ");
      sb.append("discountVal:");
      sb.append(this.discountVal);
      first = false;
    }
    if (isSetProdComments()) {
      if (!first) sb.append(", ");
      sb.append("prodComments:");
      if (this.prodComments == null) {
        sb.append("null");
      } else {
        sb.append(this.prodComments);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (info == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'info' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (info != null) {
      info.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProductPageStandardSchemeFactory implements SchemeFactory {
    public ProductPageStandardScheme getScheme() {
      return new ProductPageStandardScheme();
    }
  }

  private static class ProductPageStandardScheme extends StandardScheme<ProductPage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProductPage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.info = new com.freeb.thrift.ProductInfo();
              struct.info.read(iprot);
              struct.setInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MERCHANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.merchantId = iprot.readI64();
              struct.setMerchantIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MERCHANT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.merchantName = iprot.readI64();
              struct.setMerchantNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DISCOUNT_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.discountVal = iprot.readDouble();
              struct.setDiscountValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PROD_COMMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.prodComments = new ArrayList<com.freeb.thrift.CommentInfo>(_list0.size);
                com.freeb.thrift.CommentInfo _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new com.freeb.thrift.CommentInfo();
                  _elem1.read(iprot);
                  struct.prodComments.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setProdCommentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProductPage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.info != null) {
        oprot.writeFieldBegin(INFO_FIELD_DESC);
        struct.info.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMerchantId()) {
        oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
        oprot.writeI64(struct.merchantId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMerchantName()) {
        oprot.writeFieldBegin(MERCHANT_NAME_FIELD_DESC);
        oprot.writeI64(struct.merchantName);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDiscountVal()) {
        oprot.writeFieldBegin(DISCOUNT_VAL_FIELD_DESC);
        oprot.writeDouble(struct.discountVal);
        oprot.writeFieldEnd();
      }
      if (struct.prodComments != null) {
        if (struct.isSetProdComments()) {
          oprot.writeFieldBegin(PROD_COMMENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.prodComments.size()));
            for (com.freeb.thrift.CommentInfo _iter3 : struct.prodComments)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProductPageTupleSchemeFactory implements SchemeFactory {
    public ProductPageTupleScheme getScheme() {
      return new ProductPageTupleScheme();
    }
  }

  private static class ProductPageTupleScheme extends TupleScheme<ProductPage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProductPage struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.info.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetMerchantId()) {
        optionals.set(0);
      }
      if (struct.isSetMerchantName()) {
        optionals.set(1);
      }
      if (struct.isSetDiscountVal()) {
        optionals.set(2);
      }
      if (struct.isSetProdComments()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetMerchantId()) {
        oprot.writeI64(struct.merchantId);
      }
      if (struct.isSetMerchantName()) {
        oprot.writeI64(struct.merchantName);
      }
      if (struct.isSetDiscountVal()) {
        oprot.writeDouble(struct.discountVal);
      }
      if (struct.isSetProdComments()) {
        {
          oprot.writeI32(struct.prodComments.size());
          for (com.freeb.thrift.CommentInfo _iter4 : struct.prodComments)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProductPage struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.info = new com.freeb.thrift.ProductInfo();
      struct.info.read(iprot);
      struct.setInfoIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.merchantId = iprot.readI64();
        struct.setMerchantIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.merchantName = iprot.readI64();
        struct.setMerchantNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.discountVal = iprot.readDouble();
        struct.setDiscountValIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.prodComments = new ArrayList<com.freeb.thrift.CommentInfo>(_list5.size);
          com.freeb.thrift.CommentInfo _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new com.freeb.thrift.CommentInfo();
            _elem6.read(iprot);
            struct.prodComments.add(_elem6);
          }
        }
        struct.setProdCommentsIsSet(true);
      }
    }
  }

}

