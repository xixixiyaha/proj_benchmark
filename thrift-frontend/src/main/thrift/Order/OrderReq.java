/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.freeb.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2022-01-23")
public class OrderReq implements org.apache.thrift.TBase<OrderReq, OrderReq._Fields>, java.io.Serializable, Cloneable, Comparable<OrderReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OrderReq");

  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField MERCHANT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PROD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("prodId", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField PROD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("prodName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField PAYMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentId", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField CART_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cartId", org.apache.thrift.protocol.TType.I64, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OrderReqStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OrderReqTupleSchemeFactory());
  }

  public long userId; // required
  public int status; // optional
  public long merchantId; // optional
  public String merchantName; // optional
  public long prodId; // optional
  public String prodName; // optional
  public long orderId; // optional
  public long paymentId; // optional
  public long cartId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_ID((short)1, "userId"),
    STATUS((short)2, "status"),
    MERCHANT_ID((short)3, "merchantId"),
    MERCHANT_NAME((short)4, "merchantName"),
    PROD_ID((short)5, "prodId"),
    PROD_NAME((short)6, "prodName"),
    ORDER_ID((short)7, "orderId"),
    PAYMENT_ID((short)8, "paymentId"),
    CART_ID((short)9, "cartId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
          return USER_ID;
        case 2: // STATUS
          return STATUS;
        case 3: // MERCHANT_ID
          return MERCHANT_ID;
        case 4: // MERCHANT_NAME
          return MERCHANT_NAME;
        case 5: // PROD_ID
          return PROD_ID;
        case 6: // PROD_NAME
          return PROD_NAME;
        case 7: // ORDER_ID
          return ORDER_ID;
        case 8: // PAYMENT_ID
          return PAYMENT_ID;
        case 9: // CART_ID
          return CART_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USERID_ISSET_ID = 0;
  private static final int __STATUS_ISSET_ID = 1;
  private static final int __MERCHANTID_ISSET_ID = 2;
  private static final int __PRODID_ISSET_ID = 3;
  private static final int __ORDERID_ISSET_ID = 4;
  private static final int __PAYMENTID_ISSET_ID = 5;
  private static final int __CARTID_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.STATUS,_Fields.MERCHANT_ID,_Fields.MERCHANT_NAME,_Fields.PROD_ID,_Fields.PROD_NAME,_Fields.ORDER_ID,_Fields.PAYMENT_ID,_Fields.CART_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MERCHANT_NAME, new org.apache.thrift.meta_data.FieldMetaData("merchantName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROD_ID, new org.apache.thrift.meta_data.FieldMetaData("prodId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PROD_NAME, new org.apache.thrift.meta_data.FieldMetaData("prodName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PAYMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("paymentId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CART_ID, new org.apache.thrift.meta_data.FieldMetaData("cartId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrderReq.class, metaDataMap);
  }

  public OrderReq() {
  }

  public OrderReq(
    long userId)
  {
    this();
    this.userId = userId;
    setUserIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OrderReq(OrderReq other) {
    __isset_bitfield = other.__isset_bitfield;
    this.userId = other.userId;
    this.status = other.status;
    this.merchantId = other.merchantId;
    if (other.isSetMerchantName()) {
      this.merchantName = other.merchantName;
    }
    this.prodId = other.prodId;
    if (other.isSetProdName()) {
      this.prodName = other.prodName;
    }
    this.orderId = other.orderId;
    this.paymentId = other.paymentId;
    this.cartId = other.cartId;
  }

  public OrderReq deepCopy() {
    return new OrderReq(this);
  }

  @Override
  public void clear() {
    setUserIdIsSet(false);
    this.userId = 0;
    setStatusIsSet(false);
    this.status = 0;
    setMerchantIdIsSet(false);
    this.merchantId = 0;
    this.merchantName = null;
    setProdIdIsSet(false);
    this.prodId = 0;
    this.prodName = null;
    setOrderIdIsSet(false);
    this.orderId = 0;
    setPaymentIdIsSet(false);
    this.paymentId = 0;
    setCartIdIsSet(false);
    this.cartId = 0;
  }

  public long getUserId() {
    return this.userId;
  }

  public OrderReq setUserId(long userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public OrderReq setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public long getMerchantId() {
    return this.merchantId;
  }

  public OrderReq setMerchantId(long merchantId) {
    this.merchantId = merchantId;
    setMerchantIdIsSet(true);
    return this;
  }

  public void unsetMerchantId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MERCHANTID_ISSET_ID);
  }

  /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantId() {
    return EncodingUtils.testBit(__isset_bitfield, __MERCHANTID_ISSET_ID);
  }

  public void setMerchantIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MERCHANTID_ISSET_ID, value);
  }

  public String getMerchantName() {
    return this.merchantName;
  }

  public OrderReq setMerchantName(String merchantName) {
    this.merchantName = merchantName;
    return this;
  }

  public void unsetMerchantName() {
    this.merchantName = null;
  }

  /** Returns true if field merchantName is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantName() {
    return this.merchantName != null;
  }

  public void setMerchantNameIsSet(boolean value) {
    if (!value) {
      this.merchantName = null;
    }
  }

  public long getProdId() {
    return this.prodId;
  }

  public OrderReq setProdId(long prodId) {
    this.prodId = prodId;
    setProdIdIsSet(true);
    return this;
  }

  public void unsetProdId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODID_ISSET_ID);
  }

  /** Returns true if field prodId is set (has been assigned a value) and false otherwise */
  public boolean isSetProdId() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODID_ISSET_ID);
  }

  public void setProdIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODID_ISSET_ID, value);
  }

  public String getProdName() {
    return this.prodName;
  }

  public OrderReq setProdName(String prodName) {
    this.prodName = prodName;
    return this;
  }

  public void unsetProdName() {
    this.prodName = null;
  }

  /** Returns true if field prodName is set (has been assigned a value) and false otherwise */
  public boolean isSetProdName() {
    return this.prodName != null;
  }

  public void setProdNameIsSet(boolean value) {
    if (!value) {
      this.prodName = null;
    }
  }

  public long getOrderId() {
    return this.orderId;
  }

  public OrderReq setOrderId(long orderId) {
    this.orderId = orderId;
    setOrderIdIsSet(true);
    return this;
  }

  public void unsetOrderId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERID_ISSET_ID);
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERID_ISSET_ID);
  }

  public void setOrderIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERID_ISSET_ID, value);
  }

  public long getPaymentId() {
    return this.paymentId;
  }

  public OrderReq setPaymentId(long paymentId) {
    this.paymentId = paymentId;
    setPaymentIdIsSet(true);
    return this;
  }

  public void unsetPaymentId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYMENTID_ISSET_ID);
  }

  /** Returns true if field paymentId is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentId() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYMENTID_ISSET_ID);
  }

  public void setPaymentIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYMENTID_ISSET_ID, value);
  }

  public long getCartId() {
    return this.cartId;
  }

  public OrderReq setCartId(long cartId) {
    this.cartId = cartId;
    setCartIdIsSet(true);
    return this;
  }

  public void unsetCartId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CARTID_ISSET_ID);
  }

  /** Returns true if field cartId is set (has been assigned a value) and false otherwise */
  public boolean isSetCartId() {
    return EncodingUtils.testBit(__isset_bitfield, __CARTID_ISSET_ID);
  }

  public void setCartIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CARTID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Long)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case MERCHANT_ID:
      if (value == null) {
        unsetMerchantId();
      } else {
        setMerchantId((Long)value);
      }
      break;

    case MERCHANT_NAME:
      if (value == null) {
        unsetMerchantName();
      } else {
        setMerchantName((String)value);
      }
      break;

    case PROD_ID:
      if (value == null) {
        unsetProdId();
      } else {
        setProdId((Long)value);
      }
      break;

    case PROD_NAME:
      if (value == null) {
        unsetProdName();
      } else {
        setProdName((String)value);
      }
      break;

    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((Long)value);
      }
      break;

    case PAYMENT_ID:
      if (value == null) {
        unsetPaymentId();
      } else {
        setPaymentId((Long)value);
      }
      break;

    case CART_ID:
      if (value == null) {
        unsetCartId();
      } else {
        setCartId((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return getUserId();

    case STATUS:
      return getStatus();

    case MERCHANT_ID:
      return getMerchantId();

    case MERCHANT_NAME:
      return getMerchantName();

    case PROD_ID:
      return getProdId();

    case PROD_NAME:
      return getProdName();

    case ORDER_ID:
      return getOrderId();

    case PAYMENT_ID:
      return getPaymentId();

    case CART_ID:
      return getCartId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUserId();
    case STATUS:
      return isSetStatus();
    case MERCHANT_ID:
      return isSetMerchantId();
    case MERCHANT_NAME:
      return isSetMerchantName();
    case PROD_ID:
      return isSetProdId();
    case PROD_NAME:
      return isSetProdName();
    case ORDER_ID:
      return isSetOrderId();
    case PAYMENT_ID:
      return isSetPaymentId();
    case CART_ID:
      return isSetCartId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OrderReq)
      return this.equals((OrderReq)that);
    return false;
  }

  public boolean equals(OrderReq that) {
    if (that == null)
      return false;

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_merchantId = true && this.isSetMerchantId();
    boolean that_present_merchantId = true && that.isSetMerchantId();
    if (this_present_merchantId || that_present_merchantId) {
      if (!(this_present_merchantId && that_present_merchantId))
        return false;
      if (this.merchantId != that.merchantId)
        return false;
    }

    boolean this_present_merchantName = true && this.isSetMerchantName();
    boolean that_present_merchantName = true && that.isSetMerchantName();
    if (this_present_merchantName || that_present_merchantName) {
      if (!(this_present_merchantName && that_present_merchantName))
        return false;
      if (!this.merchantName.equals(that.merchantName))
        return false;
    }

    boolean this_present_prodId = true && this.isSetProdId();
    boolean that_present_prodId = true && that.isSetProdId();
    if (this_present_prodId || that_present_prodId) {
      if (!(this_present_prodId && that_present_prodId))
        return false;
      if (this.prodId != that.prodId)
        return false;
    }

    boolean this_present_prodName = true && this.isSetProdName();
    boolean that_present_prodName = true && that.isSetProdName();
    if (this_present_prodName || that_present_prodName) {
      if (!(this_present_prodName && that_present_prodName))
        return false;
      if (!this.prodName.equals(that.prodName))
        return false;
    }

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (this.orderId != that.orderId)
        return false;
    }

    boolean this_present_paymentId = true && this.isSetPaymentId();
    boolean that_present_paymentId = true && that.isSetPaymentId();
    if (this_present_paymentId || that_present_paymentId) {
      if (!(this_present_paymentId && that_present_paymentId))
        return false;
      if (this.paymentId != that.paymentId)
        return false;
    }

    boolean this_present_cartId = true && this.isSetCartId();
    boolean that_present_cartId = true && that.isSetCartId();
    if (this_present_cartId || that_present_cartId) {
      if (!(this_present_cartId && that_present_cartId))
        return false;
      if (this.cartId != that.cartId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_userId = true;
    list.add(present_userId);
    if (present_userId)
      list.add(userId);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_merchantId = true && (isSetMerchantId());
    list.add(present_merchantId);
    if (present_merchantId)
      list.add(merchantId);

    boolean present_merchantName = true && (isSetMerchantName());
    list.add(present_merchantName);
    if (present_merchantName)
      list.add(merchantName);

    boolean present_prodId = true && (isSetProdId());
    list.add(present_prodId);
    if (present_prodId)
      list.add(prodId);

    boolean present_prodName = true && (isSetProdName());
    list.add(present_prodName);
    if (present_prodName)
      list.add(prodName);

    boolean present_orderId = true && (isSetOrderId());
    list.add(present_orderId);
    if (present_orderId)
      list.add(orderId);

    boolean present_paymentId = true && (isSetPaymentId());
    list.add(present_paymentId);
    if (present_paymentId)
      list.add(paymentId);

    boolean present_cartId = true && (isSetCartId());
    list.add(present_cartId);
    if (present_cartId)
      list.add(cartId);

    return list.hashCode();
  }

  @Override
  public int compareTo(OrderReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantName()).compareTo(other.isSetMerchantName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantName, other.merchantName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProdId()).compareTo(other.isSetProdId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProdId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prodId, other.prodId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProdName()).compareTo(other.isSetProdName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProdName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prodName, other.prodName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentId()).compareTo(other.isSetPaymentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentId, other.paymentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCartId()).compareTo(other.isSetCartId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCartId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cartId, other.cartId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OrderReq(");
    boolean first = true;

    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      sb.append(this.status);
      first = false;
    }
    if (isSetMerchantId()) {
      if (!first) sb.append(", ");
      sb.append("merchantId:");
      sb.append(this.merchantId);
      first = false;
    }
    if (isSetMerchantName()) {
      if (!first) sb.append(", ");
      sb.append("merchantName:");
      if (this.merchantName == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantName);
      }
      first = false;
    }
    if (isSetProdId()) {
      if (!first) sb.append(", ");
      sb.append("prodId:");
      sb.append(this.prodId);
      first = false;
    }
    if (isSetProdName()) {
      if (!first) sb.append(", ");
      sb.append("prodName:");
      if (this.prodName == null) {
        sb.append("null");
      } else {
        sb.append(this.prodName);
      }
      first = false;
    }
    if (isSetOrderId()) {
      if (!first) sb.append(", ");
      sb.append("orderId:");
      sb.append(this.orderId);
      first = false;
    }
    if (isSetPaymentId()) {
      if (!first) sb.append(", ");
      sb.append("paymentId:");
      sb.append(this.paymentId);
      first = false;
    }
    if (isSetCartId()) {
      if (!first) sb.append(", ");
      sb.append("cartId:");
      sb.append(this.cartId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'userId' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OrderReqStandardSchemeFactory implements SchemeFactory {
    public OrderReqStandardScheme getScheme() {
      return new OrderReqStandardScheme();
    }
  }

  private static class OrderReqStandardScheme extends StandardScheme<OrderReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OrderReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.userId = iprot.readI64();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MERCHANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.merchantId = iprot.readI64();
              struct.setMerchantIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MERCHANT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantName = iprot.readString();
              struct.setMerchantNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PROD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.prodId = iprot.readI64();
              struct.setProdIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PROD_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.prodName = iprot.readString();
              struct.setProdNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.orderId = iprot.readI64();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PAYMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.paymentId = iprot.readI64();
              struct.setPaymentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CART_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cartId = iprot.readI64();
              struct.setCartIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetUserId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OrderReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI64(struct.userId);
      oprot.writeFieldEnd();
      if (struct.isSetStatus()) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMerchantId()) {
        oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
        oprot.writeI64(struct.merchantId);
        oprot.writeFieldEnd();
      }
      if (struct.merchantName != null) {
        if (struct.isSetMerchantName()) {
          oprot.writeFieldBegin(MERCHANT_NAME_FIELD_DESC);
          oprot.writeString(struct.merchantName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetProdId()) {
        oprot.writeFieldBegin(PROD_ID_FIELD_DESC);
        oprot.writeI64(struct.prodId);
        oprot.writeFieldEnd();
      }
      if (struct.prodName != null) {
        if (struct.isSetProdName()) {
          oprot.writeFieldBegin(PROD_NAME_FIELD_DESC);
          oprot.writeString(struct.prodName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOrderId()) {
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeI64(struct.orderId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPaymentId()) {
        oprot.writeFieldBegin(PAYMENT_ID_FIELD_DESC);
        oprot.writeI64(struct.paymentId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCartId()) {
        oprot.writeFieldBegin(CART_ID_FIELD_DESC);
        oprot.writeI64(struct.cartId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OrderReqTupleSchemeFactory implements SchemeFactory {
    public OrderReqTupleScheme getScheme() {
      return new OrderReqTupleScheme();
    }
  }

  private static class OrderReqTupleScheme extends TupleScheme<OrderReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OrderReq struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.userId);
      BitSet optionals = new BitSet();
      if (struct.isSetStatus()) {
        optionals.set(0);
      }
      if (struct.isSetMerchantId()) {
        optionals.set(1);
      }
      if (struct.isSetMerchantName()) {
        optionals.set(2);
      }
      if (struct.isSetProdId()) {
        optionals.set(3);
      }
      if (struct.isSetProdName()) {
        optionals.set(4);
      }
      if (struct.isSetOrderId()) {
        optionals.set(5);
      }
      if (struct.isSetPaymentId()) {
        optionals.set(6);
      }
      if (struct.isSetCartId()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetMerchantId()) {
        oprot.writeI64(struct.merchantId);
      }
      if (struct.isSetMerchantName()) {
        oprot.writeString(struct.merchantName);
      }
      if (struct.isSetProdId()) {
        oprot.writeI64(struct.prodId);
      }
      if (struct.isSetProdName()) {
        oprot.writeString(struct.prodName);
      }
      if (struct.isSetOrderId()) {
        oprot.writeI64(struct.orderId);
      }
      if (struct.isSetPaymentId()) {
        oprot.writeI64(struct.paymentId);
      }
      if (struct.isSetCartId()) {
        oprot.writeI64(struct.cartId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OrderReq struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.userId = iprot.readI64();
      struct.setUserIdIsSet(true);
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(1)) {
        struct.merchantId = iprot.readI64();
        struct.setMerchantIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.merchantName = iprot.readString();
        struct.setMerchantNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.prodId = iprot.readI64();
        struct.setProdIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.prodName = iprot.readString();
        struct.setProdNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.orderId = iprot.readI64();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.paymentId = iprot.readI64();
        struct.setPaymentIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.cartId = iprot.readI64();
        struct.setCartIdIsSet(true);
      }
    }
  }

}

