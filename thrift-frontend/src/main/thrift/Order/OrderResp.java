/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.freeb.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2022-01-21")
public class OrderResp implements org.apache.thrift.TBase<OrderResp, OrderResp._Fields>, java.io.Serializable, Cloneable, Comparable<OrderResp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OrderResp");

  private static final org.apache.thrift.protocol.TField ORDER_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("orderInfos", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField HAS_MORE_FIELD_DESC = new org.apache.thrift.protocol.TField("hasMore", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField BASE_RESP_FIELD_DESC = new org.apache.thrift.protocol.TField("baseResp", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OrderRespStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OrderRespTupleSchemeFactory());
  }

  public List<OrderInfo> orderInfos; // optional
  public boolean hasMore; // optional
  public BaseResp baseResp; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ORDER_INFOS((short)1, "orderInfos"),
    HAS_MORE((short)2, "hasMore"),
    BASE_RESP((short)3, "baseResp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_INFOS
          return ORDER_INFOS;
        case 2: // HAS_MORE
          return HAS_MORE;
        case 3: // BASE_RESP
          return BASE_RESP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HASMORE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ORDER_INFOS,_Fields.HAS_MORE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_INFOS, new org.apache.thrift.meta_data.FieldMetaData("orderInfos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OrderInfo.class))));
    tmpMap.put(_Fields.HAS_MORE, new org.apache.thrift.meta_data.FieldMetaData("hasMore", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BASE_RESP, new org.apache.thrift.meta_data.FieldMetaData("baseResp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BaseResp.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrderResp.class, metaDataMap);
  }

  public OrderResp() {
  }

  public OrderResp(
    BaseResp baseResp)
  {
    this();
    this.baseResp = baseResp;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OrderResp(OrderResp other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOrderInfos()) {
      List<OrderInfo> __this__orderInfos = new ArrayList<OrderInfo>(other.orderInfos.size());
      for (OrderInfo other_element : other.orderInfos) {
        __this__orderInfos.add(new OrderInfo(other_element));
      }
      this.orderInfos = __this__orderInfos;
    }
    this.hasMore = other.hasMore;
    if (other.isSetBaseResp()) {
      this.baseResp = new BaseResp(other.baseResp);
    }
  }

  public OrderResp deepCopy() {
    return new OrderResp(this);
  }

  @Override
  public void clear() {
    this.orderInfos = null;
    setHasMoreIsSet(false);
    this.hasMore = false;
    this.baseResp = null;
  }

  public int getOrderInfosSize() {
    return (this.orderInfos == null) ? 0 : this.orderInfos.size();
  }

  public java.util.Iterator<OrderInfo> getOrderInfosIterator() {
    return (this.orderInfos == null) ? null : this.orderInfos.iterator();
  }

  public void addToOrderInfos(OrderInfo elem) {
    if (this.orderInfos == null) {
      this.orderInfos = new ArrayList<OrderInfo>();
    }
    this.orderInfos.add(elem);
  }

  public List<OrderInfo> getOrderInfos() {
    return this.orderInfos;
  }

  public OrderResp setOrderInfos(List<OrderInfo> orderInfos) {
    this.orderInfos = orderInfos;
    return this;
  }

  public void unsetOrderInfos() {
    this.orderInfos = null;
  }

  /** Returns true if field orderInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderInfos() {
    return this.orderInfos != null;
  }

  public void setOrderInfosIsSet(boolean value) {
    if (!value) {
      this.orderInfos = null;
    }
  }

  public boolean isHasMore() {
    return this.hasMore;
  }

  public OrderResp setHasMore(boolean hasMore) {
    this.hasMore = hasMore;
    setHasMoreIsSet(true);
    return this;
  }

  public void unsetHasMore() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASMORE_ISSET_ID);
  }

  /** Returns true if field hasMore is set (has been assigned a value) and false otherwise */
  public boolean isSetHasMore() {
    return EncodingUtils.testBit(__isset_bitfield, __HASMORE_ISSET_ID);
  }

  public void setHasMoreIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASMORE_ISSET_ID, value);
  }

  public BaseResp getBaseResp() {
    return this.baseResp;
  }

  public OrderResp setBaseResp(BaseResp baseResp) {
    this.baseResp = baseResp;
    return this;
  }

  public void unsetBaseResp() {
    this.baseResp = null;
  }

  /** Returns true if field baseResp is set (has been assigned a value) and false otherwise */
  public boolean isSetBaseResp() {
    return this.baseResp != null;
  }

  public void setBaseRespIsSet(boolean value) {
    if (!value) {
      this.baseResp = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORDER_INFOS:
      if (value == null) {
        unsetOrderInfos();
      } else {
        setOrderInfos((List<OrderInfo>)value);
      }
      break;

    case HAS_MORE:
      if (value == null) {
        unsetHasMore();
      } else {
        setHasMore((Boolean)value);
      }
      break;

    case BASE_RESP:
      if (value == null) {
        unsetBaseResp();
      } else {
        setBaseResp((BaseResp)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_INFOS:
      return getOrderInfos();

    case HAS_MORE:
      return isHasMore();

    case BASE_RESP:
      return getBaseResp();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORDER_INFOS:
      return isSetOrderInfos();
    case HAS_MORE:
      return isSetHasMore();
    case BASE_RESP:
      return isSetBaseResp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OrderResp)
      return this.equals((OrderResp)that);
    return false;
  }

  public boolean equals(OrderResp that) {
    if (that == null)
      return false;

    boolean this_present_orderInfos = true && this.isSetOrderInfos();
    boolean that_present_orderInfos = true && that.isSetOrderInfos();
    if (this_present_orderInfos || that_present_orderInfos) {
      if (!(this_present_orderInfos && that_present_orderInfos))
        return false;
      if (!this.orderInfos.equals(that.orderInfos))
        return false;
    }

    boolean this_present_hasMore = true && this.isSetHasMore();
    boolean that_present_hasMore = true && that.isSetHasMore();
    if (this_present_hasMore || that_present_hasMore) {
      if (!(this_present_hasMore && that_present_hasMore))
        return false;
      if (this.hasMore != that.hasMore)
        return false;
    }

    boolean this_present_baseResp = true && this.isSetBaseResp();
    boolean that_present_baseResp = true && that.isSetBaseResp();
    if (this_present_baseResp || that_present_baseResp) {
      if (!(this_present_baseResp && that_present_baseResp))
        return false;
      if (!this.baseResp.equals(that.baseResp))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_orderInfos = true && (isSetOrderInfos());
    list.add(present_orderInfos);
    if (present_orderInfos)
      list.add(orderInfos);

    boolean present_hasMore = true && (isSetHasMore());
    list.add(present_hasMore);
    if (present_hasMore)
      list.add(hasMore);

    boolean present_baseResp = true && (isSetBaseResp());
    list.add(present_baseResp);
    if (present_baseResp)
      list.add(baseResp);

    return list.hashCode();
  }

  @Override
  public int compareTo(OrderResp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOrderInfos()).compareTo(other.isSetOrderInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderInfos, other.orderInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHasMore()).compareTo(other.isSetHasMore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasMore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasMore, other.hasMore);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBaseResp()).compareTo(other.isSetBaseResp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBaseResp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.baseResp, other.baseResp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OrderResp(");
    boolean first = true;

    if (isSetOrderInfos()) {
      sb.append("orderInfos:");
      if (this.orderInfos == null) {
        sb.append("null");
      } else {
        sb.append(this.orderInfos);
      }
      first = false;
    }
    if (isSetHasMore()) {
      if (!first) sb.append(", ");
      sb.append("hasMore:");
      sb.append(this.hasMore);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("baseResp:");
    if (this.baseResp == null) {
      sb.append("null");
    } else {
      sb.append(this.baseResp);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (baseResp == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'baseResp' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (baseResp != null) {
      baseResp.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OrderRespStandardSchemeFactory implements SchemeFactory {
    public OrderRespStandardScheme getScheme() {
      return new OrderRespStandardScheme();
    }
  }

  private static class OrderRespStandardScheme extends StandardScheme<OrderResp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OrderResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDER_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.orderInfos = new ArrayList<OrderInfo>(_list0.size);
                OrderInfo _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new OrderInfo();
                  _elem1.read(iprot);
                  struct.orderInfos.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setOrderInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HAS_MORE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hasMore = iprot.readBool();
              struct.setHasMoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BASE_RESP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.baseResp = new BaseResp();
              struct.baseResp.read(iprot);
              struct.setBaseRespIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OrderResp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.orderInfos != null) {
        if (struct.isSetOrderInfos()) {
          oprot.writeFieldBegin(ORDER_INFOS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.orderInfos.size()));
            for (OrderInfo _iter3 : struct.orderInfos)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetHasMore()) {
        oprot.writeFieldBegin(HAS_MORE_FIELD_DESC);
        oprot.writeBool(struct.hasMore);
        oprot.writeFieldEnd();
      }
      if (struct.baseResp != null) {
        oprot.writeFieldBegin(BASE_RESP_FIELD_DESC);
        struct.baseResp.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OrderRespTupleSchemeFactory implements SchemeFactory {
    public OrderRespTupleScheme getScheme() {
      return new OrderRespTupleScheme();
    }
  }

  private static class OrderRespTupleScheme extends TupleScheme<OrderResp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OrderResp struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.baseResp.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetOrderInfos()) {
        optionals.set(0);
      }
      if (struct.isSetHasMore()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetOrderInfos()) {
        {
          oprot.writeI32(struct.orderInfos.size());
          for (OrderInfo _iter4 : struct.orderInfos)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetHasMore()) {
        oprot.writeBool(struct.hasMore);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OrderResp struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.baseResp = new BaseResp();
      struct.baseResp.read(iprot);
      struct.setBaseRespIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.orderInfos = new ArrayList<OrderInfo>(_list5.size);
          OrderInfo _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new OrderInfo();
            _elem6.read(iprot);
            struct.orderInfos.add(_elem6);
          }
        }
        struct.setOrderInfosIsSet(true);
      }
      if (incoming.get(1)) {
        struct.hasMore = iprot.readBool();
        struct.setHasMoreIsSet(true);
      }
    }
  }

}

