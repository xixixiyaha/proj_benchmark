/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.freeb.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2022-01-21")
public class PaymentInfo implements org.apache.thrift.TBase<PaymentInfo, PaymentInfo._Fields>, java.io.Serializable, Cloneable, Comparable<PaymentInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PaymentInfo");

  private static final org.apache.thrift.protocol.TField PAYMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField PAYMENT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentStatus", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PAYMENT_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentVal", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField DISCOUNTS_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("discountsVal", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField PAYMENT_CARD_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentCard", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PaymentInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PaymentInfoTupleSchemeFactory());
  }

  public long paymentId; // required
  public int paymentStatus; // optional
  public double paymentVal; // required
  public double discountsVal; // optional
  public String paymentCard; // optional
  public long userId; // required
  public String createTime; // optional
  public String updateTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PAYMENT_ID((short)1, "paymentId"),
    PAYMENT_STATUS((short)2, "paymentStatus"),
    PAYMENT_VAL((short)3, "paymentVal"),
    DISCOUNTS_VAL((short)4, "discountsVal"),
    PAYMENT_CARD((short)5, "paymentCard"),
    USER_ID((short)6, "userId"),
    CREATE_TIME((short)7, "createTime"),
    UPDATE_TIME((short)8, "updateTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PAYMENT_ID
          return PAYMENT_ID;
        case 2: // PAYMENT_STATUS
          return PAYMENT_STATUS;
        case 3: // PAYMENT_VAL
          return PAYMENT_VAL;
        case 4: // DISCOUNTS_VAL
          return DISCOUNTS_VAL;
        case 5: // PAYMENT_CARD
          return PAYMENT_CARD;
        case 6: // USER_ID
          return USER_ID;
        case 7: // CREATE_TIME
          return CREATE_TIME;
        case 8: // UPDATE_TIME
          return UPDATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PAYMENTID_ISSET_ID = 0;
  private static final int __PAYMENTSTATUS_ISSET_ID = 1;
  private static final int __PAYMENTVAL_ISSET_ID = 2;
  private static final int __DISCOUNTSVAL_ISSET_ID = 3;
  private static final int __USERID_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PAYMENT_STATUS,_Fields.DISCOUNTS_VAL,_Fields.PAYMENT_CARD,_Fields.CREATE_TIME,_Fields.UPDATE_TIME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PAYMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("paymentId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PAYMENT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("paymentStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAYMENT_VAL, new org.apache.thrift.meta_data.FieldMetaData("paymentVal", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DISCOUNTS_VAL, new org.apache.thrift.meta_data.FieldMetaData("discountsVal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PAYMENT_CARD, new org.apache.thrift.meta_data.FieldMetaData("paymentCard", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PaymentInfo.class, metaDataMap);
  }

  public PaymentInfo() {
  }

  public PaymentInfo(
    long paymentId,
    double paymentVal,
    long userId)
  {
    this();
    this.paymentId = paymentId;
    setPaymentIdIsSet(true);
    this.paymentVal = paymentVal;
    setPaymentValIsSet(true);
    this.userId = userId;
    setUserIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PaymentInfo(PaymentInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.paymentId = other.paymentId;
    this.paymentStatus = other.paymentStatus;
    this.paymentVal = other.paymentVal;
    this.discountsVal = other.discountsVal;
    if (other.isSetPaymentCard()) {
      this.paymentCard = other.paymentCard;
    }
    this.userId = other.userId;
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetUpdateTime()) {
      this.updateTime = other.updateTime;
    }
  }

  public PaymentInfo deepCopy() {
    return new PaymentInfo(this);
  }

  @Override
  public void clear() {
    setPaymentIdIsSet(false);
    this.paymentId = 0;
    setPaymentStatusIsSet(false);
    this.paymentStatus = 0;
    setPaymentValIsSet(false);
    this.paymentVal = 0.0;
    setDiscountsValIsSet(false);
    this.discountsVal = 0.0;
    this.paymentCard = null;
    setUserIdIsSet(false);
    this.userId = 0;
    this.createTime = null;
    this.updateTime = null;
  }

  public long getPaymentId() {
    return this.paymentId;
  }

  public PaymentInfo setPaymentId(long paymentId) {
    this.paymentId = paymentId;
    setPaymentIdIsSet(true);
    return this;
  }

  public void unsetPaymentId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYMENTID_ISSET_ID);
  }

  /** Returns true if field paymentId is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentId() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYMENTID_ISSET_ID);
  }

  public void setPaymentIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYMENTID_ISSET_ID, value);
  }

  public int getPaymentStatus() {
    return this.paymentStatus;
  }

  public PaymentInfo setPaymentStatus(int paymentStatus) {
    this.paymentStatus = paymentStatus;
    setPaymentStatusIsSet(true);
    return this;
  }

  public void unsetPaymentStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYMENTSTATUS_ISSET_ID);
  }

  /** Returns true if field paymentStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYMENTSTATUS_ISSET_ID);
  }

  public void setPaymentStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYMENTSTATUS_ISSET_ID, value);
  }

  public double getPaymentVal() {
    return this.paymentVal;
  }

  public PaymentInfo setPaymentVal(double paymentVal) {
    this.paymentVal = paymentVal;
    setPaymentValIsSet(true);
    return this;
  }

  public void unsetPaymentVal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYMENTVAL_ISSET_ID);
  }

  /** Returns true if field paymentVal is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentVal() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYMENTVAL_ISSET_ID);
  }

  public void setPaymentValIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYMENTVAL_ISSET_ID, value);
  }

  public double getDiscountsVal() {
    return this.discountsVal;
  }

  public PaymentInfo setDiscountsVal(double discountsVal) {
    this.discountsVal = discountsVal;
    setDiscountsValIsSet(true);
    return this;
  }

  public void unsetDiscountsVal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISCOUNTSVAL_ISSET_ID);
  }

  /** Returns true if field discountsVal is set (has been assigned a value) and false otherwise */
  public boolean isSetDiscountsVal() {
    return EncodingUtils.testBit(__isset_bitfield, __DISCOUNTSVAL_ISSET_ID);
  }

  public void setDiscountsValIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISCOUNTSVAL_ISSET_ID, value);
  }

  public String getPaymentCard() {
    return this.paymentCard;
  }

  public PaymentInfo setPaymentCard(String paymentCard) {
    this.paymentCard = paymentCard;
    return this;
  }

  public void unsetPaymentCard() {
    this.paymentCard = null;
  }

  /** Returns true if field paymentCard is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentCard() {
    return this.paymentCard != null;
  }

  public void setPaymentCardIsSet(boolean value) {
    if (!value) {
      this.paymentCard = null;
    }
  }

  public long getUserId() {
    return this.userId;
  }

  public PaymentInfo setUserId(long userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public PaymentInfo setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getUpdateTime() {
    return this.updateTime;
  }

  public PaymentInfo setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  public void unsetUpdateTime() {
    this.updateTime = null;
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return this.updateTime != null;
  }

  public void setUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.updateTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PAYMENT_ID:
      if (value == null) {
        unsetPaymentId();
      } else {
        setPaymentId((Long)value);
      }
      break;

    case PAYMENT_STATUS:
      if (value == null) {
        unsetPaymentStatus();
      } else {
        setPaymentStatus((Integer)value);
      }
      break;

    case PAYMENT_VAL:
      if (value == null) {
        unsetPaymentVal();
      } else {
        setPaymentVal((Double)value);
      }
      break;

    case DISCOUNTS_VAL:
      if (value == null) {
        unsetDiscountsVal();
      } else {
        setDiscountsVal((Double)value);
      }
      break;

    case PAYMENT_CARD:
      if (value == null) {
        unsetPaymentCard();
      } else {
        setPaymentCard((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Long)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PAYMENT_ID:
      return getPaymentId();

    case PAYMENT_STATUS:
      return getPaymentStatus();

    case PAYMENT_VAL:
      return getPaymentVal();

    case DISCOUNTS_VAL:
      return getDiscountsVal();

    case PAYMENT_CARD:
      return getPaymentCard();

    case USER_ID:
      return getUserId();

    case CREATE_TIME:
      return getCreateTime();

    case UPDATE_TIME:
      return getUpdateTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PAYMENT_ID:
      return isSetPaymentId();
    case PAYMENT_STATUS:
      return isSetPaymentStatus();
    case PAYMENT_VAL:
      return isSetPaymentVal();
    case DISCOUNTS_VAL:
      return isSetDiscountsVal();
    case PAYMENT_CARD:
      return isSetPaymentCard();
    case USER_ID:
      return isSetUserId();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PaymentInfo)
      return this.equals((PaymentInfo)that);
    return false;
  }

  public boolean equals(PaymentInfo that) {
    if (that == null)
      return false;

    boolean this_present_paymentId = true;
    boolean that_present_paymentId = true;
    if (this_present_paymentId || that_present_paymentId) {
      if (!(this_present_paymentId && that_present_paymentId))
        return false;
      if (this.paymentId != that.paymentId)
        return false;
    }

    boolean this_present_paymentStatus = true && this.isSetPaymentStatus();
    boolean that_present_paymentStatus = true && that.isSetPaymentStatus();
    if (this_present_paymentStatus || that_present_paymentStatus) {
      if (!(this_present_paymentStatus && that_present_paymentStatus))
        return false;
      if (this.paymentStatus != that.paymentStatus)
        return false;
    }

    boolean this_present_paymentVal = true;
    boolean that_present_paymentVal = true;
    if (this_present_paymentVal || that_present_paymentVal) {
      if (!(this_present_paymentVal && that_present_paymentVal))
        return false;
      if (this.paymentVal != that.paymentVal)
        return false;
    }

    boolean this_present_discountsVal = true && this.isSetDiscountsVal();
    boolean that_present_discountsVal = true && that.isSetDiscountsVal();
    if (this_present_discountsVal || that_present_discountsVal) {
      if (!(this_present_discountsVal && that_present_discountsVal))
        return false;
      if (this.discountsVal != that.discountsVal)
        return false;
    }

    boolean this_present_paymentCard = true && this.isSetPaymentCard();
    boolean that_present_paymentCard = true && that.isSetPaymentCard();
    if (this_present_paymentCard || that_present_paymentCard) {
      if (!(this_present_paymentCard && that_present_paymentCard))
        return false;
      if (!this.paymentCard.equals(that.paymentCard))
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (!this.updateTime.equals(that.updateTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_paymentId = true;
    list.add(present_paymentId);
    if (present_paymentId)
      list.add(paymentId);

    boolean present_paymentStatus = true && (isSetPaymentStatus());
    list.add(present_paymentStatus);
    if (present_paymentStatus)
      list.add(paymentStatus);

    boolean present_paymentVal = true;
    list.add(present_paymentVal);
    if (present_paymentVal)
      list.add(paymentVal);

    boolean present_discountsVal = true && (isSetDiscountsVal());
    list.add(present_discountsVal);
    if (present_discountsVal)
      list.add(discountsVal);

    boolean present_paymentCard = true && (isSetPaymentCard());
    list.add(present_paymentCard);
    if (present_paymentCard)
      list.add(paymentCard);

    boolean present_userId = true;
    list.add(present_userId);
    if (present_userId)
      list.add(userId);

    boolean present_createTime = true && (isSetCreateTime());
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    boolean present_updateTime = true && (isSetUpdateTime());
    list.add(present_updateTime);
    if (present_updateTime)
      list.add(updateTime);

    return list.hashCode();
  }

  @Override
  public int compareTo(PaymentInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPaymentId()).compareTo(other.isSetPaymentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentId, other.paymentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentStatus()).compareTo(other.isSetPaymentStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentStatus, other.paymentStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentVal()).compareTo(other.isSetPaymentVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentVal, other.paymentVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDiscountsVal()).compareTo(other.isSetDiscountsVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiscountsVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.discountsVal, other.discountsVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentCard()).compareTo(other.isSetPaymentCard());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentCard()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentCard, other.paymentCard);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PaymentInfo(");
    boolean first = true;

    sb.append("paymentId:");
    sb.append(this.paymentId);
    first = false;
    if (isSetPaymentStatus()) {
      if (!first) sb.append(", ");
      sb.append("paymentStatus:");
      sb.append(this.paymentStatus);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("paymentVal:");
    sb.append(this.paymentVal);
    first = false;
    if (isSetDiscountsVal()) {
      if (!first) sb.append(", ");
      sb.append("discountsVal:");
      sb.append(this.discountsVal);
      first = false;
    }
    if (isSetPaymentCard()) {
      if (!first) sb.append(", ");
      sb.append("paymentCard:");
      if (this.paymentCard == null) {
        sb.append("null");
      } else {
        sb.append(this.paymentCard);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      if (this.createTime == null) {
        sb.append("null");
      } else {
        sb.append(this.createTime);
      }
      first = false;
    }
    if (isSetUpdateTime()) {
      if (!first) sb.append(", ");
      sb.append("updateTime:");
      if (this.updateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.updateTime);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'paymentId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'paymentVal' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'userId' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PaymentInfoStandardSchemeFactory implements SchemeFactory {
    public PaymentInfoStandardScheme getScheme() {
      return new PaymentInfoStandardScheme();
    }
  }

  private static class PaymentInfoStandardScheme extends StandardScheme<PaymentInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PaymentInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PAYMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.paymentId = iprot.readI64();
              struct.setPaymentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PAYMENT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.paymentStatus = iprot.readI32();
              struct.setPaymentStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PAYMENT_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.paymentVal = iprot.readDouble();
              struct.setPaymentValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DISCOUNTS_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.discountsVal = iprot.readDouble();
              struct.setDiscountsValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PAYMENT_CARD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentCard = iprot.readString();
              struct.setPaymentCardIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.userId = iprot.readI64();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateTime = iprot.readString();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetPaymentId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'paymentId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPaymentVal()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'paymentVal' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetUserId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PaymentInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PAYMENT_ID_FIELD_DESC);
      oprot.writeI64(struct.paymentId);
      oprot.writeFieldEnd();
      if (struct.isSetPaymentStatus()) {
        oprot.writeFieldBegin(PAYMENT_STATUS_FIELD_DESC);
        oprot.writeI32(struct.paymentStatus);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAYMENT_VAL_FIELD_DESC);
      oprot.writeDouble(struct.paymentVal);
      oprot.writeFieldEnd();
      if (struct.isSetDiscountsVal()) {
        oprot.writeFieldBegin(DISCOUNTS_VAL_FIELD_DESC);
        oprot.writeDouble(struct.discountsVal);
        oprot.writeFieldEnd();
      }
      if (struct.paymentCard != null) {
        if (struct.isSetPaymentCard()) {
          oprot.writeFieldBegin(PAYMENT_CARD_FIELD_DESC);
          oprot.writeString(struct.paymentCard);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI64(struct.userId);
      oprot.writeFieldEnd();
      if (struct.createTime != null) {
        if (struct.isSetCreateTime()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.createTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.updateTime != null) {
        if (struct.isSetUpdateTime()) {
          oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
          oprot.writeString(struct.updateTime);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PaymentInfoTupleSchemeFactory implements SchemeFactory {
    public PaymentInfoTupleScheme getScheme() {
      return new PaymentInfoTupleScheme();
    }
  }

  private static class PaymentInfoTupleScheme extends TupleScheme<PaymentInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PaymentInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.paymentId);
      oprot.writeDouble(struct.paymentVal);
      oprot.writeI64(struct.userId);
      BitSet optionals = new BitSet();
      if (struct.isSetPaymentStatus()) {
        optionals.set(0);
      }
      if (struct.isSetDiscountsVal()) {
        optionals.set(1);
      }
      if (struct.isSetPaymentCard()) {
        optionals.set(2);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(3);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetPaymentStatus()) {
        oprot.writeI32(struct.paymentStatus);
      }
      if (struct.isSetDiscountsVal()) {
        oprot.writeDouble(struct.discountsVal);
      }
      if (struct.isSetPaymentCard()) {
        oprot.writeString(struct.paymentCard);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeString(struct.updateTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PaymentInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.paymentId = iprot.readI64();
      struct.setPaymentIdIsSet(true);
      struct.paymentVal = iprot.readDouble();
      struct.setPaymentValIsSet(true);
      struct.userId = iprot.readI64();
      struct.setUserIdIsSet(true);
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.paymentStatus = iprot.readI32();
        struct.setPaymentStatusIsSet(true);
      }
      if (incoming.get(1)) {
        struct.discountsVal = iprot.readDouble();
        struct.setDiscountsValIsSet(true);
      }
      if (incoming.get(2)) {
        struct.paymentCard = iprot.readString();
        struct.setPaymentCardIsSet(true);
      }
      if (incoming.get(3)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.updateTime = iprot.readString();
        struct.setUpdateTimeIsSet(true);
      }
    }
  }

}

