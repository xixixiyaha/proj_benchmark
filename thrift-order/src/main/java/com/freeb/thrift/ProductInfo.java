/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.freeb.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2022-01-23")
public class ProductInfo implements org.apache.thrift.TBase<ProductInfo, ProductInfo._Fields>, java.io.Serializable, Cloneable, Comparable<ProductInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProductInfo");

  private static final org.apache.thrift.protocol.TField PROD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("prodId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField PROD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("prodName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PROD_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("prodPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField PROD_SALES_FIELD_DESC = new org.apache.thrift.protocol.TField("prodSales", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField PROD_REMAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("prodRemain", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField PROD_IMAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("prodImages", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField DISCOUNTS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("discountsId", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProductInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProductInfoTupleSchemeFactory());
  }

  public long prodId; // required
  public String prodName; // required
  public int categoryId; // optional
  public double prodPrice; // required
  public int prodSales; // optional
  public int prodRemain; // optional
  public List<String> prodImages; // optional
  public long discountsId; // optional
  public long merchantId; // required
  public String createTime; // optional
  public String updateTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROD_ID((short)1, "prodId"),
    PROD_NAME((short)2, "prodName"),
    CATEGORY_ID((short)3, "categoryId"),
    PROD_PRICE((short)4, "prodPrice"),
    PROD_SALES((short)5, "prodSales"),
    PROD_REMAIN((short)6, "prodRemain"),
    PROD_IMAGES((short)7, "prodImages"),
    DISCOUNTS_ID((short)8, "discountsId"),
    MERCHANT_ID((short)9, "merchantId"),
    CREATE_TIME((short)10, "createTime"),
    UPDATE_TIME((short)11, "updateTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROD_ID
          return PROD_ID;
        case 2: // PROD_NAME
          return PROD_NAME;
        case 3: // CATEGORY_ID
          return CATEGORY_ID;
        case 4: // PROD_PRICE
          return PROD_PRICE;
        case 5: // PROD_SALES
          return PROD_SALES;
        case 6: // PROD_REMAIN
          return PROD_REMAIN;
        case 7: // PROD_IMAGES
          return PROD_IMAGES;
        case 8: // DISCOUNTS_ID
          return DISCOUNTS_ID;
        case 9: // MERCHANT_ID
          return MERCHANT_ID;
        case 10: // CREATE_TIME
          return CREATE_TIME;
        case 11: // UPDATE_TIME
          return UPDATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PRODID_ISSET_ID = 0;
  private static final int __CATEGORYID_ISSET_ID = 1;
  private static final int __PRODPRICE_ISSET_ID = 2;
  private static final int __PRODSALES_ISSET_ID = 3;
  private static final int __PRODREMAIN_ISSET_ID = 4;
  private static final int __DISCOUNTSID_ISSET_ID = 5;
  private static final int __MERCHANTID_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CATEGORY_ID,_Fields.PROD_SALES,_Fields.PROD_REMAIN,_Fields.PROD_IMAGES,_Fields.DISCOUNTS_ID,_Fields.CREATE_TIME,_Fields.UPDATE_TIME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROD_ID, new org.apache.thrift.meta_data.FieldMetaData("prodId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PROD_NAME, new org.apache.thrift.meta_data.FieldMetaData("prodName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("categoryId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROD_PRICE, new org.apache.thrift.meta_data.FieldMetaData("prodPrice", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PROD_SALES, new org.apache.thrift.meta_data.FieldMetaData("prodSales", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROD_REMAIN, new org.apache.thrift.meta_data.FieldMetaData("prodRemain", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROD_IMAGES, new org.apache.thrift.meta_data.FieldMetaData("prodImages", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.DISCOUNTS_ID, new org.apache.thrift.meta_data.FieldMetaData("discountsId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProductInfo.class, metaDataMap);
  }

  public ProductInfo() {
  }

  public ProductInfo(
    long prodId,
    String prodName,
    double prodPrice,
    long merchantId)
  {
    this();
    this.prodId = prodId;
    setProdIdIsSet(true);
    this.prodName = prodName;
    this.prodPrice = prodPrice;
    setProdPriceIsSet(true);
    this.merchantId = merchantId;
    setMerchantIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProductInfo(ProductInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.prodId = other.prodId;
    if (other.isSetProdName()) {
      this.prodName = other.prodName;
    }
    this.categoryId = other.categoryId;
    this.prodPrice = other.prodPrice;
    this.prodSales = other.prodSales;
    this.prodRemain = other.prodRemain;
    if (other.isSetProdImages()) {
      List<String> __this__prodImages = new ArrayList<String>(other.prodImages);
      this.prodImages = __this__prodImages;
    }
    this.discountsId = other.discountsId;
    this.merchantId = other.merchantId;
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetUpdateTime()) {
      this.updateTime = other.updateTime;
    }
  }

  public ProductInfo deepCopy() {
    return new ProductInfo(this);
  }

  @Override
  public void clear() {
    setProdIdIsSet(false);
    this.prodId = 0;
    this.prodName = null;
    setCategoryIdIsSet(false);
    this.categoryId = 0;
    setProdPriceIsSet(false);
    this.prodPrice = 0.0;
    setProdSalesIsSet(false);
    this.prodSales = 0;
    setProdRemainIsSet(false);
    this.prodRemain = 0;
    this.prodImages = null;
    setDiscountsIdIsSet(false);
    this.discountsId = 0;
    setMerchantIdIsSet(false);
    this.merchantId = 0;
    this.createTime = null;
    this.updateTime = null;
  }

  public long getProdId() {
    return this.prodId;
  }

  public ProductInfo setProdId(long prodId) {
    this.prodId = prodId;
    setProdIdIsSet(true);
    return this;
  }

  public void unsetProdId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODID_ISSET_ID);
  }

  /** Returns true if field prodId is set (has been assigned a value) and false otherwise */
  public boolean isSetProdId() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODID_ISSET_ID);
  }

  public void setProdIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODID_ISSET_ID, value);
  }

  public String getProdName() {
    return this.prodName;
  }

  public ProductInfo setProdName(String prodName) {
    this.prodName = prodName;
    return this;
  }

  public void unsetProdName() {
    this.prodName = null;
  }

  /** Returns true if field prodName is set (has been assigned a value) and false otherwise */
  public boolean isSetProdName() {
    return this.prodName != null;
  }

  public void setProdNameIsSet(boolean value) {
    if (!value) {
      this.prodName = null;
    }
  }

  public int getCategoryId() {
    return this.categoryId;
  }

  public ProductInfo setCategoryId(int categoryId) {
    this.categoryId = categoryId;
    setCategoryIdIsSet(true);
    return this;
  }

  public void unsetCategoryId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
  }

  /** Returns true if field categoryId is set (has been assigned a value) and false otherwise */
  public boolean isSetCategoryId() {
    return EncodingUtils.testBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
  }

  public void setCategoryIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CATEGORYID_ISSET_ID, value);
  }

  public double getProdPrice() {
    return this.prodPrice;
  }

  public ProductInfo setProdPrice(double prodPrice) {
    this.prodPrice = prodPrice;
    setProdPriceIsSet(true);
    return this;
  }

  public void unsetProdPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODPRICE_ISSET_ID);
  }

  /** Returns true if field prodPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetProdPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODPRICE_ISSET_ID);
  }

  public void setProdPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODPRICE_ISSET_ID, value);
  }

  public int getProdSales() {
    return this.prodSales;
  }

  public ProductInfo setProdSales(int prodSales) {
    this.prodSales = prodSales;
    setProdSalesIsSet(true);
    return this;
  }

  public void unsetProdSales() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODSALES_ISSET_ID);
  }

  /** Returns true if field prodSales is set (has been assigned a value) and false otherwise */
  public boolean isSetProdSales() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODSALES_ISSET_ID);
  }

  public void setProdSalesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODSALES_ISSET_ID, value);
  }

  public int getProdRemain() {
    return this.prodRemain;
  }

  public ProductInfo setProdRemain(int prodRemain) {
    this.prodRemain = prodRemain;
    setProdRemainIsSet(true);
    return this;
  }

  public void unsetProdRemain() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODREMAIN_ISSET_ID);
  }

  /** Returns true if field prodRemain is set (has been assigned a value) and false otherwise */
  public boolean isSetProdRemain() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODREMAIN_ISSET_ID);
  }

  public void setProdRemainIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODREMAIN_ISSET_ID, value);
  }

  public int getProdImagesSize() {
    return (this.prodImages == null) ? 0 : this.prodImages.size();
  }

  public java.util.Iterator<String> getProdImagesIterator() {
    return (this.prodImages == null) ? null : this.prodImages.iterator();
  }

  public void addToProdImages(String elem) {
    if (this.prodImages == null) {
      this.prodImages = new ArrayList<String>();
    }
    this.prodImages.add(elem);
  }

  public List<String> getProdImages() {
    return this.prodImages;
  }

  public ProductInfo setProdImages(List<String> prodImages) {
    this.prodImages = prodImages;
    return this;
  }

  public void unsetProdImages() {
    this.prodImages = null;
  }

  /** Returns true if field prodImages is set (has been assigned a value) and false otherwise */
  public boolean isSetProdImages() {
    return this.prodImages != null;
  }

  public void setProdImagesIsSet(boolean value) {
    if (!value) {
      this.prodImages = null;
    }
  }

  public long getDiscountsId() {
    return this.discountsId;
  }

  public ProductInfo setDiscountsId(long discountsId) {
    this.discountsId = discountsId;
    setDiscountsIdIsSet(true);
    return this;
  }

  public void unsetDiscountsId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISCOUNTSID_ISSET_ID);
  }

  /** Returns true if field discountsId is set (has been assigned a value) and false otherwise */
  public boolean isSetDiscountsId() {
    return EncodingUtils.testBit(__isset_bitfield, __DISCOUNTSID_ISSET_ID);
  }

  public void setDiscountsIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISCOUNTSID_ISSET_ID, value);
  }

  public long getMerchantId() {
    return this.merchantId;
  }

  public ProductInfo setMerchantId(long merchantId) {
    this.merchantId = merchantId;
    setMerchantIdIsSet(true);
    return this;
  }

  public void unsetMerchantId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MERCHANTID_ISSET_ID);
  }

  /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantId() {
    return EncodingUtils.testBit(__isset_bitfield, __MERCHANTID_ISSET_ID);
  }

  public void setMerchantIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MERCHANTID_ISSET_ID, value);
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public ProductInfo setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getUpdateTime() {
    return this.updateTime;
  }

  public ProductInfo setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  public void unsetUpdateTime() {
    this.updateTime = null;
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return this.updateTime != null;
  }

  public void setUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.updateTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROD_ID:
      if (value == null) {
        unsetProdId();
      } else {
        setProdId((Long)value);
      }
      break;

    case PROD_NAME:
      if (value == null) {
        unsetProdName();
      } else {
        setProdName((String)value);
      }
      break;

    case CATEGORY_ID:
      if (value == null) {
        unsetCategoryId();
      } else {
        setCategoryId((Integer)value);
      }
      break;

    case PROD_PRICE:
      if (value == null) {
        unsetProdPrice();
      } else {
        setProdPrice((Double)value);
      }
      break;

    case PROD_SALES:
      if (value == null) {
        unsetProdSales();
      } else {
        setProdSales((Integer)value);
      }
      break;

    case PROD_REMAIN:
      if (value == null) {
        unsetProdRemain();
      } else {
        setProdRemain((Integer)value);
      }
      break;

    case PROD_IMAGES:
      if (value == null) {
        unsetProdImages();
      } else {
        setProdImages((List<String>)value);
      }
      break;

    case DISCOUNTS_ID:
      if (value == null) {
        unsetDiscountsId();
      } else {
        setDiscountsId((Long)value);
      }
      break;

    case MERCHANT_ID:
      if (value == null) {
        unsetMerchantId();
      } else {
        setMerchantId((Long)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROD_ID:
      return getProdId();

    case PROD_NAME:
      return getProdName();

    case CATEGORY_ID:
      return getCategoryId();

    case PROD_PRICE:
      return getProdPrice();

    case PROD_SALES:
      return getProdSales();

    case PROD_REMAIN:
      return getProdRemain();

    case PROD_IMAGES:
      return getProdImages();

    case DISCOUNTS_ID:
      return getDiscountsId();

    case MERCHANT_ID:
      return getMerchantId();

    case CREATE_TIME:
      return getCreateTime();

    case UPDATE_TIME:
      return getUpdateTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROD_ID:
      return isSetProdId();
    case PROD_NAME:
      return isSetProdName();
    case CATEGORY_ID:
      return isSetCategoryId();
    case PROD_PRICE:
      return isSetProdPrice();
    case PROD_SALES:
      return isSetProdSales();
    case PROD_REMAIN:
      return isSetProdRemain();
    case PROD_IMAGES:
      return isSetProdImages();
    case DISCOUNTS_ID:
      return isSetDiscountsId();
    case MERCHANT_ID:
      return isSetMerchantId();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProductInfo)
      return this.equals((ProductInfo)that);
    return false;
  }

  public boolean equals(ProductInfo that) {
    if (that == null)
      return false;

    boolean this_present_prodId = true;
    boolean that_present_prodId = true;
    if (this_present_prodId || that_present_prodId) {
      if (!(this_present_prodId && that_present_prodId))
        return false;
      if (this.prodId != that.prodId)
        return false;
    }

    boolean this_present_prodName = true && this.isSetProdName();
    boolean that_present_prodName = true && that.isSetProdName();
    if (this_present_prodName || that_present_prodName) {
      if (!(this_present_prodName && that_present_prodName))
        return false;
      if (!this.prodName.equals(that.prodName))
        return false;
    }

    boolean this_present_categoryId = true && this.isSetCategoryId();
    boolean that_present_categoryId = true && that.isSetCategoryId();
    if (this_present_categoryId || that_present_categoryId) {
      if (!(this_present_categoryId && that_present_categoryId))
        return false;
      if (this.categoryId != that.categoryId)
        return false;
    }

    boolean this_present_prodPrice = true;
    boolean that_present_prodPrice = true;
    if (this_present_prodPrice || that_present_prodPrice) {
      if (!(this_present_prodPrice && that_present_prodPrice))
        return false;
      if (this.prodPrice != that.prodPrice)
        return false;
    }

    boolean this_present_prodSales = true && this.isSetProdSales();
    boolean that_present_prodSales = true && that.isSetProdSales();
    if (this_present_prodSales || that_present_prodSales) {
      if (!(this_present_prodSales && that_present_prodSales))
        return false;
      if (this.prodSales != that.prodSales)
        return false;
    }

    boolean this_present_prodRemain = true && this.isSetProdRemain();
    boolean that_present_prodRemain = true && that.isSetProdRemain();
    if (this_present_prodRemain || that_present_prodRemain) {
      if (!(this_present_prodRemain && that_present_prodRemain))
        return false;
      if (this.prodRemain != that.prodRemain)
        return false;
    }

    boolean this_present_prodImages = true && this.isSetProdImages();
    boolean that_present_prodImages = true && that.isSetProdImages();
    if (this_present_prodImages || that_present_prodImages) {
      if (!(this_present_prodImages && that_present_prodImages))
        return false;
      if (!this.prodImages.equals(that.prodImages))
        return false;
    }

    boolean this_present_discountsId = true && this.isSetDiscountsId();
    boolean that_present_discountsId = true && that.isSetDiscountsId();
    if (this_present_discountsId || that_present_discountsId) {
      if (!(this_present_discountsId && that_present_discountsId))
        return false;
      if (this.discountsId != that.discountsId)
        return false;
    }

    boolean this_present_merchantId = true;
    boolean that_present_merchantId = true;
    if (this_present_merchantId || that_present_merchantId) {
      if (!(this_present_merchantId && that_present_merchantId))
        return false;
      if (this.merchantId != that.merchantId)
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (!this.updateTime.equals(that.updateTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_prodId = true;
    list.add(present_prodId);
    if (present_prodId)
      list.add(prodId);

    boolean present_prodName = true && (isSetProdName());
    list.add(present_prodName);
    if (present_prodName)
      list.add(prodName);

    boolean present_categoryId = true && (isSetCategoryId());
    list.add(present_categoryId);
    if (present_categoryId)
      list.add(categoryId);

    boolean present_prodPrice = true;
    list.add(present_prodPrice);
    if (present_prodPrice)
      list.add(prodPrice);

    boolean present_prodSales = true && (isSetProdSales());
    list.add(present_prodSales);
    if (present_prodSales)
      list.add(prodSales);

    boolean present_prodRemain = true && (isSetProdRemain());
    list.add(present_prodRemain);
    if (present_prodRemain)
      list.add(prodRemain);

    boolean present_prodImages = true && (isSetProdImages());
    list.add(present_prodImages);
    if (present_prodImages)
      list.add(prodImages);

    boolean present_discountsId = true && (isSetDiscountsId());
    list.add(present_discountsId);
    if (present_discountsId)
      list.add(discountsId);

    boolean present_merchantId = true;
    list.add(present_merchantId);
    if (present_merchantId)
      list.add(merchantId);

    boolean present_createTime = true && (isSetCreateTime());
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    boolean present_updateTime = true && (isSetUpdateTime());
    list.add(present_updateTime);
    if (present_updateTime)
      list.add(updateTime);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProductInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProdId()).compareTo(other.isSetProdId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProdId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prodId, other.prodId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProdName()).compareTo(other.isSetProdName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProdName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prodName, other.prodName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategoryId()).compareTo(other.isSetCategoryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategoryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryId, other.categoryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProdPrice()).compareTo(other.isSetProdPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProdPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prodPrice, other.prodPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProdSales()).compareTo(other.isSetProdSales());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProdSales()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prodSales, other.prodSales);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProdRemain()).compareTo(other.isSetProdRemain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProdRemain()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prodRemain, other.prodRemain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProdImages()).compareTo(other.isSetProdImages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProdImages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prodImages, other.prodImages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDiscountsId()).compareTo(other.isSetDiscountsId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiscountsId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.discountsId, other.discountsId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProductInfo(");
    boolean first = true;

    sb.append("prodId:");
    sb.append(this.prodId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("prodName:");
    if (this.prodName == null) {
      sb.append("null");
    } else {
      sb.append(this.prodName);
    }
    first = false;
    if (isSetCategoryId()) {
      if (!first) sb.append(", ");
      sb.append("categoryId:");
      sb.append(this.categoryId);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("prodPrice:");
    sb.append(this.prodPrice);
    first = false;
    if (isSetProdSales()) {
      if (!first) sb.append(", ");
      sb.append("prodSales:");
      sb.append(this.prodSales);
      first = false;
    }
    if (isSetProdRemain()) {
      if (!first) sb.append(", ");
      sb.append("prodRemain:");
      sb.append(this.prodRemain);
      first = false;
    }
    if (isSetProdImages()) {
      if (!first) sb.append(", ");
      sb.append("prodImages:");
      if (this.prodImages == null) {
        sb.append("null");
      } else {
        sb.append(this.prodImages);
      }
      first = false;
    }
    if (isSetDiscountsId()) {
      if (!first) sb.append(", ");
      sb.append("discountsId:");
      sb.append(this.discountsId);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("merchantId:");
    sb.append(this.merchantId);
    first = false;
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      if (this.createTime == null) {
        sb.append("null");
      } else {
        sb.append(this.createTime);
      }
      first = false;
    }
    if (isSetUpdateTime()) {
      if (!first) sb.append(", ");
      sb.append("updateTime:");
      if (this.updateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.updateTime);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // alas, we cannot check 'prodId' because it's a primitive and you chose the non-beans generator.
    if (prodName == null) {
      throw new TProtocolException("Required field 'prodName' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'prodPrice' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'merchantId' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProductInfoStandardSchemeFactory implements SchemeFactory {
    public ProductInfoStandardScheme getScheme() {
      return new ProductInfoStandardScheme();
    }
  }

  private static class ProductInfoStandardScheme extends StandardScheme<ProductInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProductInfo struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.prodId = iprot.readI64();
              struct.setProdIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROD_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.prodName = iprot.readString();
              struct.setProdNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CATEGORY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.categoryId = iprot.readI32();
              struct.setCategoryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROD_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.prodPrice = iprot.readDouble();
              struct.setProdPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PROD_SALES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.prodSales = iprot.readI32();
              struct.setProdSalesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PROD_REMAIN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.prodRemain = iprot.readI32();
              struct.setProdRemainIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PROD_IMAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.prodImages = new ArrayList<String>(_list8.size);
                String _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = iprot.readString();
                  struct.prodImages.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setProdImagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DISCOUNTS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.discountsId = iprot.readI64();
              struct.setDiscountsIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MERCHANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.merchantId = iprot.readI64();
              struct.setMerchantIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateTime = iprot.readString();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetProdId()) {
        throw new TProtocolException("Required field 'prodId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetProdPrice()) {
        throw new TProtocolException("Required field 'prodPrice' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMerchantId()) {
        throw new TProtocolException("Required field 'merchantId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProductInfo struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PROD_ID_FIELD_DESC);
      oprot.writeI64(struct.prodId);
      oprot.writeFieldEnd();
      if (struct.prodName != null) {
        oprot.writeFieldBegin(PROD_NAME_FIELD_DESC);
        oprot.writeString(struct.prodName);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCategoryId()) {
        oprot.writeFieldBegin(CATEGORY_ID_FIELD_DESC);
        oprot.writeI32(struct.categoryId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PROD_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.prodPrice);
      oprot.writeFieldEnd();
      if (struct.isSetProdSales()) {
        oprot.writeFieldBegin(PROD_SALES_FIELD_DESC);
        oprot.writeI32(struct.prodSales);
        oprot.writeFieldEnd();
      }
      if (struct.isSetProdRemain()) {
        oprot.writeFieldBegin(PROD_REMAIN_FIELD_DESC);
        oprot.writeI32(struct.prodRemain);
        oprot.writeFieldEnd();
      }
      if (struct.prodImages != null) {
        if (struct.isSetProdImages()) {
          oprot.writeFieldBegin(PROD_IMAGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.prodImages.size()));
            for (String _iter11 : struct.prodImages)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDiscountsId()) {
        oprot.writeFieldBegin(DISCOUNTS_ID_FIELD_DESC);
        oprot.writeI64(struct.discountsId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
      oprot.writeI64(struct.merchantId);
      oprot.writeFieldEnd();
      if (struct.createTime != null) {
        if (struct.isSetCreateTime()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.createTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.updateTime != null) {
        if (struct.isSetUpdateTime()) {
          oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
          oprot.writeString(struct.updateTime);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProductInfoTupleSchemeFactory implements SchemeFactory {
    public ProductInfoTupleScheme getScheme() {
      return new ProductInfoTupleScheme();
    }
  }

  private static class ProductInfoTupleScheme extends TupleScheme<ProductInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProductInfo struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.prodId);
      oprot.writeString(struct.prodName);
      oprot.writeDouble(struct.prodPrice);
      oprot.writeI64(struct.merchantId);
      BitSet optionals = new BitSet();
      if (struct.isSetCategoryId()) {
        optionals.set(0);
      }
      if (struct.isSetProdSales()) {
        optionals.set(1);
      }
      if (struct.isSetProdRemain()) {
        optionals.set(2);
      }
      if (struct.isSetProdImages()) {
        optionals.set(3);
      }
      if (struct.isSetDiscountsId()) {
        optionals.set(4);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(5);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetCategoryId()) {
        oprot.writeI32(struct.categoryId);
      }
      if (struct.isSetProdSales()) {
        oprot.writeI32(struct.prodSales);
      }
      if (struct.isSetProdRemain()) {
        oprot.writeI32(struct.prodRemain);
      }
      if (struct.isSetProdImages()) {
        {
          oprot.writeI32(struct.prodImages.size());
          for (String _iter12 : struct.prodImages)
          {
            oprot.writeString(_iter12);
          }
        }
      }
      if (struct.isSetDiscountsId()) {
        oprot.writeI64(struct.discountsId);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeString(struct.updateTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProductInfo struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.prodId = iprot.readI64();
      struct.setProdIdIsSet(true);
      struct.prodName = iprot.readString();
      struct.setProdNameIsSet(true);
      struct.prodPrice = iprot.readDouble();
      struct.setProdPriceIsSet(true);
      struct.merchantId = iprot.readI64();
      struct.setMerchantIdIsSet(true);
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.categoryId = iprot.readI32();
        struct.setCategoryIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.prodSales = iprot.readI32();
        struct.setProdSalesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.prodRemain = iprot.readI32();
        struct.setProdRemainIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.prodImages = new ArrayList<String>(_list13.size);
          String _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = iprot.readString();
            struct.prodImages.add(_elem14);
          }
        }
        struct.setProdImagesIsSet(true);
      }
      if (incoming.get(4)) {
        struct.discountsId = iprot.readI64();
        struct.setDiscountsIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.updateTime = iprot.readString();
        struct.setUpdateTimeIsSet(true);
      }
    }
  }

}

