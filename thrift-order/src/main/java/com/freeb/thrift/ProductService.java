/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.freeb.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2022-01-23")
public class ProductService {

  public interface Iface {

    public Map<Integer,Integer> GetUserActiveByCategory(long id) throws TException;

    public boolean CreateActiveBehavior(long uid, long pid, int cid) throws TException;

    public List<Long> GetLastestActiveUsers(int userNum) throws TException;

    public Set<Long> GetUserActiveByProduct(long uid) throws TException;

    public List<Long> GetProductByCategory(int cid, SearchOrder order, int prodNum) throws TException;

    public List<Long> GetProductBySimilarity(int cid, SearchOrder order, String words, int prodNum) throws TException;

    public ProductInfo IncProductSales(long pid, int perchaseNum) throws TException;

    public ProductInfo GetProdInfo(long pid) throws TException;

    public MerchantInfo GetMerchantInfoById(long mid) throws TException;

    public boolean BM4ComparePatternTrigger(List<Long> uidLst, List<Long> pidLst, List<Integer> cidLst, int compLoad) throws TException;

    public CommentInfo BM5CompareTransferDataSize(int dataSize) throws TException;

    public boolean BM6CompareMemBindWidth(int dataSize) throws TException;

    public List<CommentInfo> GetComments(long prodId, int comtNum) throws TException;

    public MerchantInfo GetMerchantInfoByProd(long pid) throws TException;

  }

  public interface AsyncIface {

    public void GetUserActiveByCategory(long id, AsyncMethodCallback resultHandler) throws TException;

    public void CreateActiveBehavior(long uid, long pid, int cid, AsyncMethodCallback resultHandler) throws TException;

    public void GetLastestActiveUsers(int userNum, AsyncMethodCallback resultHandler) throws TException;

    public void GetUserActiveByProduct(long uid, AsyncMethodCallback resultHandler) throws TException;

    public void GetProductByCategory(int cid, SearchOrder order, int prodNum, AsyncMethodCallback resultHandler) throws TException;

    public void GetProductBySimilarity(int cid, SearchOrder order, String words, int prodNum, AsyncMethodCallback resultHandler) throws TException;

    public void IncProductSales(long pid, int perchaseNum, AsyncMethodCallback resultHandler) throws TException;

    public void GetProdInfo(long pid, AsyncMethodCallback resultHandler) throws TException;

    public void GetMerchantInfoById(long mid, AsyncMethodCallback resultHandler) throws TException;

    public void BM4ComparePatternTrigger(List<Long> uidLst, List<Long> pidLst, List<Integer> cidLst, int compLoad, AsyncMethodCallback resultHandler) throws TException;

    public void BM5CompareTransferDataSize(int dataSize, AsyncMethodCallback resultHandler) throws TException;

    public void BM6CompareMemBindWidth(int dataSize, AsyncMethodCallback resultHandler) throws TException;

    public void GetComments(long prodId, int comtNum, AsyncMethodCallback resultHandler) throws TException;

    public void GetMerchantInfoByProd(long pid, AsyncMethodCallback resultHandler) throws TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Map<Integer,Integer> GetUserActiveByCategory(long id) throws TException
    {
      send_GetUserActiveByCategory(id);
      return recv_GetUserActiveByCategory();
    }

    public void send_GetUserActiveByCategory(long id) throws TException
    {
      GetUserActiveByCategory_args args = new GetUserActiveByCategory_args();
      args.setId(id);
      sendBase("GetUserActiveByCategory", args);
    }

    public Map<Integer,Integer> recv_GetUserActiveByCategory() throws TException
    {
      GetUserActiveByCategory_result result = new GetUserActiveByCategory_result();
      receiveBase(result, "GetUserActiveByCategory");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetUserActiveByCategory failed: unknown result");
    }

    public boolean CreateActiveBehavior(long uid, long pid, int cid) throws TException
    {
      send_CreateActiveBehavior(uid, pid, cid);
      return recv_CreateActiveBehavior();
    }

    public void send_CreateActiveBehavior(long uid, long pid, int cid) throws TException
    {
      CreateActiveBehavior_args args = new CreateActiveBehavior_args();
      args.setUid(uid);
      args.setPid(pid);
      args.setCid(cid);
      sendBase("CreateActiveBehavior", args);
    }

    public boolean recv_CreateActiveBehavior() throws TException
    {
      CreateActiveBehavior_result result = new CreateActiveBehavior_result();
      receiveBase(result, "CreateActiveBehavior");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "CreateActiveBehavior failed: unknown result");
    }

    public List<Long> GetLastestActiveUsers(int userNum) throws TException
    {
      send_GetLastestActiveUsers(userNum);
      return recv_GetLastestActiveUsers();
    }

    public void send_GetLastestActiveUsers(int userNum) throws TException
    {
      GetLastestActiveUsers_args args = new GetLastestActiveUsers_args();
      args.setUserNum(userNum);
      sendBase("GetLastestActiveUsers", args);
    }

    public List<Long> recv_GetLastestActiveUsers() throws TException
    {
      GetLastestActiveUsers_result result = new GetLastestActiveUsers_result();
      receiveBase(result, "GetLastestActiveUsers");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetLastestActiveUsers failed: unknown result");
    }

    public Set<Long> GetUserActiveByProduct(long uid) throws TException
    {
      send_GetUserActiveByProduct(uid);
      return recv_GetUserActiveByProduct();
    }

    public void send_GetUserActiveByProduct(long uid) throws TException
    {
      GetUserActiveByProduct_args args = new GetUserActiveByProduct_args();
      args.setUid(uid);
      sendBase("GetUserActiveByProduct", args);
    }

    public Set<Long> recv_GetUserActiveByProduct() throws TException
    {
      GetUserActiveByProduct_result result = new GetUserActiveByProduct_result();
      receiveBase(result, "GetUserActiveByProduct");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetUserActiveByProduct failed: unknown result");
    }

    public List<Long> GetProductByCategory(int cid, SearchOrder order, int prodNum) throws TException
    {
      send_GetProductByCategory(cid, order, prodNum);
      return recv_GetProductByCategory();
    }

    public void send_GetProductByCategory(int cid, SearchOrder order, int prodNum) throws TException
    {
      GetProductByCategory_args args = new GetProductByCategory_args();
      args.setCid(cid);
      args.setOrder(order);
      args.setProdNum(prodNum);
      sendBase("GetProductByCategory", args);
    }

    public List<Long> recv_GetProductByCategory() throws TException
    {
      GetProductByCategory_result result = new GetProductByCategory_result();
      receiveBase(result, "GetProductByCategory");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetProductByCategory failed: unknown result");
    }

    public List<Long> GetProductBySimilarity(int cid, SearchOrder order, String words, int prodNum) throws TException
    {
      send_GetProductBySimilarity(cid, order, words, prodNum);
      return recv_GetProductBySimilarity();
    }

    public void send_GetProductBySimilarity(int cid, SearchOrder order, String words, int prodNum) throws TException
    {
      GetProductBySimilarity_args args = new GetProductBySimilarity_args();
      args.setCid(cid);
      args.setOrder(order);
      args.setWords(words);
      args.setProdNum(prodNum);
      sendBase("GetProductBySimilarity", args);
    }

    public List<Long> recv_GetProductBySimilarity() throws TException
    {
      GetProductBySimilarity_result result = new GetProductBySimilarity_result();
      receiveBase(result, "GetProductBySimilarity");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetProductBySimilarity failed: unknown result");
    }

    public ProductInfo IncProductSales(long pid, int perchaseNum) throws TException
    {
      send_IncProductSales(pid, perchaseNum);
      return recv_IncProductSales();
    }

    public void send_IncProductSales(long pid, int perchaseNum) throws TException
    {
      IncProductSales_args args = new IncProductSales_args();
      args.setPid(pid);
      args.setPerchaseNum(perchaseNum);
      sendBase("IncProductSales", args);
    }

    public ProductInfo recv_IncProductSales() throws TException
    {
      IncProductSales_result result = new IncProductSales_result();
      receiveBase(result, "IncProductSales");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "IncProductSales failed: unknown result");
    }

    public ProductInfo GetProdInfo(long pid) throws TException
    {
      send_GetProdInfo(pid);
      return recv_GetProdInfo();
    }

    public void send_GetProdInfo(long pid) throws TException
    {
      GetProdInfo_args args = new GetProdInfo_args();
      args.setPid(pid);
      sendBase("GetProdInfo", args);
    }

    public ProductInfo recv_GetProdInfo() throws TException
    {
      GetProdInfo_result result = new GetProdInfo_result();
      receiveBase(result, "GetProdInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetProdInfo failed: unknown result");
    }

    public MerchantInfo GetMerchantInfoById(long mid) throws TException
    {
      send_GetMerchantInfoById(mid);
      return recv_GetMerchantInfoById();
    }

    public void send_GetMerchantInfoById(long mid) throws TException
    {
      GetMerchantInfoById_args args = new GetMerchantInfoById_args();
      args.setMid(mid);
      sendBase("GetMerchantInfoById", args);
    }

    public MerchantInfo recv_GetMerchantInfoById() throws TException
    {
      GetMerchantInfoById_result result = new GetMerchantInfoById_result();
      receiveBase(result, "GetMerchantInfoById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetMerchantInfoById failed: unknown result");
    }

    public boolean BM4ComparePatternTrigger(List<Long> uidLst, List<Long> pidLst, List<Integer> cidLst, int compLoad) throws TException
    {
      send_BM4ComparePatternTrigger(uidLst, pidLst, cidLst, compLoad);
      return recv_BM4ComparePatternTrigger();
    }

    public void send_BM4ComparePatternTrigger(List<Long> uidLst, List<Long> pidLst, List<Integer> cidLst, int compLoad) throws TException
    {
      BM4ComparePatternTrigger_args args = new BM4ComparePatternTrigger_args();
      args.setUidLst(uidLst);
      args.setPidLst(pidLst);
      args.setCidLst(cidLst);
      args.setCompLoad(compLoad);
      sendBase("BM4ComparePatternTrigger", args);
    }

    public boolean recv_BM4ComparePatternTrigger() throws TException
    {
      BM4ComparePatternTrigger_result result = new BM4ComparePatternTrigger_result();
      receiveBase(result, "BM4ComparePatternTrigger");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "BM4ComparePatternTrigger failed: unknown result");
    }

    public CommentInfo BM5CompareTransferDataSize(int dataSize) throws TException
    {
      send_BM5CompareTransferDataSize(dataSize);
      return recv_BM5CompareTransferDataSize();
    }

    public void send_BM5CompareTransferDataSize(int dataSize) throws TException
    {
      BM5CompareTransferDataSize_args args = new BM5CompareTransferDataSize_args();
      args.setDataSize(dataSize);
      sendBase("BM5CompareTransferDataSize", args);
    }

    public CommentInfo recv_BM5CompareTransferDataSize() throws TException
    {
      BM5CompareTransferDataSize_result result = new BM5CompareTransferDataSize_result();
      receiveBase(result, "BM5CompareTransferDataSize");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "BM5CompareTransferDataSize failed: unknown result");
    }

    public boolean BM6CompareMemBindWidth(int dataSize) throws TException
    {
      send_BM6CompareMemBindWidth(dataSize);
      return recv_BM6CompareMemBindWidth();
    }

    public void send_BM6CompareMemBindWidth(int dataSize) throws TException
    {
      BM6CompareMemBindWidth_args args = new BM6CompareMemBindWidth_args();
      args.setDataSize(dataSize);
      sendBase("BM6CompareMemBindWidth", args);
    }

    public boolean recv_BM6CompareMemBindWidth() throws TException
    {
      BM6CompareMemBindWidth_result result = new BM6CompareMemBindWidth_result();
      receiveBase(result, "BM6CompareMemBindWidth");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "BM6CompareMemBindWidth failed: unknown result");
    }

    public List<CommentInfo> GetComments(long prodId, int comtNum) throws TException
    {
      send_GetComments(prodId, comtNum);
      return recv_GetComments();
    }

    public void send_GetComments(long prodId, int comtNum) throws TException
    {
      GetComments_args args = new GetComments_args();
      args.setProdId(prodId);
      args.setComtNum(comtNum);
      sendBase("GetComments", args);
    }

    public List<CommentInfo> recv_GetComments() throws TException
    {
      GetComments_result result = new GetComments_result();
      receiveBase(result, "GetComments");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetComments failed: unknown result");
    }

    public MerchantInfo GetMerchantInfoByProd(long pid) throws TException
    {
      send_GetMerchantInfoByProd(pid);
      return recv_GetMerchantInfoByProd();
    }

    public void send_GetMerchantInfoByProd(long pid) throws TException
    {
      GetMerchantInfoByProd_args args = new GetMerchantInfoByProd_args();
      args.setPid(pid);
      sendBase("GetMerchantInfoByProd", args);
    }

    public MerchantInfo recv_GetMerchantInfoByProd() throws TException
    {
      GetMerchantInfoByProd_result result = new GetMerchantInfoByProd_result();
      receiveBase(result, "GetMerchantInfoByProd");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetMerchantInfoByProd failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void GetUserActiveByCategory(long id, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      GetUserActiveByCategory_call method_call = new GetUserActiveByCategory_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetUserActiveByCategory_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      public GetUserActiveByCategory_call(long id, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetUserActiveByCategory", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetUserActiveByCategory_args args = new GetUserActiveByCategory_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<Integer,Integer> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetUserActiveByCategory();
      }
    }

    public void CreateActiveBehavior(long uid, long pid, int cid, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      CreateActiveBehavior_call method_call = new CreateActiveBehavior_call(uid, pid, cid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CreateActiveBehavior_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      private long pid;
      private int cid;
      public CreateActiveBehavior_call(long uid, long pid, int cid, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.pid = pid;
        this.cid = cid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CreateActiveBehavior", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CreateActiveBehavior_args args = new CreateActiveBehavior_args();
        args.setUid(uid);
        args.setPid(pid);
        args.setCid(cid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_CreateActiveBehavior();
      }
    }

    public void GetLastestActiveUsers(int userNum, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      GetLastestActiveUsers_call method_call = new GetLastestActiveUsers_call(userNum, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetLastestActiveUsers_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userNum;
      public GetLastestActiveUsers_call(int userNum, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userNum = userNum;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetLastestActiveUsers", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetLastestActiveUsers_args args = new GetLastestActiveUsers_args();
        args.setUserNum(userNum);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetLastestActiveUsers();
      }
    }

    public void GetUserActiveByProduct(long uid, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      GetUserActiveByProduct_call method_call = new GetUserActiveByProduct_call(uid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetUserActiveByProduct_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long uid;
      public GetUserActiveByProduct_call(long uid, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetUserActiveByProduct", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetUserActiveByProduct_args args = new GetUserActiveByProduct_args();
        args.setUid(uid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Set<Long> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetUserActiveByProduct();
      }
    }

    public void GetProductByCategory(int cid, SearchOrder order, int prodNum, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      GetProductByCategory_call method_call = new GetProductByCategory_call(cid, order, prodNum, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetProductByCategory_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cid;
      private SearchOrder order;
      private int prodNum;
      public GetProductByCategory_call(int cid, SearchOrder order, int prodNum, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cid = cid;
        this.order = order;
        this.prodNum = prodNum;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetProductByCategory", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetProductByCategory_args args = new GetProductByCategory_args();
        args.setCid(cid);
        args.setOrder(order);
        args.setProdNum(prodNum);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetProductByCategory();
      }
    }

    public void GetProductBySimilarity(int cid, SearchOrder order, String words, int prodNum, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      GetProductBySimilarity_call method_call = new GetProductBySimilarity_call(cid, order, words, prodNum, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetProductBySimilarity_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cid;
      private SearchOrder order;
      private String words;
      private int prodNum;
      public GetProductBySimilarity_call(int cid, SearchOrder order, String words, int prodNum, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cid = cid;
        this.order = order;
        this.words = words;
        this.prodNum = prodNum;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetProductBySimilarity", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetProductBySimilarity_args args = new GetProductBySimilarity_args();
        args.setCid(cid);
        args.setOrder(order);
        args.setWords(words);
        args.setProdNum(prodNum);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetProductBySimilarity();
      }
    }

    public void IncProductSales(long pid, int perchaseNum, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      IncProductSales_call method_call = new IncProductSales_call(pid, perchaseNum, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class IncProductSales_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long pid;
      private int perchaseNum;
      public IncProductSales_call(long pid, int perchaseNum, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pid = pid;
        this.perchaseNum = perchaseNum;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("IncProductSales", org.apache.thrift.protocol.TMessageType.CALL, 0));
        IncProductSales_args args = new IncProductSales_args();
        args.setPid(pid);
        args.setPerchaseNum(perchaseNum);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ProductInfo getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_IncProductSales();
      }
    }

    public void GetProdInfo(long pid, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      GetProdInfo_call method_call = new GetProdInfo_call(pid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetProdInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long pid;
      public GetProdInfo_call(long pid, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pid = pid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetProdInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetProdInfo_args args = new GetProdInfo_args();
        args.setPid(pid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ProductInfo getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetProdInfo();
      }
    }

    public void GetMerchantInfoById(long mid, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      GetMerchantInfoById_call method_call = new GetMerchantInfoById_call(mid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetMerchantInfoById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long mid;
      public GetMerchantInfoById_call(long mid, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mid = mid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetMerchantInfoById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetMerchantInfoById_args args = new GetMerchantInfoById_args();
        args.setMid(mid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MerchantInfo getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetMerchantInfoById();
      }
    }

    public void BM4ComparePatternTrigger(List<Long> uidLst, List<Long> pidLst, List<Integer> cidLst, int compLoad, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      BM4ComparePatternTrigger_call method_call = new BM4ComparePatternTrigger_call(uidLst, pidLst, cidLst, compLoad, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class BM4ComparePatternTrigger_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Long> uidLst;
      private List<Long> pidLst;
      private List<Integer> cidLst;
      private int compLoad;
      public BM4ComparePatternTrigger_call(List<Long> uidLst, List<Long> pidLst, List<Integer> cidLst, int compLoad, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uidLst = uidLst;
        this.pidLst = pidLst;
        this.cidLst = cidLst;
        this.compLoad = compLoad;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("BM4ComparePatternTrigger", org.apache.thrift.protocol.TMessageType.CALL, 0));
        BM4ComparePatternTrigger_args args = new BM4ComparePatternTrigger_args();
        args.setUidLst(uidLst);
        args.setPidLst(pidLst);
        args.setCidLst(cidLst);
        args.setCompLoad(compLoad);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_BM4ComparePatternTrigger();
      }
    }

    public void BM5CompareTransferDataSize(int dataSize, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      BM5CompareTransferDataSize_call method_call = new BM5CompareTransferDataSize_call(dataSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class BM5CompareTransferDataSize_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int dataSize;
      public BM5CompareTransferDataSize_call(int dataSize, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dataSize = dataSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("BM5CompareTransferDataSize", org.apache.thrift.protocol.TMessageType.CALL, 0));
        BM5CompareTransferDataSize_args args = new BM5CompareTransferDataSize_args();
        args.setDataSize(dataSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CommentInfo getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_BM5CompareTransferDataSize();
      }
    }

    public void BM6CompareMemBindWidth(int dataSize, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      BM6CompareMemBindWidth_call method_call = new BM6CompareMemBindWidth_call(dataSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class BM6CompareMemBindWidth_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int dataSize;
      public BM6CompareMemBindWidth_call(int dataSize, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dataSize = dataSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("BM6CompareMemBindWidth", org.apache.thrift.protocol.TMessageType.CALL, 0));
        BM6CompareMemBindWidth_args args = new BM6CompareMemBindWidth_args();
        args.setDataSize(dataSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_BM6CompareMemBindWidth();
      }
    }

    public void GetComments(long prodId, int comtNum, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      GetComments_call method_call = new GetComments_call(prodId, comtNum, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetComments_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long prodId;
      private int comtNum;
      public GetComments_call(long prodId, int comtNum, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.prodId = prodId;
        this.comtNum = comtNum;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetComments", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetComments_args args = new GetComments_args();
        args.setProdId(prodId);
        args.setComtNum(comtNum);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<CommentInfo> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetComments();
      }
    }

    public void GetMerchantInfoByProd(long pid, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      GetMerchantInfoByProd_call method_call = new GetMerchantInfoByProd_call(pid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetMerchantInfoByProd_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long pid;
      public GetMerchantInfoByProd_call(long pid, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pid = pid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetMerchantInfoByProd", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetMerchantInfoByProd_args args = new GetMerchantInfoByProd_args();
        args.setPid(pid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MerchantInfo getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetMerchantInfoByProd();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("GetUserActiveByCategory", new GetUserActiveByCategory());
      processMap.put("CreateActiveBehavior", new CreateActiveBehavior());
      processMap.put("GetLastestActiveUsers", new GetLastestActiveUsers());
      processMap.put("GetUserActiveByProduct", new GetUserActiveByProduct());
      processMap.put("GetProductByCategory", new GetProductByCategory());
      processMap.put("GetProductBySimilarity", new GetProductBySimilarity());
      processMap.put("IncProductSales", new IncProductSales());
      processMap.put("GetProdInfo", new GetProdInfo());
      processMap.put("GetMerchantInfoById", new GetMerchantInfoById());
      processMap.put("BM4ComparePatternTrigger", new BM4ComparePatternTrigger());
      processMap.put("BM5CompareTransferDataSize", new BM5CompareTransferDataSize());
      processMap.put("BM6CompareMemBindWidth", new BM6CompareMemBindWidth());
      processMap.put("GetComments", new GetComments());
      processMap.put("GetMerchantInfoByProd", new GetMerchantInfoByProd());
      return processMap;
    }

    public static class GetUserActiveByCategory<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetUserActiveByCategory_args> {
      public GetUserActiveByCategory() {
        super("GetUserActiveByCategory");
      }

      public GetUserActiveByCategory_args getEmptyArgsInstance() {
        return new GetUserActiveByCategory_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetUserActiveByCategory_result getResult(I iface, GetUserActiveByCategory_args args) throws TException {
        GetUserActiveByCategory_result result = new GetUserActiveByCategory_result();
        result.success = iface.GetUserActiveByCategory(args.id);
        return result;
      }
    }

    public static class CreateActiveBehavior<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CreateActiveBehavior_args> {
      public CreateActiveBehavior() {
        super("CreateActiveBehavior");
      }

      public CreateActiveBehavior_args getEmptyArgsInstance() {
        return new CreateActiveBehavior_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public CreateActiveBehavior_result getResult(I iface, CreateActiveBehavior_args args) throws TException {
        CreateActiveBehavior_result result = new CreateActiveBehavior_result();
        result.success = iface.CreateActiveBehavior(args.uid, args.pid, args.cid);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class GetLastestActiveUsers<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetLastestActiveUsers_args> {
      public GetLastestActiveUsers() {
        super("GetLastestActiveUsers");
      }

      public GetLastestActiveUsers_args getEmptyArgsInstance() {
        return new GetLastestActiveUsers_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetLastestActiveUsers_result getResult(I iface, GetLastestActiveUsers_args args) throws TException {
        GetLastestActiveUsers_result result = new GetLastestActiveUsers_result();
        result.success = iface.GetLastestActiveUsers(args.userNum);
        return result;
      }
    }

    public static class GetUserActiveByProduct<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetUserActiveByProduct_args> {
      public GetUserActiveByProduct() {
        super("GetUserActiveByProduct");
      }

      public GetUserActiveByProduct_args getEmptyArgsInstance() {
        return new GetUserActiveByProduct_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetUserActiveByProduct_result getResult(I iface, GetUserActiveByProduct_args args) throws TException {
        GetUserActiveByProduct_result result = new GetUserActiveByProduct_result();
        result.success = iface.GetUserActiveByProduct(args.uid);
        return result;
      }
    }

    public static class GetProductByCategory<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetProductByCategory_args> {
      public GetProductByCategory() {
        super("GetProductByCategory");
      }

      public GetProductByCategory_args getEmptyArgsInstance() {
        return new GetProductByCategory_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetProductByCategory_result getResult(I iface, GetProductByCategory_args args) throws TException {
        GetProductByCategory_result result = new GetProductByCategory_result();
        result.success = iface.GetProductByCategory(args.cid, args.order, args.prodNum);
        return result;
      }
    }

    public static class GetProductBySimilarity<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetProductBySimilarity_args> {
      public GetProductBySimilarity() {
        super("GetProductBySimilarity");
      }

      public GetProductBySimilarity_args getEmptyArgsInstance() {
        return new GetProductBySimilarity_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetProductBySimilarity_result getResult(I iface, GetProductBySimilarity_args args) throws TException {
        GetProductBySimilarity_result result = new GetProductBySimilarity_result();
        result.success = iface.GetProductBySimilarity(args.cid, args.order, args.words, args.prodNum);
        return result;
      }
    }

    public static class IncProductSales<I extends Iface> extends org.apache.thrift.ProcessFunction<I, IncProductSales_args> {
      public IncProductSales() {
        super("IncProductSales");
      }

      public IncProductSales_args getEmptyArgsInstance() {
        return new IncProductSales_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public IncProductSales_result getResult(I iface, IncProductSales_args args) throws TException {
        IncProductSales_result result = new IncProductSales_result();
        result.success = iface.IncProductSales(args.pid, args.perchaseNum);
        return result;
      }
    }

    public static class GetProdInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetProdInfo_args> {
      public GetProdInfo() {
        super("GetProdInfo");
      }

      public GetProdInfo_args getEmptyArgsInstance() {
        return new GetProdInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetProdInfo_result getResult(I iface, GetProdInfo_args args) throws TException {
        GetProdInfo_result result = new GetProdInfo_result();
        result.success = iface.GetProdInfo(args.pid);
        return result;
      }
    }

    public static class GetMerchantInfoById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetMerchantInfoById_args> {
      public GetMerchantInfoById() {
        super("GetMerchantInfoById");
      }

      public GetMerchantInfoById_args getEmptyArgsInstance() {
        return new GetMerchantInfoById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetMerchantInfoById_result getResult(I iface, GetMerchantInfoById_args args) throws TException {
        GetMerchantInfoById_result result = new GetMerchantInfoById_result();
        result.success = iface.GetMerchantInfoById(args.mid);
        return result;
      }
    }

    public static class BM4ComparePatternTrigger<I extends Iface> extends org.apache.thrift.ProcessFunction<I, BM4ComparePatternTrigger_args> {
      public BM4ComparePatternTrigger() {
        super("BM4ComparePatternTrigger");
      }

      public BM4ComparePatternTrigger_args getEmptyArgsInstance() {
        return new BM4ComparePatternTrigger_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public BM4ComparePatternTrigger_result getResult(I iface, BM4ComparePatternTrigger_args args) throws TException {
        BM4ComparePatternTrigger_result result = new BM4ComparePatternTrigger_result();
        result.success = iface.BM4ComparePatternTrigger(args.uidLst, args.pidLst, args.cidLst, args.compLoad);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class BM5CompareTransferDataSize<I extends Iface> extends org.apache.thrift.ProcessFunction<I, BM5CompareTransferDataSize_args> {
      public BM5CompareTransferDataSize() {
        super("BM5CompareTransferDataSize");
      }

      public BM5CompareTransferDataSize_args getEmptyArgsInstance() {
        return new BM5CompareTransferDataSize_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public BM5CompareTransferDataSize_result getResult(I iface, BM5CompareTransferDataSize_args args) throws TException {
        BM5CompareTransferDataSize_result result = new BM5CompareTransferDataSize_result();
        result.success = iface.BM5CompareTransferDataSize(args.dataSize);
        return result;
      }
    }

    public static class BM6CompareMemBindWidth<I extends Iface> extends org.apache.thrift.ProcessFunction<I, BM6CompareMemBindWidth_args> {
      public BM6CompareMemBindWidth() {
        super("BM6CompareMemBindWidth");
      }

      public BM6CompareMemBindWidth_args getEmptyArgsInstance() {
        return new BM6CompareMemBindWidth_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public BM6CompareMemBindWidth_result getResult(I iface, BM6CompareMemBindWidth_args args) throws TException {
        BM6CompareMemBindWidth_result result = new BM6CompareMemBindWidth_result();
        result.success = iface.BM6CompareMemBindWidth(args.dataSize);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class GetComments<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetComments_args> {
      public GetComments() {
        super("GetComments");
      }

      public GetComments_args getEmptyArgsInstance() {
        return new GetComments_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetComments_result getResult(I iface, GetComments_args args) throws TException {
        GetComments_result result = new GetComments_result();
        result.success = iface.GetComments(args.prodId, args.comtNum);
        return result;
      }
    }

    public static class GetMerchantInfoByProd<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetMerchantInfoByProd_args> {
      public GetMerchantInfoByProd() {
        super("GetMerchantInfoByProd");
      }

      public GetMerchantInfoByProd_args getEmptyArgsInstance() {
        return new GetMerchantInfoByProd_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetMerchantInfoByProd_result getResult(I iface, GetMerchantInfoByProd_args args) throws TException {
        GetMerchantInfoByProd_result result = new GetMerchantInfoByProd_result();
        result.success = iface.GetMerchantInfoByProd(args.pid);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("GetUserActiveByCategory", new GetUserActiveByCategory());
      processMap.put("CreateActiveBehavior", new CreateActiveBehavior());
      processMap.put("GetLastestActiveUsers", new GetLastestActiveUsers());
      processMap.put("GetUserActiveByProduct", new GetUserActiveByProduct());
      processMap.put("GetProductByCategory", new GetProductByCategory());
      processMap.put("GetProductBySimilarity", new GetProductBySimilarity());
      processMap.put("IncProductSales", new IncProductSales());
      processMap.put("GetProdInfo", new GetProdInfo());
      processMap.put("GetMerchantInfoById", new GetMerchantInfoById());
      processMap.put("BM4ComparePatternTrigger", new BM4ComparePatternTrigger());
      processMap.put("BM5CompareTransferDataSize", new BM5CompareTransferDataSize());
      processMap.put("BM6CompareMemBindWidth", new BM6CompareMemBindWidth());
      processMap.put("GetComments", new GetComments());
      processMap.put("GetMerchantInfoByProd", new GetMerchantInfoByProd());
      return processMap;
    }

    public static class GetUserActiveByCategory<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetUserActiveByCategory_args, Map<Integer,Integer>> {
      public GetUserActiveByCategory() {
        super("GetUserActiveByCategory");
      }

      public GetUserActiveByCategory_args getEmptyArgsInstance() {
        return new GetUserActiveByCategory_args();
      }

      public AsyncMethodCallback<Map<Integer,Integer>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<Integer,Integer>>() { 
          public void onComplete(Map<Integer,Integer> o) {
            GetUserActiveByCategory_result result = new GetUserActiveByCategory_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetUserActiveByCategory_result result = new GetUserActiveByCategory_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetUserActiveByCategory_args args, AsyncMethodCallback<Map<Integer,Integer>> resultHandler) throws TException {
        iface.GetUserActiveByCategory(args.id,resultHandler);
      }
    }

    public static class CreateActiveBehavior<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CreateActiveBehavior_args, Boolean> {
      public CreateActiveBehavior() {
        super("CreateActiveBehavior");
      }

      public CreateActiveBehavior_args getEmptyArgsInstance() {
        return new CreateActiveBehavior_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            CreateActiveBehavior_result result = new CreateActiveBehavior_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            CreateActiveBehavior_result result = new CreateActiveBehavior_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, CreateActiveBehavior_args args, AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.CreateActiveBehavior(args.uid, args.pid, args.cid,resultHandler);
      }
    }

    public static class GetLastestActiveUsers<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetLastestActiveUsers_args, List<Long>> {
      public GetLastestActiveUsers() {
        super("GetLastestActiveUsers");
      }

      public GetLastestActiveUsers_args getEmptyArgsInstance() {
        return new GetLastestActiveUsers_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            GetLastestActiveUsers_result result = new GetLastestActiveUsers_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetLastestActiveUsers_result result = new GetLastestActiveUsers_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetLastestActiveUsers_args args, AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.GetLastestActiveUsers(args.userNum,resultHandler);
      }
    }

    public static class GetUserActiveByProduct<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetUserActiveByProduct_args, Set<Long>> {
      public GetUserActiveByProduct() {
        super("GetUserActiveByProduct");
      }

      public GetUserActiveByProduct_args getEmptyArgsInstance() {
        return new GetUserActiveByProduct_args();
      }

      public AsyncMethodCallback<Set<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Set<Long>>() { 
          public void onComplete(Set<Long> o) {
            GetUserActiveByProduct_result result = new GetUserActiveByProduct_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetUserActiveByProduct_result result = new GetUserActiveByProduct_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetUserActiveByProduct_args args, AsyncMethodCallback<Set<Long>> resultHandler) throws TException {
        iface.GetUserActiveByProduct(args.uid,resultHandler);
      }
    }

    public static class GetProductByCategory<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetProductByCategory_args, List<Long>> {
      public GetProductByCategory() {
        super("GetProductByCategory");
      }

      public GetProductByCategory_args getEmptyArgsInstance() {
        return new GetProductByCategory_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            GetProductByCategory_result result = new GetProductByCategory_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetProductByCategory_result result = new GetProductByCategory_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetProductByCategory_args args, AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.GetProductByCategory(args.cid, args.order, args.prodNum,resultHandler);
      }
    }

    public static class GetProductBySimilarity<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetProductBySimilarity_args, List<Long>> {
      public GetProductBySimilarity() {
        super("GetProductBySimilarity");
      }

      public GetProductBySimilarity_args getEmptyArgsInstance() {
        return new GetProductBySimilarity_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            GetProductBySimilarity_result result = new GetProductBySimilarity_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetProductBySimilarity_result result = new GetProductBySimilarity_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetProductBySimilarity_args args, AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.GetProductBySimilarity(args.cid, args.order, args.words, args.prodNum,resultHandler);
      }
    }

    public static class IncProductSales<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, IncProductSales_args, ProductInfo> {
      public IncProductSales() {
        super("IncProductSales");
      }

      public IncProductSales_args getEmptyArgsInstance() {
        return new IncProductSales_args();
      }

      public AsyncMethodCallback<ProductInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ProductInfo>() { 
          public void onComplete(ProductInfo o) {
            IncProductSales_result result = new IncProductSales_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            IncProductSales_result result = new IncProductSales_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, IncProductSales_args args, AsyncMethodCallback<ProductInfo> resultHandler) throws TException {
        iface.IncProductSales(args.pid, args.perchaseNum,resultHandler);
      }
    }

    public static class GetProdInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetProdInfo_args, ProductInfo> {
      public GetProdInfo() {
        super("GetProdInfo");
      }

      public GetProdInfo_args getEmptyArgsInstance() {
        return new GetProdInfo_args();
      }

      public AsyncMethodCallback<ProductInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ProductInfo>() { 
          public void onComplete(ProductInfo o) {
            GetProdInfo_result result = new GetProdInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetProdInfo_result result = new GetProdInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetProdInfo_args args, AsyncMethodCallback<ProductInfo> resultHandler) throws TException {
        iface.GetProdInfo(args.pid,resultHandler);
      }
    }

    public static class GetMerchantInfoById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetMerchantInfoById_args, MerchantInfo> {
      public GetMerchantInfoById() {
        super("GetMerchantInfoById");
      }

      public GetMerchantInfoById_args getEmptyArgsInstance() {
        return new GetMerchantInfoById_args();
      }

      public AsyncMethodCallback<MerchantInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MerchantInfo>() { 
          public void onComplete(MerchantInfo o) {
            GetMerchantInfoById_result result = new GetMerchantInfoById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetMerchantInfoById_result result = new GetMerchantInfoById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetMerchantInfoById_args args, AsyncMethodCallback<MerchantInfo> resultHandler) throws TException {
        iface.GetMerchantInfoById(args.mid,resultHandler);
      }
    }

    public static class BM4ComparePatternTrigger<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, BM4ComparePatternTrigger_args, Boolean> {
      public BM4ComparePatternTrigger() {
        super("BM4ComparePatternTrigger");
      }

      public BM4ComparePatternTrigger_args getEmptyArgsInstance() {
        return new BM4ComparePatternTrigger_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            BM4ComparePatternTrigger_result result = new BM4ComparePatternTrigger_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            BM4ComparePatternTrigger_result result = new BM4ComparePatternTrigger_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, BM4ComparePatternTrigger_args args, AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.BM4ComparePatternTrigger(args.uidLst, args.pidLst, args.cidLst, args.compLoad,resultHandler);
      }
    }

    public static class BM5CompareTransferDataSize<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, BM5CompareTransferDataSize_args, CommentInfo> {
      public BM5CompareTransferDataSize() {
        super("BM5CompareTransferDataSize");
      }

      public BM5CompareTransferDataSize_args getEmptyArgsInstance() {
        return new BM5CompareTransferDataSize_args();
      }

      public AsyncMethodCallback<CommentInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<CommentInfo>() { 
          public void onComplete(CommentInfo o) {
            BM5CompareTransferDataSize_result result = new BM5CompareTransferDataSize_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            BM5CompareTransferDataSize_result result = new BM5CompareTransferDataSize_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, BM5CompareTransferDataSize_args args, AsyncMethodCallback<CommentInfo> resultHandler) throws TException {
        iface.BM5CompareTransferDataSize(args.dataSize,resultHandler);
      }
    }

    public static class BM6CompareMemBindWidth<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, BM6CompareMemBindWidth_args, Boolean> {
      public BM6CompareMemBindWidth() {
        super("BM6CompareMemBindWidth");
      }

      public BM6CompareMemBindWidth_args getEmptyArgsInstance() {
        return new BM6CompareMemBindWidth_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            BM6CompareMemBindWidth_result result = new BM6CompareMemBindWidth_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            BM6CompareMemBindWidth_result result = new BM6CompareMemBindWidth_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, BM6CompareMemBindWidth_args args, AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.BM6CompareMemBindWidth(args.dataSize,resultHandler);
      }
    }

    public static class GetComments<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetComments_args, List<CommentInfo>> {
      public GetComments() {
        super("GetComments");
      }

      public GetComments_args getEmptyArgsInstance() {
        return new GetComments_args();
      }

      public AsyncMethodCallback<List<CommentInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<CommentInfo>>() { 
          public void onComplete(List<CommentInfo> o) {
            GetComments_result result = new GetComments_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetComments_result result = new GetComments_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetComments_args args, AsyncMethodCallback<List<CommentInfo>> resultHandler) throws TException {
        iface.GetComments(args.prodId, args.comtNum,resultHandler);
      }
    }

    public static class GetMerchantInfoByProd<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetMerchantInfoByProd_args, MerchantInfo> {
      public GetMerchantInfoByProd() {
        super("GetMerchantInfoByProd");
      }

      public GetMerchantInfoByProd_args getEmptyArgsInstance() {
        return new GetMerchantInfoByProd_args();
      }

      public AsyncMethodCallback<MerchantInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MerchantInfo>() { 
          public void onComplete(MerchantInfo o) {
            GetMerchantInfoByProd_result result = new GetMerchantInfoByProd_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetMerchantInfoByProd_result result = new GetMerchantInfoByProd_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetMerchantInfoByProd_args args, AsyncMethodCallback<MerchantInfo> resultHandler) throws TException {
        iface.GetMerchantInfoByProd(args.pid,resultHandler);
      }
    }

  }

  public static class GetUserActiveByCategory_args implements org.apache.thrift.TBase<GetUserActiveByCategory_args, GetUserActiveByCategory_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetUserActiveByCategory_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetUserActiveByCategory_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetUserActiveByCategory_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetUserActiveByCategory_argsTupleSchemeFactory());
    }

    public long id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetUserActiveByCategory_args.class, metaDataMap);
    }

    public GetUserActiveByCategory_args() {
    }

    public GetUserActiveByCategory_args(
      long id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetUserActiveByCategory_args(GetUserActiveByCategory_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public GetUserActiveByCategory_args deepCopy() {
      return new GetUserActiveByCategory_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public long getId() {
      return this.id;
    }

    public GetUserActiveByCategory_args setId(long id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetUserActiveByCategory_args)
        return this.equals((GetUserActiveByCategory_args)that);
      return false;
    }

    public boolean equals(GetUserActiveByCategory_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetUserActiveByCategory_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetUserActiveByCategory_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetUserActiveByCategory_argsStandardSchemeFactory implements SchemeFactory {
      public GetUserActiveByCategory_argsStandardScheme getScheme() {
        return new GetUserActiveByCategory_argsStandardScheme();
      }
    }

    private static class GetUserActiveByCategory_argsStandardScheme extends StandardScheme<GetUserActiveByCategory_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetUserActiveByCategory_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetUserActiveByCategory_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetUserActiveByCategory_argsTupleSchemeFactory implements SchemeFactory {
      public GetUserActiveByCategory_argsTupleScheme getScheme() {
        return new GetUserActiveByCategory_argsTupleScheme();
      }
    }

    private static class GetUserActiveByCategory_argsTupleScheme extends TupleScheme<GetUserActiveByCategory_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetUserActiveByCategory_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetUserActiveByCategory_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class GetUserActiveByCategory_result implements org.apache.thrift.TBase<GetUserActiveByCategory_result, GetUserActiveByCategory_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetUserActiveByCategory_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetUserActiveByCategory_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetUserActiveByCategory_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetUserActiveByCategory_resultTupleSchemeFactory());
    }

    public Map<Integer,Integer> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetUserActiveByCategory_result.class, metaDataMap);
    }

    public GetUserActiveByCategory_result() {
    }

    public GetUserActiveByCategory_result(
      Map<Integer,Integer> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetUserActiveByCategory_result(GetUserActiveByCategory_result other) {
      if (other.isSetSuccess()) {
        Map<Integer,Integer> __this__success = new HashMap<Integer,Integer>(other.success);
        this.success = __this__success;
      }
    }

    public GetUserActiveByCategory_result deepCopy() {
      return new GetUserActiveByCategory_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(int key, int val) {
      if (this.success == null) {
        this.success = new HashMap<Integer,Integer>();
      }
      this.success.put(key, val);
    }

    public Map<Integer,Integer> getSuccess() {
      return this.success;
    }

    public GetUserActiveByCategory_result setSuccess(Map<Integer,Integer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<Integer,Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetUserActiveByCategory_result)
        return this.equals((GetUserActiveByCategory_result)that);
      return false;
    }

    public boolean equals(GetUserActiveByCategory_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetUserActiveByCategory_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetUserActiveByCategory_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetUserActiveByCategory_resultStandardSchemeFactory implements SchemeFactory {
      public GetUserActiveByCategory_resultStandardScheme getScheme() {
        return new GetUserActiveByCategory_resultStandardScheme();
      }
    }

    private static class GetUserActiveByCategory_resultStandardScheme extends StandardScheme<GetUserActiveByCategory_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetUserActiveByCategory_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map16 = iprot.readMapBegin();
                  struct.success = new HashMap<Integer,Integer>(2*_map16.size);
                  int _key17;
                  int _val18;
                  for (int _i19 = 0; _i19 < _map16.size; ++_i19)
                  {
                    _key17 = iprot.readI32();
                    _val18 = iprot.readI32();
                    struct.success.put(_key17, _val18);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetUserActiveByCategory_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.success.size()));
            for (Map.Entry<Integer, Integer> _iter20 : struct.success.entrySet())
            {
              oprot.writeI32(_iter20.getKey());
              oprot.writeI32(_iter20.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetUserActiveByCategory_resultTupleSchemeFactory implements SchemeFactory {
      public GetUserActiveByCategory_resultTupleScheme getScheme() {
        return new GetUserActiveByCategory_resultTupleScheme();
      }
    }

    private static class GetUserActiveByCategory_resultTupleScheme extends TupleScheme<GetUserActiveByCategory_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetUserActiveByCategory_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<Integer, Integer> _iter21 : struct.success.entrySet())
            {
              oprot.writeI32(_iter21.getKey());
              oprot.writeI32(_iter21.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetUserActiveByCategory_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map22 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.success = new HashMap<Integer,Integer>(2*_map22.size);
            int _key23;
            int _val24;
            for (int _i25 = 0; _i25 < _map22.size; ++_i25)
            {
              _key23 = iprot.readI32();
              _val24 = iprot.readI32();
              struct.success.put(_key23, _val24);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class CreateActiveBehavior_args implements org.apache.thrift.TBase<CreateActiveBehavior_args, CreateActiveBehavior_args._Fields>, java.io.Serializable, Cloneable, Comparable<CreateActiveBehavior_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateActiveBehavior_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateActiveBehavior_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateActiveBehavior_argsTupleSchemeFactory());
    }

    public long uid; // required
    public long pid; // required
    public int cid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid"),
      PID((short)2, "pid"),
      CID((short)3, "cid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          case 2: // PID
            return PID;
          case 3: // CID
            return CID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private static final int __PID_ISSET_ID = 1;
    private static final int __CID_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CID, new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateActiveBehavior_args.class, metaDataMap);
    }

    public CreateActiveBehavior_args() {
    }

    public CreateActiveBehavior_args(
      long uid,
      long pid,
      int cid)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
      this.pid = pid;
      setPidIsSet(true);
      this.cid = cid;
      setCidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateActiveBehavior_args(CreateActiveBehavior_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
      this.pid = other.pid;
      this.cid = other.cid;
    }

    public CreateActiveBehavior_args deepCopy() {
      return new CreateActiveBehavior_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
      setPidIsSet(false);
      this.pid = 0;
      setCidIsSet(false);
      this.cid = 0;
    }

    public long getUid() {
      return this.uid;
    }

    public CreateActiveBehavior_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public long getPid() {
      return this.pid;
    }

    public CreateActiveBehavior_args setPid(long pid) {
      this.pid = pid;
      setPidIsSet(true);
      return this;
    }

    public void unsetPid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
    }

    /** Returns true if field pid is set (has been assigned a value) and false otherwise */
    public boolean isSetPid() {
      return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
    }

    public void setPidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
    }

    public int getCid() {
      return this.cid;
    }

    public CreateActiveBehavior_args setCid(int cid) {
      this.cid = cid;
      setCidIsSet(true);
      return this;
    }

    public void unsetCid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CID_ISSET_ID);
    }

    /** Returns true if field cid is set (has been assigned a value) and false otherwise */
    public boolean isSetCid() {
      return EncodingUtils.testBit(__isset_bitfield, __CID_ISSET_ID);
    }

    public void setCidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      case PID:
        if (value == null) {
          unsetPid();
        } else {
          setPid((Long)value);
        }
        break;

      case CID:
        if (value == null) {
          unsetCid();
        } else {
          setCid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return getUid();

      case PID:
        return getPid();

      case CID:
        return getCid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case PID:
        return isSetPid();
      case CID:
        return isSetCid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateActiveBehavior_args)
        return this.equals((CreateActiveBehavior_args)that);
      return false;
    }

    public boolean equals(CreateActiveBehavior_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_pid = true;
      boolean that_present_pid = true;
      if (this_present_pid || that_present_pid) {
        if (!(this_present_pid && that_present_pid))
          return false;
        if (this.pid != that.pid)
          return false;
      }

      boolean this_present_cid = true;
      boolean that_present_cid = true;
      if (this_present_cid || that_present_cid) {
        if (!(this_present_cid && that_present_cid))
          return false;
        if (this.cid != that.cid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_uid = true;
      list.add(present_uid);
      if (present_uid)
        list.add(uid);

      boolean present_pid = true;
      list.add(present_pid);
      if (present_pid)
        list.add(pid);

      boolean present_cid = true;
      list.add(present_cid);
      if (present_cid)
        list.add(cid);

      return list.hashCode();
    }

    @Override
    public int compareTo(CreateActiveBehavior_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCid()).compareTo(other.isSetCid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, other.cid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateActiveBehavior_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pid:");
      sb.append(this.pid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cid:");
      sb.append(this.cid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateActiveBehavior_argsStandardSchemeFactory implements SchemeFactory {
      public CreateActiveBehavior_argsStandardScheme getScheme() {
        return new CreateActiveBehavior_argsStandardScheme();
      }
    }

    private static class CreateActiveBehavior_argsStandardScheme extends StandardScheme<CreateActiveBehavior_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateActiveBehavior_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.pid = iprot.readI64();
                struct.setPidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cid = iprot.readI32();
                struct.setCidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateActiveBehavior_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeI64(struct.pid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CID_FIELD_DESC);
        oprot.writeI32(struct.cid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateActiveBehavior_argsTupleSchemeFactory implements SchemeFactory {
      public CreateActiveBehavior_argsTupleScheme getScheme() {
        return new CreateActiveBehavior_argsTupleScheme();
      }
    }

    private static class CreateActiveBehavior_argsTupleScheme extends TupleScheme<CreateActiveBehavior_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateActiveBehavior_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        if (struct.isSetPid()) {
          optionals.set(1);
        }
        if (struct.isSetCid()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
        if (struct.isSetPid()) {
          oprot.writeI64(struct.pid);
        }
        if (struct.isSetCid()) {
          oprot.writeI32(struct.cid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateActiveBehavior_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pid = iprot.readI64();
          struct.setPidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.cid = iprot.readI32();
          struct.setCidIsSet(true);
        }
      }
    }

  }

  public static class CreateActiveBehavior_result implements org.apache.thrift.TBase<CreateActiveBehavior_result, CreateActiveBehavior_result._Fields>, java.io.Serializable, Cloneable, Comparable<CreateActiveBehavior_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateActiveBehavior_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateActiveBehavior_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateActiveBehavior_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateActiveBehavior_result.class, metaDataMap);
    }

    public CreateActiveBehavior_result() {
    }

    public CreateActiveBehavior_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateActiveBehavior_result(CreateActiveBehavior_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public CreateActiveBehavior_result deepCopy() {
      return new CreateActiveBehavior_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public CreateActiveBehavior_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateActiveBehavior_result)
        return this.equals((CreateActiveBehavior_result)that);
      return false;
    }

    public boolean equals(CreateActiveBehavior_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(CreateActiveBehavior_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateActiveBehavior_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateActiveBehavior_resultStandardSchemeFactory implements SchemeFactory {
      public CreateActiveBehavior_resultStandardScheme getScheme() {
        return new CreateActiveBehavior_resultStandardScheme();
      }
    }

    private static class CreateActiveBehavior_resultStandardScheme extends StandardScheme<CreateActiveBehavior_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateActiveBehavior_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateActiveBehavior_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateActiveBehavior_resultTupleSchemeFactory implements SchemeFactory {
      public CreateActiveBehavior_resultTupleScheme getScheme() {
        return new CreateActiveBehavior_resultTupleScheme();
      }
    }

    private static class CreateActiveBehavior_resultTupleScheme extends TupleScheme<CreateActiveBehavior_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateActiveBehavior_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateActiveBehavior_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetLastestActiveUsers_args implements org.apache.thrift.TBase<GetLastestActiveUsers_args, GetLastestActiveUsers_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetLastestActiveUsers_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetLastestActiveUsers_args");

    private static final org.apache.thrift.protocol.TField USER_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("userNum", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetLastestActiveUsers_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetLastestActiveUsers_argsTupleSchemeFactory());
    }

    public int userNum; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NUM((short)1, "userNum");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NUM
            return USER_NUM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERNUM_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NUM, new org.apache.thrift.meta_data.FieldMetaData("userNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetLastestActiveUsers_args.class, metaDataMap);
    }

    public GetLastestActiveUsers_args() {
    }

    public GetLastestActiveUsers_args(
      int userNum)
    {
      this();
      this.userNum = userNum;
      setUserNumIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetLastestActiveUsers_args(GetLastestActiveUsers_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userNum = other.userNum;
    }

    public GetLastestActiveUsers_args deepCopy() {
      return new GetLastestActiveUsers_args(this);
    }

    @Override
    public void clear() {
      setUserNumIsSet(false);
      this.userNum = 0;
    }

    public int getUserNum() {
      return this.userNum;
    }

    public GetLastestActiveUsers_args setUserNum(int userNum) {
      this.userNum = userNum;
      setUserNumIsSet(true);
      return this;
    }

    public void unsetUserNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERNUM_ISSET_ID);
    }

    /** Returns true if field userNum is set (has been assigned a value) and false otherwise */
    public boolean isSetUserNum() {
      return EncodingUtils.testBit(__isset_bitfield, __USERNUM_ISSET_ID);
    }

    public void setUserNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERNUM_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NUM:
        if (value == null) {
          unsetUserNum();
        } else {
          setUserNum((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NUM:
        return getUserNum();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NUM:
        return isSetUserNum();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetLastestActiveUsers_args)
        return this.equals((GetLastestActiveUsers_args)that);
      return false;
    }

    public boolean equals(GetLastestActiveUsers_args that) {
      if (that == null)
        return false;

      boolean this_present_userNum = true;
      boolean that_present_userNum = true;
      if (this_present_userNum || that_present_userNum) {
        if (!(this_present_userNum && that_present_userNum))
          return false;
        if (this.userNum != that.userNum)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userNum = true;
      list.add(present_userNum);
      if (present_userNum)
        list.add(userNum);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetLastestActiveUsers_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserNum()).compareTo(other.isSetUserNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userNum, other.userNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetLastestActiveUsers_args(");
      boolean first = true;

      sb.append("userNum:");
      sb.append(this.userNum);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetLastestActiveUsers_argsStandardSchemeFactory implements SchemeFactory {
      public GetLastestActiveUsers_argsStandardScheme getScheme() {
        return new GetLastestActiveUsers_argsStandardScheme();
      }
    }

    private static class GetLastestActiveUsers_argsStandardScheme extends StandardScheme<GetLastestActiveUsers_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetLastestActiveUsers_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userNum = iprot.readI32();
                struct.setUserNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetLastestActiveUsers_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_NUM_FIELD_DESC);
        oprot.writeI32(struct.userNum);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetLastestActiveUsers_argsTupleSchemeFactory implements SchemeFactory {
      public GetLastestActiveUsers_argsTupleScheme getScheme() {
        return new GetLastestActiveUsers_argsTupleScheme();
      }
    }

    private static class GetLastestActiveUsers_argsTupleScheme extends TupleScheme<GetLastestActiveUsers_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetLastestActiveUsers_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserNum()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserNum()) {
          oprot.writeI32(struct.userNum);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetLastestActiveUsers_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userNum = iprot.readI32();
          struct.setUserNumIsSet(true);
        }
      }
    }

  }

  public static class GetLastestActiveUsers_result implements org.apache.thrift.TBase<GetLastestActiveUsers_result, GetLastestActiveUsers_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetLastestActiveUsers_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetLastestActiveUsers_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetLastestActiveUsers_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetLastestActiveUsers_resultTupleSchemeFactory());
    }

    public List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetLastestActiveUsers_result.class, metaDataMap);
    }

    public GetLastestActiveUsers_result() {
    }

    public GetLastestActiveUsers_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetLastestActiveUsers_result(GetLastestActiveUsers_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public GetLastestActiveUsers_result deepCopy() {
      return new GetLastestActiveUsers_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public GetLastestActiveUsers_result setSuccess(List<Long> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetLastestActiveUsers_result)
        return this.equals((GetLastestActiveUsers_result)that);
      return false;
    }

    public boolean equals(GetLastestActiveUsers_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetLastestActiveUsers_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetLastestActiveUsers_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetLastestActiveUsers_resultStandardSchemeFactory implements SchemeFactory {
      public GetLastestActiveUsers_resultStandardScheme getScheme() {
        return new GetLastestActiveUsers_resultStandardScheme();
      }
    }

    private static class GetLastestActiveUsers_resultStandardScheme extends StandardScheme<GetLastestActiveUsers_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetLastestActiveUsers_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list26.size);
                  long _elem27;
                  for (int _i28 = 0; _i28 < _list26.size; ++_i28)
                  {
                    _elem27 = iprot.readI64();
                    struct.success.add(_elem27);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetLastestActiveUsers_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter29 : struct.success)
            {
              oprot.writeI64(_iter29);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetLastestActiveUsers_resultTupleSchemeFactory implements SchemeFactory {
      public GetLastestActiveUsers_resultTupleScheme getScheme() {
        return new GetLastestActiveUsers_resultTupleScheme();
      }
    }

    private static class GetLastestActiveUsers_resultTupleScheme extends TupleScheme<GetLastestActiveUsers_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetLastestActiveUsers_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter30 : struct.success)
            {
              oprot.writeI64(_iter30);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetLastestActiveUsers_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list31.size);
            long _elem32;
            for (int _i33 = 0; _i33 < _list31.size; ++_i33)
            {
              _elem32 = iprot.readI64();
              struct.success.add(_elem32);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetUserActiveByProduct_args implements org.apache.thrift.TBase<GetUserActiveByProduct_args, GetUserActiveByProduct_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetUserActiveByProduct_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetUserActiveByProduct_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetUserActiveByProduct_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetUserActiveByProduct_argsTupleSchemeFactory());
    }

    public long uid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetUserActiveByProduct_args.class, metaDataMap);
    }

    public GetUserActiveByProduct_args() {
    }

    public GetUserActiveByProduct_args(
      long uid)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetUserActiveByProduct_args(GetUserActiveByProduct_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.uid = other.uid;
    }

    public GetUserActiveByProduct_args deepCopy() {
      return new GetUserActiveByProduct_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
    }

    public long getUid() {
      return this.uid;
    }

    public GetUserActiveByProduct_args setUid(long uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return getUid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetUserActiveByProduct_args)
        return this.equals((GetUserActiveByProduct_args)that);
      return false;
    }

    public boolean equals(GetUserActiveByProduct_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_uid = true;
      list.add(present_uid);
      if (present_uid)
        list.add(uid);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetUserActiveByProduct_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetUserActiveByProduct_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetUserActiveByProduct_argsStandardSchemeFactory implements SchemeFactory {
      public GetUserActiveByProduct_argsStandardScheme getScheme() {
        return new GetUserActiveByProduct_argsStandardScheme();
      }
    }

    private static class GetUserActiveByProduct_argsStandardScheme extends StandardScheme<GetUserActiveByProduct_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetUserActiveByProduct_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.uid = iprot.readI64();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetUserActiveByProduct_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI64(struct.uid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetUserActiveByProduct_argsTupleSchemeFactory implements SchemeFactory {
      public GetUserActiveByProduct_argsTupleScheme getScheme() {
        return new GetUserActiveByProduct_argsTupleScheme();
      }
    }

    private static class GetUserActiveByProduct_argsTupleScheme extends TupleScheme<GetUserActiveByProduct_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetUserActiveByProduct_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUid()) {
          oprot.writeI64(struct.uid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetUserActiveByProduct_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.uid = iprot.readI64();
          struct.setUidIsSet(true);
        }
      }
    }

  }

  public static class GetUserActiveByProduct_result implements org.apache.thrift.TBase<GetUserActiveByProduct_result, GetUserActiveByProduct_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetUserActiveByProduct_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetUserActiveByProduct_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.SET, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetUserActiveByProduct_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetUserActiveByProduct_resultTupleSchemeFactory());
    }

    public Set<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetUserActiveByProduct_result.class, metaDataMap);
    }

    public GetUserActiveByProduct_result() {
    }

    public GetUserActiveByProduct_result(
      Set<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetUserActiveByProduct_result(GetUserActiveByProduct_result other) {
      if (other.isSetSuccess()) {
        Set<Long> __this__success = new HashSet<Long>(other.success);
        this.success = __this__success;
      }
    }

    public GetUserActiveByProduct_result deepCopy() {
      return new GetUserActiveByProduct_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new HashSet<Long>();
      }
      this.success.add(elem);
    }

    public Set<Long> getSuccess() {
      return this.success;
    }

    public GetUserActiveByProduct_result setSuccess(Set<Long> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Set<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetUserActiveByProduct_result)
        return this.equals((GetUserActiveByProduct_result)that);
      return false;
    }

    public boolean equals(GetUserActiveByProduct_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetUserActiveByProduct_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetUserActiveByProduct_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetUserActiveByProduct_resultStandardSchemeFactory implements SchemeFactory {
      public GetUserActiveByProduct_resultStandardScheme getScheme() {
        return new GetUserActiveByProduct_resultStandardScheme();
      }
    }

    private static class GetUserActiveByProduct_resultStandardScheme extends StandardScheme<GetUserActiveByProduct_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetUserActiveByProduct_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set34 = iprot.readSetBegin();
                  struct.success = new HashSet<Long>(2*_set34.size);
                  long _elem35;
                  for (int _i36 = 0; _i36 < _set34.size; ++_i36)
                  {
                    _elem35 = iprot.readI64();
                    struct.success.add(_elem35);
                  }
                  iprot.readSetEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetUserActiveByProduct_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter37 : struct.success)
            {
              oprot.writeI64(_iter37);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetUserActiveByProduct_resultTupleSchemeFactory implements SchemeFactory {
      public GetUserActiveByProduct_resultTupleScheme getScheme() {
        return new GetUserActiveByProduct_resultTupleScheme();
      }
    }

    private static class GetUserActiveByProduct_resultTupleScheme extends TupleScheme<GetUserActiveByProduct_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetUserActiveByProduct_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter38 : struct.success)
            {
              oprot.writeI64(_iter38);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetUserActiveByProduct_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TSet _set39 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new HashSet<Long>(2*_set39.size);
            long _elem40;
            for (int _i41 = 0; _i41 < _set39.size; ++_i41)
            {
              _elem40 = iprot.readI64();
              struct.success.add(_elem40);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetProductByCategory_args implements org.apache.thrift.TBase<GetProductByCategory_args, GetProductByCategory_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetProductByCategory_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetProductByCategory_args");

    private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("order", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PROD_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("prodNum", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetProductByCategory_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetProductByCategory_argsTupleSchemeFactory());
    }

    public int cid; // required
    /**
     * 
     * @see SearchOrder
     */
    public SearchOrder order; // required
    public int prodNum; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CID((short)1, "cid"),
      /**
       * 
       * @see SearchOrder
       */
      ORDER((short)2, "order"),
      PROD_NUM((short)3, "prodNum");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CID
            return CID;
          case 2: // ORDER
            return ORDER;
          case 3: // PROD_NUM
            return PROD_NUM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CID_ISSET_ID = 0;
    private static final int __PRODNUM_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CID, new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ORDER, new org.apache.thrift.meta_data.FieldMetaData("order", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SearchOrder.class)));
      tmpMap.put(_Fields.PROD_NUM, new org.apache.thrift.meta_data.FieldMetaData("prodNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetProductByCategory_args.class, metaDataMap);
    }

    public GetProductByCategory_args() {
    }

    public GetProductByCategory_args(
      int cid,
      SearchOrder order,
      int prodNum)
    {
      this();
      this.cid = cid;
      setCidIsSet(true);
      this.order = order;
      this.prodNum = prodNum;
      setProdNumIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetProductByCategory_args(GetProductByCategory_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cid = other.cid;
      if (other.isSetOrder()) {
        this.order = other.order;
      }
      this.prodNum = other.prodNum;
    }

    public GetProductByCategory_args deepCopy() {
      return new GetProductByCategory_args(this);
    }

    @Override
    public void clear() {
      setCidIsSet(false);
      this.cid = 0;
      this.order = null;
      setProdNumIsSet(false);
      this.prodNum = 0;
    }

    public int getCid() {
      return this.cid;
    }

    public GetProductByCategory_args setCid(int cid) {
      this.cid = cid;
      setCidIsSet(true);
      return this;
    }

    public void unsetCid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CID_ISSET_ID);
    }

    /** Returns true if field cid is set (has been assigned a value) and false otherwise */
    public boolean isSetCid() {
      return EncodingUtils.testBit(__isset_bitfield, __CID_ISSET_ID);
    }

    public void setCidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CID_ISSET_ID, value);
    }

    /**
     * 
     * @see SearchOrder
     */
    public SearchOrder getOrder() {
      return this.order;
    }

    /**
     * 
     * @see SearchOrder
     */
    public GetProductByCategory_args setOrder(SearchOrder order) {
      this.order = order;
      return this;
    }

    public void unsetOrder() {
      this.order = null;
    }

    /** Returns true if field order is set (has been assigned a value) and false otherwise */
    public boolean isSetOrder() {
      return this.order != null;
    }

    public void setOrderIsSet(boolean value) {
      if (!value) {
        this.order = null;
      }
    }

    public int getProdNum() {
      return this.prodNum;
    }

    public GetProductByCategory_args setProdNum(int prodNum) {
      this.prodNum = prodNum;
      setProdNumIsSet(true);
      return this;
    }

    public void unsetProdNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODNUM_ISSET_ID);
    }

    /** Returns true if field prodNum is set (has been assigned a value) and false otherwise */
    public boolean isSetProdNum() {
      return EncodingUtils.testBit(__isset_bitfield, __PRODNUM_ISSET_ID);
    }

    public void setProdNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODNUM_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CID:
        if (value == null) {
          unsetCid();
        } else {
          setCid((Integer)value);
        }
        break;

      case ORDER:
        if (value == null) {
          unsetOrder();
        } else {
          setOrder((SearchOrder)value);
        }
        break;

      case PROD_NUM:
        if (value == null) {
          unsetProdNum();
        } else {
          setProdNum((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CID:
        return getCid();

      case ORDER:
        return getOrder();

      case PROD_NUM:
        return getProdNum();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CID:
        return isSetCid();
      case ORDER:
        return isSetOrder();
      case PROD_NUM:
        return isSetProdNum();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetProductByCategory_args)
        return this.equals((GetProductByCategory_args)that);
      return false;
    }

    public boolean equals(GetProductByCategory_args that) {
      if (that == null)
        return false;

      boolean this_present_cid = true;
      boolean that_present_cid = true;
      if (this_present_cid || that_present_cid) {
        if (!(this_present_cid && that_present_cid))
          return false;
        if (this.cid != that.cid)
          return false;
      }

      boolean this_present_order = true && this.isSetOrder();
      boolean that_present_order = true && that.isSetOrder();
      if (this_present_order || that_present_order) {
        if (!(this_present_order && that_present_order))
          return false;
        if (!this.order.equals(that.order))
          return false;
      }

      boolean this_present_prodNum = true;
      boolean that_present_prodNum = true;
      if (this_present_prodNum || that_present_prodNum) {
        if (!(this_present_prodNum && that_present_prodNum))
          return false;
        if (this.prodNum != that.prodNum)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cid = true;
      list.add(present_cid);
      if (present_cid)
        list.add(cid);

      boolean present_order = true && (isSetOrder());
      list.add(present_order);
      if (present_order)
        list.add(order.getValue());

      boolean present_prodNum = true;
      list.add(present_prodNum);
      if (present_prodNum)
        list.add(prodNum);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetProductByCategory_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCid()).compareTo(other.isSetCid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, other.cid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrder()).compareTo(other.isSetOrder());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrder()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.order, other.order);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProdNum()).compareTo(other.isSetProdNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProdNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prodNum, other.prodNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetProductByCategory_args(");
      boolean first = true;

      sb.append("cid:");
      sb.append(this.cid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("order:");
      if (this.order == null) {
        sb.append("null");
      } else {
        sb.append(this.order);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("prodNum:");
      sb.append(this.prodNum);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetProductByCategory_argsStandardSchemeFactory implements SchemeFactory {
      public GetProductByCategory_argsStandardScheme getScheme() {
        return new GetProductByCategory_argsStandardScheme();
      }
    }

    private static class GetProductByCategory_argsStandardScheme extends StandardScheme<GetProductByCategory_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetProductByCategory_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cid = iprot.readI32();
                struct.setCidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORDER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.order = SearchOrder.findByValue(iprot.readI32());
                struct.setOrderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PROD_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.prodNum = iprot.readI32();
                struct.setProdNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetProductByCategory_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CID_FIELD_DESC);
        oprot.writeI32(struct.cid);
        oprot.writeFieldEnd();
        if (struct.order != null) {
          oprot.writeFieldBegin(ORDER_FIELD_DESC);
          oprot.writeI32(struct.order.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PROD_NUM_FIELD_DESC);
        oprot.writeI32(struct.prodNum);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetProductByCategory_argsTupleSchemeFactory implements SchemeFactory {
      public GetProductByCategory_argsTupleScheme getScheme() {
        return new GetProductByCategory_argsTupleScheme();
      }
    }

    private static class GetProductByCategory_argsTupleScheme extends TupleScheme<GetProductByCategory_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetProductByCategory_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCid()) {
          optionals.set(0);
        }
        if (struct.isSetOrder()) {
          optionals.set(1);
        }
        if (struct.isSetProdNum()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCid()) {
          oprot.writeI32(struct.cid);
        }
        if (struct.isSetOrder()) {
          oprot.writeI32(struct.order.getValue());
        }
        if (struct.isSetProdNum()) {
          oprot.writeI32(struct.prodNum);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetProductByCategory_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.cid = iprot.readI32();
          struct.setCidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.order = SearchOrder.findByValue(iprot.readI32());
          struct.setOrderIsSet(true);
        }
        if (incoming.get(2)) {
          struct.prodNum = iprot.readI32();
          struct.setProdNumIsSet(true);
        }
      }
    }

  }

  public static class GetProductByCategory_result implements org.apache.thrift.TBase<GetProductByCategory_result, GetProductByCategory_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetProductByCategory_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetProductByCategory_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetProductByCategory_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetProductByCategory_resultTupleSchemeFactory());
    }

    public List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetProductByCategory_result.class, metaDataMap);
    }

    public GetProductByCategory_result() {
    }

    public GetProductByCategory_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetProductByCategory_result(GetProductByCategory_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public GetProductByCategory_result deepCopy() {
      return new GetProductByCategory_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public GetProductByCategory_result setSuccess(List<Long> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetProductByCategory_result)
        return this.equals((GetProductByCategory_result)that);
      return false;
    }

    public boolean equals(GetProductByCategory_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetProductByCategory_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetProductByCategory_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetProductByCategory_resultStandardSchemeFactory implements SchemeFactory {
      public GetProductByCategory_resultStandardScheme getScheme() {
        return new GetProductByCategory_resultStandardScheme();
      }
    }

    private static class GetProductByCategory_resultStandardScheme extends StandardScheme<GetProductByCategory_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetProductByCategory_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list42.size);
                  long _elem43;
                  for (int _i44 = 0; _i44 < _list42.size; ++_i44)
                  {
                    _elem43 = iprot.readI64();
                    struct.success.add(_elem43);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetProductByCategory_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter45 : struct.success)
            {
              oprot.writeI64(_iter45);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetProductByCategory_resultTupleSchemeFactory implements SchemeFactory {
      public GetProductByCategory_resultTupleScheme getScheme() {
        return new GetProductByCategory_resultTupleScheme();
      }
    }

    private static class GetProductByCategory_resultTupleScheme extends TupleScheme<GetProductByCategory_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetProductByCategory_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter46 : struct.success)
            {
              oprot.writeI64(_iter46);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetProductByCategory_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list47 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list47.size);
            long _elem48;
            for (int _i49 = 0; _i49 < _list47.size; ++_i49)
            {
              _elem48 = iprot.readI64();
              struct.success.add(_elem48);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetProductBySimilarity_args implements org.apache.thrift.TBase<GetProductBySimilarity_args, GetProductBySimilarity_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetProductBySimilarity_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetProductBySimilarity_args");

    private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("order", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField WORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("words", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PROD_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("prodNum", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetProductBySimilarity_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetProductBySimilarity_argsTupleSchemeFactory());
    }

    public int cid; // required
    /**
     * 
     * @see SearchOrder
     */
    public SearchOrder order; // required
    public String words; // required
    public int prodNum; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CID((short)1, "cid"),
      /**
       * 
       * @see SearchOrder
       */
      ORDER((short)2, "order"),
      WORDS((short)3, "words"),
      PROD_NUM((short)4, "prodNum");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CID
            return CID;
          case 2: // ORDER
            return ORDER;
          case 3: // WORDS
            return WORDS;
          case 4: // PROD_NUM
            return PROD_NUM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CID_ISSET_ID = 0;
    private static final int __PRODNUM_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CID, new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ORDER, new org.apache.thrift.meta_data.FieldMetaData("order", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SearchOrder.class)));
      tmpMap.put(_Fields.WORDS, new org.apache.thrift.meta_data.FieldMetaData("words", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PROD_NUM, new org.apache.thrift.meta_data.FieldMetaData("prodNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetProductBySimilarity_args.class, metaDataMap);
    }

    public GetProductBySimilarity_args() {
    }

    public GetProductBySimilarity_args(
      int cid,
      SearchOrder order,
      String words,
      int prodNum)
    {
      this();
      this.cid = cid;
      setCidIsSet(true);
      this.order = order;
      this.words = words;
      this.prodNum = prodNum;
      setProdNumIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetProductBySimilarity_args(GetProductBySimilarity_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cid = other.cid;
      if (other.isSetOrder()) {
        this.order = other.order;
      }
      if (other.isSetWords()) {
        this.words = other.words;
      }
      this.prodNum = other.prodNum;
    }

    public GetProductBySimilarity_args deepCopy() {
      return new GetProductBySimilarity_args(this);
    }

    @Override
    public void clear() {
      setCidIsSet(false);
      this.cid = 0;
      this.order = null;
      this.words = null;
      setProdNumIsSet(false);
      this.prodNum = 0;
    }

    public int getCid() {
      return this.cid;
    }

    public GetProductBySimilarity_args setCid(int cid) {
      this.cid = cid;
      setCidIsSet(true);
      return this;
    }

    public void unsetCid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CID_ISSET_ID);
    }

    /** Returns true if field cid is set (has been assigned a value) and false otherwise */
    public boolean isSetCid() {
      return EncodingUtils.testBit(__isset_bitfield, __CID_ISSET_ID);
    }

    public void setCidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CID_ISSET_ID, value);
    }

    /**
     * 
     * @see SearchOrder
     */
    public SearchOrder getOrder() {
      return this.order;
    }

    /**
     * 
     * @see SearchOrder
     */
    public GetProductBySimilarity_args setOrder(SearchOrder order) {
      this.order = order;
      return this;
    }

    public void unsetOrder() {
      this.order = null;
    }

    /** Returns true if field order is set (has been assigned a value) and false otherwise */
    public boolean isSetOrder() {
      return this.order != null;
    }

    public void setOrderIsSet(boolean value) {
      if (!value) {
        this.order = null;
      }
    }

    public String getWords() {
      return this.words;
    }

    public GetProductBySimilarity_args setWords(String words) {
      this.words = words;
      return this;
    }

    public void unsetWords() {
      this.words = null;
    }

    /** Returns true if field words is set (has been assigned a value) and false otherwise */
    public boolean isSetWords() {
      return this.words != null;
    }

    public void setWordsIsSet(boolean value) {
      if (!value) {
        this.words = null;
      }
    }

    public int getProdNum() {
      return this.prodNum;
    }

    public GetProductBySimilarity_args setProdNum(int prodNum) {
      this.prodNum = prodNum;
      setProdNumIsSet(true);
      return this;
    }

    public void unsetProdNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODNUM_ISSET_ID);
    }

    /** Returns true if field prodNum is set (has been assigned a value) and false otherwise */
    public boolean isSetProdNum() {
      return EncodingUtils.testBit(__isset_bitfield, __PRODNUM_ISSET_ID);
    }

    public void setProdNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODNUM_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CID:
        if (value == null) {
          unsetCid();
        } else {
          setCid((Integer)value);
        }
        break;

      case ORDER:
        if (value == null) {
          unsetOrder();
        } else {
          setOrder((SearchOrder)value);
        }
        break;

      case WORDS:
        if (value == null) {
          unsetWords();
        } else {
          setWords((String)value);
        }
        break;

      case PROD_NUM:
        if (value == null) {
          unsetProdNum();
        } else {
          setProdNum((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CID:
        return getCid();

      case ORDER:
        return getOrder();

      case WORDS:
        return getWords();

      case PROD_NUM:
        return getProdNum();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CID:
        return isSetCid();
      case ORDER:
        return isSetOrder();
      case WORDS:
        return isSetWords();
      case PROD_NUM:
        return isSetProdNum();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetProductBySimilarity_args)
        return this.equals((GetProductBySimilarity_args)that);
      return false;
    }

    public boolean equals(GetProductBySimilarity_args that) {
      if (that == null)
        return false;

      boolean this_present_cid = true;
      boolean that_present_cid = true;
      if (this_present_cid || that_present_cid) {
        if (!(this_present_cid && that_present_cid))
          return false;
        if (this.cid != that.cid)
          return false;
      }

      boolean this_present_order = true && this.isSetOrder();
      boolean that_present_order = true && that.isSetOrder();
      if (this_present_order || that_present_order) {
        if (!(this_present_order && that_present_order))
          return false;
        if (!this.order.equals(that.order))
          return false;
      }

      boolean this_present_words = true && this.isSetWords();
      boolean that_present_words = true && that.isSetWords();
      if (this_present_words || that_present_words) {
        if (!(this_present_words && that_present_words))
          return false;
        if (!this.words.equals(that.words))
          return false;
      }

      boolean this_present_prodNum = true;
      boolean that_present_prodNum = true;
      if (this_present_prodNum || that_present_prodNum) {
        if (!(this_present_prodNum && that_present_prodNum))
          return false;
        if (this.prodNum != that.prodNum)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cid = true;
      list.add(present_cid);
      if (present_cid)
        list.add(cid);

      boolean present_order = true && (isSetOrder());
      list.add(present_order);
      if (present_order)
        list.add(order.getValue());

      boolean present_words = true && (isSetWords());
      list.add(present_words);
      if (present_words)
        list.add(words);

      boolean present_prodNum = true;
      list.add(present_prodNum);
      if (present_prodNum)
        list.add(prodNum);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetProductBySimilarity_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCid()).compareTo(other.isSetCid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, other.cid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrder()).compareTo(other.isSetOrder());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrder()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.order, other.order);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWords()).compareTo(other.isSetWords());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWords()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.words, other.words);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProdNum()).compareTo(other.isSetProdNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProdNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prodNum, other.prodNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetProductBySimilarity_args(");
      boolean first = true;

      sb.append("cid:");
      sb.append(this.cid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("order:");
      if (this.order == null) {
        sb.append("null");
      } else {
        sb.append(this.order);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("words:");
      if (this.words == null) {
        sb.append("null");
      } else {
        sb.append(this.words);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("prodNum:");
      sb.append(this.prodNum);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetProductBySimilarity_argsStandardSchemeFactory implements SchemeFactory {
      public GetProductBySimilarity_argsStandardScheme getScheme() {
        return new GetProductBySimilarity_argsStandardScheme();
      }
    }

    private static class GetProductBySimilarity_argsStandardScheme extends StandardScheme<GetProductBySimilarity_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetProductBySimilarity_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cid = iprot.readI32();
                struct.setCidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORDER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.order = SearchOrder.findByValue(iprot.readI32());
                struct.setOrderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // WORDS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.words = iprot.readString();
                struct.setWordsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PROD_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.prodNum = iprot.readI32();
                struct.setProdNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetProductBySimilarity_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CID_FIELD_DESC);
        oprot.writeI32(struct.cid);
        oprot.writeFieldEnd();
        if (struct.order != null) {
          oprot.writeFieldBegin(ORDER_FIELD_DESC);
          oprot.writeI32(struct.order.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.words != null) {
          oprot.writeFieldBegin(WORDS_FIELD_DESC);
          oprot.writeString(struct.words);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PROD_NUM_FIELD_DESC);
        oprot.writeI32(struct.prodNum);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetProductBySimilarity_argsTupleSchemeFactory implements SchemeFactory {
      public GetProductBySimilarity_argsTupleScheme getScheme() {
        return new GetProductBySimilarity_argsTupleScheme();
      }
    }

    private static class GetProductBySimilarity_argsTupleScheme extends TupleScheme<GetProductBySimilarity_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetProductBySimilarity_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCid()) {
          optionals.set(0);
        }
        if (struct.isSetOrder()) {
          optionals.set(1);
        }
        if (struct.isSetWords()) {
          optionals.set(2);
        }
        if (struct.isSetProdNum()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetCid()) {
          oprot.writeI32(struct.cid);
        }
        if (struct.isSetOrder()) {
          oprot.writeI32(struct.order.getValue());
        }
        if (struct.isSetWords()) {
          oprot.writeString(struct.words);
        }
        if (struct.isSetProdNum()) {
          oprot.writeI32(struct.prodNum);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetProductBySimilarity_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.cid = iprot.readI32();
          struct.setCidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.order = SearchOrder.findByValue(iprot.readI32());
          struct.setOrderIsSet(true);
        }
        if (incoming.get(2)) {
          struct.words = iprot.readString();
          struct.setWordsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.prodNum = iprot.readI32();
          struct.setProdNumIsSet(true);
        }
      }
    }

  }

  public static class GetProductBySimilarity_result implements org.apache.thrift.TBase<GetProductBySimilarity_result, GetProductBySimilarity_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetProductBySimilarity_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetProductBySimilarity_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetProductBySimilarity_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetProductBySimilarity_resultTupleSchemeFactory());
    }

    public List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetProductBySimilarity_result.class, metaDataMap);
    }

    public GetProductBySimilarity_result() {
    }

    public GetProductBySimilarity_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetProductBySimilarity_result(GetProductBySimilarity_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public GetProductBySimilarity_result deepCopy() {
      return new GetProductBySimilarity_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public GetProductBySimilarity_result setSuccess(List<Long> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetProductBySimilarity_result)
        return this.equals((GetProductBySimilarity_result)that);
      return false;
    }

    public boolean equals(GetProductBySimilarity_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetProductBySimilarity_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetProductBySimilarity_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetProductBySimilarity_resultStandardSchemeFactory implements SchemeFactory {
      public GetProductBySimilarity_resultStandardScheme getScheme() {
        return new GetProductBySimilarity_resultStandardScheme();
      }
    }

    private static class GetProductBySimilarity_resultStandardScheme extends StandardScheme<GetProductBySimilarity_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetProductBySimilarity_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list50 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list50.size);
                  long _elem51;
                  for (int _i52 = 0; _i52 < _list50.size; ++_i52)
                  {
                    _elem51 = iprot.readI64();
                    struct.success.add(_elem51);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetProductBySimilarity_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter53 : struct.success)
            {
              oprot.writeI64(_iter53);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetProductBySimilarity_resultTupleSchemeFactory implements SchemeFactory {
      public GetProductBySimilarity_resultTupleScheme getScheme() {
        return new GetProductBySimilarity_resultTupleScheme();
      }
    }

    private static class GetProductBySimilarity_resultTupleScheme extends TupleScheme<GetProductBySimilarity_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetProductBySimilarity_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter54 : struct.success)
            {
              oprot.writeI64(_iter54);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetProductBySimilarity_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list55.size);
            long _elem56;
            for (int _i57 = 0; _i57 < _list55.size; ++_i57)
            {
              _elem56 = iprot.readI64();
              struct.success.add(_elem56);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class IncProductSales_args implements org.apache.thrift.TBase<IncProductSales_args, IncProductSales_args._Fields>, java.io.Serializable, Cloneable, Comparable<IncProductSales_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IncProductSales_args");

    private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField PERCHASE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("perchaseNum", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new IncProductSales_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new IncProductSales_argsTupleSchemeFactory());
    }

    public long pid; // required
    public int perchaseNum; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PID((short)1, "pid"),
      PERCHASE_NUM((short)2, "perchaseNum");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PID
            return PID;
          case 2: // PERCHASE_NUM
            return PERCHASE_NUM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PID_ISSET_ID = 0;
    private static final int __PERCHASENUM_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PERCHASE_NUM, new org.apache.thrift.meta_data.FieldMetaData("perchaseNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IncProductSales_args.class, metaDataMap);
    }

    public IncProductSales_args() {
    }

    public IncProductSales_args(
      long pid,
      int perchaseNum)
    {
      this();
      this.pid = pid;
      setPidIsSet(true);
      this.perchaseNum = perchaseNum;
      setPerchaseNumIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public IncProductSales_args(IncProductSales_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pid = other.pid;
      this.perchaseNum = other.perchaseNum;
    }

    public IncProductSales_args deepCopy() {
      return new IncProductSales_args(this);
    }

    @Override
    public void clear() {
      setPidIsSet(false);
      this.pid = 0;
      setPerchaseNumIsSet(false);
      this.perchaseNum = 0;
    }

    public long getPid() {
      return this.pid;
    }

    public IncProductSales_args setPid(long pid) {
      this.pid = pid;
      setPidIsSet(true);
      return this;
    }

    public void unsetPid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
    }

    /** Returns true if field pid is set (has been assigned a value) and false otherwise */
    public boolean isSetPid() {
      return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
    }

    public void setPidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
    }

    public int getPerchaseNum() {
      return this.perchaseNum;
    }

    public IncProductSales_args setPerchaseNum(int perchaseNum) {
      this.perchaseNum = perchaseNum;
      setPerchaseNumIsSet(true);
      return this;
    }

    public void unsetPerchaseNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PERCHASENUM_ISSET_ID);
    }

    /** Returns true if field perchaseNum is set (has been assigned a value) and false otherwise */
    public boolean isSetPerchaseNum() {
      return EncodingUtils.testBit(__isset_bitfield, __PERCHASENUM_ISSET_ID);
    }

    public void setPerchaseNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PERCHASENUM_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PID:
        if (value == null) {
          unsetPid();
        } else {
          setPid((Long)value);
        }
        break;

      case PERCHASE_NUM:
        if (value == null) {
          unsetPerchaseNum();
        } else {
          setPerchaseNum((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PID:
        return getPid();

      case PERCHASE_NUM:
        return getPerchaseNum();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PID:
        return isSetPid();
      case PERCHASE_NUM:
        return isSetPerchaseNum();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof IncProductSales_args)
        return this.equals((IncProductSales_args)that);
      return false;
    }

    public boolean equals(IncProductSales_args that) {
      if (that == null)
        return false;

      boolean this_present_pid = true;
      boolean that_present_pid = true;
      if (this_present_pid || that_present_pid) {
        if (!(this_present_pid && that_present_pid))
          return false;
        if (this.pid != that.pid)
          return false;
      }

      boolean this_present_perchaseNum = true;
      boolean that_present_perchaseNum = true;
      if (this_present_perchaseNum || that_present_perchaseNum) {
        if (!(this_present_perchaseNum && that_present_perchaseNum))
          return false;
        if (this.perchaseNum != that.perchaseNum)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pid = true;
      list.add(present_pid);
      if (present_pid)
        list.add(pid);

      boolean present_perchaseNum = true;
      list.add(present_perchaseNum);
      if (present_perchaseNum)
        list.add(perchaseNum);

      return list.hashCode();
    }

    @Override
    public int compareTo(IncProductSales_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPerchaseNum()).compareTo(other.isSetPerchaseNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPerchaseNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.perchaseNum, other.perchaseNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("IncProductSales_args(");
      boolean first = true;

      sb.append("pid:");
      sb.append(this.pid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("perchaseNum:");
      sb.append(this.perchaseNum);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class IncProductSales_argsStandardSchemeFactory implements SchemeFactory {
      public IncProductSales_argsStandardScheme getScheme() {
        return new IncProductSales_argsStandardScheme();
      }
    }

    private static class IncProductSales_argsStandardScheme extends StandardScheme<IncProductSales_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, IncProductSales_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.pid = iprot.readI64();
                struct.setPidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PERCHASE_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.perchaseNum = iprot.readI32();
                struct.setPerchaseNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, IncProductSales_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeI64(struct.pid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PERCHASE_NUM_FIELD_DESC);
        oprot.writeI32(struct.perchaseNum);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class IncProductSales_argsTupleSchemeFactory implements SchemeFactory {
      public IncProductSales_argsTupleScheme getScheme() {
        return new IncProductSales_argsTupleScheme();
      }
    }

    private static class IncProductSales_argsTupleScheme extends TupleScheme<IncProductSales_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, IncProductSales_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPid()) {
          optionals.set(0);
        }
        if (struct.isSetPerchaseNum()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPid()) {
          oprot.writeI64(struct.pid);
        }
        if (struct.isSetPerchaseNum()) {
          oprot.writeI32(struct.perchaseNum);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, IncProductSales_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pid = iprot.readI64();
          struct.setPidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.perchaseNum = iprot.readI32();
          struct.setPerchaseNumIsSet(true);
        }
      }
    }

  }

  public static class IncProductSales_result implements org.apache.thrift.TBase<IncProductSales_result, IncProductSales_result._Fields>, java.io.Serializable, Cloneable, Comparable<IncProductSales_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IncProductSales_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new IncProductSales_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new IncProductSales_resultTupleSchemeFactory());
    }

    public ProductInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProductInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IncProductSales_result.class, metaDataMap);
    }

    public IncProductSales_result() {
    }

    public IncProductSales_result(
      ProductInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public IncProductSales_result(IncProductSales_result other) {
      if (other.isSetSuccess()) {
        this.success = new ProductInfo(other.success);
      }
    }

    public IncProductSales_result deepCopy() {
      return new IncProductSales_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ProductInfo getSuccess() {
      return this.success;
    }

    public IncProductSales_result setSuccess(ProductInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ProductInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof IncProductSales_result)
        return this.equals((IncProductSales_result)that);
      return false;
    }

    public boolean equals(IncProductSales_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(IncProductSales_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("IncProductSales_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class IncProductSales_resultStandardSchemeFactory implements SchemeFactory {
      public IncProductSales_resultStandardScheme getScheme() {
        return new IncProductSales_resultStandardScheme();
      }
    }

    private static class IncProductSales_resultStandardScheme extends StandardScheme<IncProductSales_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, IncProductSales_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ProductInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, IncProductSales_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class IncProductSales_resultTupleSchemeFactory implements SchemeFactory {
      public IncProductSales_resultTupleScheme getScheme() {
        return new IncProductSales_resultTupleScheme();
      }
    }

    private static class IncProductSales_resultTupleScheme extends TupleScheme<IncProductSales_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, IncProductSales_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, IncProductSales_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ProductInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetProdInfo_args implements org.apache.thrift.TBase<GetProdInfo_args, GetProdInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetProdInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetProdInfo_args");

    private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetProdInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetProdInfo_argsTupleSchemeFactory());
    }

    public long pid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PID((short)1, "pid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PID
            return PID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetProdInfo_args.class, metaDataMap);
    }

    public GetProdInfo_args() {
    }

    public GetProdInfo_args(
      long pid)
    {
      this();
      this.pid = pid;
      setPidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetProdInfo_args(GetProdInfo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pid = other.pid;
    }

    public GetProdInfo_args deepCopy() {
      return new GetProdInfo_args(this);
    }

    @Override
    public void clear() {
      setPidIsSet(false);
      this.pid = 0;
    }

    public long getPid() {
      return this.pid;
    }

    public GetProdInfo_args setPid(long pid) {
      this.pid = pid;
      setPidIsSet(true);
      return this;
    }

    public void unsetPid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
    }

    /** Returns true if field pid is set (has been assigned a value) and false otherwise */
    public boolean isSetPid() {
      return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
    }

    public void setPidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PID:
        if (value == null) {
          unsetPid();
        } else {
          setPid((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PID:
        return getPid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PID:
        return isSetPid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetProdInfo_args)
        return this.equals((GetProdInfo_args)that);
      return false;
    }

    public boolean equals(GetProdInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_pid = true;
      boolean that_present_pid = true;
      if (this_present_pid || that_present_pid) {
        if (!(this_present_pid && that_present_pid))
          return false;
        if (this.pid != that.pid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pid = true;
      list.add(present_pid);
      if (present_pid)
        list.add(pid);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetProdInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetProdInfo_args(");
      boolean first = true;

      sb.append("pid:");
      sb.append(this.pid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetProdInfo_argsStandardSchemeFactory implements SchemeFactory {
      public GetProdInfo_argsStandardScheme getScheme() {
        return new GetProdInfo_argsStandardScheme();
      }
    }

    private static class GetProdInfo_argsStandardScheme extends StandardScheme<GetProdInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetProdInfo_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.pid = iprot.readI64();
                struct.setPidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetProdInfo_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeI64(struct.pid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetProdInfo_argsTupleSchemeFactory implements SchemeFactory {
      public GetProdInfo_argsTupleScheme getScheme() {
        return new GetProdInfo_argsTupleScheme();
      }
    }

    private static class GetProdInfo_argsTupleScheme extends TupleScheme<GetProdInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetProdInfo_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPid()) {
          oprot.writeI64(struct.pid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetProdInfo_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pid = iprot.readI64();
          struct.setPidIsSet(true);
        }
      }
    }

  }

  public static class GetProdInfo_result implements org.apache.thrift.TBase<GetProdInfo_result, GetProdInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetProdInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetProdInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetProdInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetProdInfo_resultTupleSchemeFactory());
    }

    public ProductInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProductInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetProdInfo_result.class, metaDataMap);
    }

    public GetProdInfo_result() {
    }

    public GetProdInfo_result(
      ProductInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetProdInfo_result(GetProdInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new ProductInfo(other.success);
      }
    }

    public GetProdInfo_result deepCopy() {
      return new GetProdInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ProductInfo getSuccess() {
      return this.success;
    }

    public GetProdInfo_result setSuccess(ProductInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ProductInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetProdInfo_result)
        return this.equals((GetProdInfo_result)that);
      return false;
    }

    public boolean equals(GetProdInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetProdInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetProdInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetProdInfo_resultStandardSchemeFactory implements SchemeFactory {
      public GetProdInfo_resultStandardScheme getScheme() {
        return new GetProdInfo_resultStandardScheme();
      }
    }

    private static class GetProdInfo_resultStandardScheme extends StandardScheme<GetProdInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetProdInfo_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ProductInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetProdInfo_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetProdInfo_resultTupleSchemeFactory implements SchemeFactory {
      public GetProdInfo_resultTupleScheme getScheme() {
        return new GetProdInfo_resultTupleScheme();
      }
    }

    private static class GetProdInfo_resultTupleScheme extends TupleScheme<GetProdInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetProdInfo_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetProdInfo_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ProductInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetMerchantInfoById_args implements org.apache.thrift.TBase<GetMerchantInfoById_args, GetMerchantInfoById_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetMerchantInfoById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetMerchantInfoById_args");

    private static final org.apache.thrift.protocol.TField MID_FIELD_DESC = new org.apache.thrift.protocol.TField("mid", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetMerchantInfoById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetMerchantInfoById_argsTupleSchemeFactory());
    }

    public long mid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MID((short)1, "mid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MID
            return MID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MID, new org.apache.thrift.meta_data.FieldMetaData("mid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetMerchantInfoById_args.class, metaDataMap);
    }

    public GetMerchantInfoById_args() {
    }

    public GetMerchantInfoById_args(
      long mid)
    {
      this();
      this.mid = mid;
      setMidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetMerchantInfoById_args(GetMerchantInfoById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.mid = other.mid;
    }

    public GetMerchantInfoById_args deepCopy() {
      return new GetMerchantInfoById_args(this);
    }

    @Override
    public void clear() {
      setMidIsSet(false);
      this.mid = 0;
    }

    public long getMid() {
      return this.mid;
    }

    public GetMerchantInfoById_args setMid(long mid) {
      this.mid = mid;
      setMidIsSet(true);
      return this;
    }

    public void unsetMid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MID_ISSET_ID);
    }

    /** Returns true if field mid is set (has been assigned a value) and false otherwise */
    public boolean isSetMid() {
      return EncodingUtils.testBit(__isset_bitfield, __MID_ISSET_ID);
    }

    public void setMidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MID:
        if (value == null) {
          unsetMid();
        } else {
          setMid((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MID:
        return getMid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MID:
        return isSetMid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetMerchantInfoById_args)
        return this.equals((GetMerchantInfoById_args)that);
      return false;
    }

    public boolean equals(GetMerchantInfoById_args that) {
      if (that == null)
        return false;

      boolean this_present_mid = true;
      boolean that_present_mid = true;
      if (this_present_mid || that_present_mid) {
        if (!(this_present_mid && that_present_mid))
          return false;
        if (this.mid != that.mid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_mid = true;
      list.add(present_mid);
      if (present_mid)
        list.add(mid);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetMerchantInfoById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMid()).compareTo(other.isSetMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mid, other.mid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetMerchantInfoById_args(");
      boolean first = true;

      sb.append("mid:");
      sb.append(this.mid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetMerchantInfoById_argsStandardSchemeFactory implements SchemeFactory {
      public GetMerchantInfoById_argsStandardScheme getScheme() {
        return new GetMerchantInfoById_argsStandardScheme();
      }
    }

    private static class GetMerchantInfoById_argsStandardScheme extends StandardScheme<GetMerchantInfoById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetMerchantInfoById_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.mid = iprot.readI64();
                struct.setMidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetMerchantInfoById_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MID_FIELD_DESC);
        oprot.writeI64(struct.mid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetMerchantInfoById_argsTupleSchemeFactory implements SchemeFactory {
      public GetMerchantInfoById_argsTupleScheme getScheme() {
        return new GetMerchantInfoById_argsTupleScheme();
      }
    }

    private static class GetMerchantInfoById_argsTupleScheme extends TupleScheme<GetMerchantInfoById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetMerchantInfoById_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMid()) {
          oprot.writeI64(struct.mid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetMerchantInfoById_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.mid = iprot.readI64();
          struct.setMidIsSet(true);
        }
      }
    }

  }

  public static class GetMerchantInfoById_result implements org.apache.thrift.TBase<GetMerchantInfoById_result, GetMerchantInfoById_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetMerchantInfoById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetMerchantInfoById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetMerchantInfoById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetMerchantInfoById_resultTupleSchemeFactory());
    }

    public MerchantInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MerchantInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetMerchantInfoById_result.class, metaDataMap);
    }

    public GetMerchantInfoById_result() {
    }

    public GetMerchantInfoById_result(
      MerchantInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetMerchantInfoById_result(GetMerchantInfoById_result other) {
      if (other.isSetSuccess()) {
        this.success = new MerchantInfo(other.success);
      }
    }

    public GetMerchantInfoById_result deepCopy() {
      return new GetMerchantInfoById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public MerchantInfo getSuccess() {
      return this.success;
    }

    public GetMerchantInfoById_result setSuccess(MerchantInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MerchantInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetMerchantInfoById_result)
        return this.equals((GetMerchantInfoById_result)that);
      return false;
    }

    public boolean equals(GetMerchantInfoById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetMerchantInfoById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetMerchantInfoById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetMerchantInfoById_resultStandardSchemeFactory implements SchemeFactory {
      public GetMerchantInfoById_resultStandardScheme getScheme() {
        return new GetMerchantInfoById_resultStandardScheme();
      }
    }

    private static class GetMerchantInfoById_resultStandardScheme extends StandardScheme<GetMerchantInfoById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetMerchantInfoById_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MerchantInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetMerchantInfoById_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetMerchantInfoById_resultTupleSchemeFactory implements SchemeFactory {
      public GetMerchantInfoById_resultTupleScheme getScheme() {
        return new GetMerchantInfoById_resultTupleScheme();
      }
    }

    private static class GetMerchantInfoById_resultTupleScheme extends TupleScheme<GetMerchantInfoById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetMerchantInfoById_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetMerchantInfoById_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MerchantInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class BM4ComparePatternTrigger_args implements org.apache.thrift.TBase<BM4ComparePatternTrigger_args, BM4ComparePatternTrigger_args._Fields>, java.io.Serializable, Cloneable, Comparable<BM4ComparePatternTrigger_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BM4ComparePatternTrigger_args");

    private static final org.apache.thrift.protocol.TField UID_LST_FIELD_DESC = new org.apache.thrift.protocol.TField("uidLst", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField PID_LST_FIELD_DESC = new org.apache.thrift.protocol.TField("pidLst", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField CID_LST_FIELD_DESC = new org.apache.thrift.protocol.TField("cidLst", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField COMP_LOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("compLoad", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new BM4ComparePatternTrigger_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new BM4ComparePatternTrigger_argsTupleSchemeFactory());
    }

    public List<Long> uidLst; // required
    public List<Long> pidLst; // required
    public List<Integer> cidLst; // required
    public int compLoad; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID_LST((short)1, "uidLst"),
      PID_LST((short)2, "pidLst"),
      CID_LST((short)3, "cidLst"),
      COMP_LOAD((short)4, "compLoad");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID_LST
            return UID_LST;
          case 2: // PID_LST
            return PID_LST;
          case 3: // CID_LST
            return CID_LST;
          case 4: // COMP_LOAD
            return COMP_LOAD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COMPLOAD_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID_LST, new org.apache.thrift.meta_data.FieldMetaData("uidLst", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.PID_LST, new org.apache.thrift.meta_data.FieldMetaData("pidLst", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.CID_LST, new org.apache.thrift.meta_data.FieldMetaData("cidLst", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.COMP_LOAD, new org.apache.thrift.meta_data.FieldMetaData("compLoad", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BM4ComparePatternTrigger_args.class, metaDataMap);
    }

    public BM4ComparePatternTrigger_args() {
    }

    public BM4ComparePatternTrigger_args(
      List<Long> uidLst,
      List<Long> pidLst,
      List<Integer> cidLst,
      int compLoad)
    {
      this();
      this.uidLst = uidLst;
      this.pidLst = pidLst;
      this.cidLst = cidLst;
      this.compLoad = compLoad;
      setCompLoadIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public BM4ComparePatternTrigger_args(BM4ComparePatternTrigger_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetUidLst()) {
        List<Long> __this__uidLst = new ArrayList<Long>(other.uidLst);
        this.uidLst = __this__uidLst;
      }
      if (other.isSetPidLst()) {
        List<Long> __this__pidLst = new ArrayList<Long>(other.pidLst);
        this.pidLst = __this__pidLst;
      }
      if (other.isSetCidLst()) {
        List<Integer> __this__cidLst = new ArrayList<Integer>(other.cidLst);
        this.cidLst = __this__cidLst;
      }
      this.compLoad = other.compLoad;
    }

    public BM4ComparePatternTrigger_args deepCopy() {
      return new BM4ComparePatternTrigger_args(this);
    }

    @Override
    public void clear() {
      this.uidLst = null;
      this.pidLst = null;
      this.cidLst = null;
      setCompLoadIsSet(false);
      this.compLoad = 0;
    }

    public int getUidLstSize() {
      return (this.uidLst == null) ? 0 : this.uidLst.size();
    }

    public java.util.Iterator<Long> getUidLstIterator() {
      return (this.uidLst == null) ? null : this.uidLst.iterator();
    }

    public void addToUidLst(long elem) {
      if (this.uidLst == null) {
        this.uidLst = new ArrayList<Long>();
      }
      this.uidLst.add(elem);
    }

    public List<Long> getUidLst() {
      return this.uidLst;
    }

    public BM4ComparePatternTrigger_args setUidLst(List<Long> uidLst) {
      this.uidLst = uidLst;
      return this;
    }

    public void unsetUidLst() {
      this.uidLst = null;
    }

    /** Returns true if field uidLst is set (has been assigned a value) and false otherwise */
    public boolean isSetUidLst() {
      return this.uidLst != null;
    }

    public void setUidLstIsSet(boolean value) {
      if (!value) {
        this.uidLst = null;
      }
    }

    public int getPidLstSize() {
      return (this.pidLst == null) ? 0 : this.pidLst.size();
    }

    public java.util.Iterator<Long> getPidLstIterator() {
      return (this.pidLst == null) ? null : this.pidLst.iterator();
    }

    public void addToPidLst(long elem) {
      if (this.pidLst == null) {
        this.pidLst = new ArrayList<Long>();
      }
      this.pidLst.add(elem);
    }

    public List<Long> getPidLst() {
      return this.pidLst;
    }

    public BM4ComparePatternTrigger_args setPidLst(List<Long> pidLst) {
      this.pidLst = pidLst;
      return this;
    }

    public void unsetPidLst() {
      this.pidLst = null;
    }

    /** Returns true if field pidLst is set (has been assigned a value) and false otherwise */
    public boolean isSetPidLst() {
      return this.pidLst != null;
    }

    public void setPidLstIsSet(boolean value) {
      if (!value) {
        this.pidLst = null;
      }
    }

    public int getCidLstSize() {
      return (this.cidLst == null) ? 0 : this.cidLst.size();
    }

    public java.util.Iterator<Integer> getCidLstIterator() {
      return (this.cidLst == null) ? null : this.cidLst.iterator();
    }

    public void addToCidLst(int elem) {
      if (this.cidLst == null) {
        this.cidLst = new ArrayList<Integer>();
      }
      this.cidLst.add(elem);
    }

    public List<Integer> getCidLst() {
      return this.cidLst;
    }

    public BM4ComparePatternTrigger_args setCidLst(List<Integer> cidLst) {
      this.cidLst = cidLst;
      return this;
    }

    public void unsetCidLst() {
      this.cidLst = null;
    }

    /** Returns true if field cidLst is set (has been assigned a value) and false otherwise */
    public boolean isSetCidLst() {
      return this.cidLst != null;
    }

    public void setCidLstIsSet(boolean value) {
      if (!value) {
        this.cidLst = null;
      }
    }

    public int getCompLoad() {
      return this.compLoad;
    }

    public BM4ComparePatternTrigger_args setCompLoad(int compLoad) {
      this.compLoad = compLoad;
      setCompLoadIsSet(true);
      return this;
    }

    public void unsetCompLoad() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPLOAD_ISSET_ID);
    }

    /** Returns true if field compLoad is set (has been assigned a value) and false otherwise */
    public boolean isSetCompLoad() {
      return EncodingUtils.testBit(__isset_bitfield, __COMPLOAD_ISSET_ID);
    }

    public void setCompLoadIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPLOAD_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID_LST:
        if (value == null) {
          unsetUidLst();
        } else {
          setUidLst((List<Long>)value);
        }
        break;

      case PID_LST:
        if (value == null) {
          unsetPidLst();
        } else {
          setPidLst((List<Long>)value);
        }
        break;

      case CID_LST:
        if (value == null) {
          unsetCidLst();
        } else {
          setCidLst((List<Integer>)value);
        }
        break;

      case COMP_LOAD:
        if (value == null) {
          unsetCompLoad();
        } else {
          setCompLoad((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID_LST:
        return getUidLst();

      case PID_LST:
        return getPidLst();

      case CID_LST:
        return getCidLst();

      case COMP_LOAD:
        return getCompLoad();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID_LST:
        return isSetUidLst();
      case PID_LST:
        return isSetPidLst();
      case CID_LST:
        return isSetCidLst();
      case COMP_LOAD:
        return isSetCompLoad();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof BM4ComparePatternTrigger_args)
        return this.equals((BM4ComparePatternTrigger_args)that);
      return false;
    }

    public boolean equals(BM4ComparePatternTrigger_args that) {
      if (that == null)
        return false;

      boolean this_present_uidLst = true && this.isSetUidLst();
      boolean that_present_uidLst = true && that.isSetUidLst();
      if (this_present_uidLst || that_present_uidLst) {
        if (!(this_present_uidLst && that_present_uidLst))
          return false;
        if (!this.uidLst.equals(that.uidLst))
          return false;
      }

      boolean this_present_pidLst = true && this.isSetPidLst();
      boolean that_present_pidLst = true && that.isSetPidLst();
      if (this_present_pidLst || that_present_pidLst) {
        if (!(this_present_pidLst && that_present_pidLst))
          return false;
        if (!this.pidLst.equals(that.pidLst))
          return false;
      }

      boolean this_present_cidLst = true && this.isSetCidLst();
      boolean that_present_cidLst = true && that.isSetCidLst();
      if (this_present_cidLst || that_present_cidLst) {
        if (!(this_present_cidLst && that_present_cidLst))
          return false;
        if (!this.cidLst.equals(that.cidLst))
          return false;
      }

      boolean this_present_compLoad = true;
      boolean that_present_compLoad = true;
      if (this_present_compLoad || that_present_compLoad) {
        if (!(this_present_compLoad && that_present_compLoad))
          return false;
        if (this.compLoad != that.compLoad)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_uidLst = true && (isSetUidLst());
      list.add(present_uidLst);
      if (present_uidLst)
        list.add(uidLst);

      boolean present_pidLst = true && (isSetPidLst());
      list.add(present_pidLst);
      if (present_pidLst)
        list.add(pidLst);

      boolean present_cidLst = true && (isSetCidLst());
      list.add(present_cidLst);
      if (present_cidLst)
        list.add(cidLst);

      boolean present_compLoad = true;
      list.add(present_compLoad);
      if (present_compLoad)
        list.add(compLoad);

      return list.hashCode();
    }

    @Override
    public int compareTo(BM4ComparePatternTrigger_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUidLst()).compareTo(other.isSetUidLst());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUidLst()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uidLst, other.uidLst);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPidLst()).compareTo(other.isSetPidLst());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPidLst()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pidLst, other.pidLst);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCidLst()).compareTo(other.isSetCidLst());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCidLst()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cidLst, other.cidLst);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCompLoad()).compareTo(other.isSetCompLoad());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompLoad()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compLoad, other.compLoad);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("BM4ComparePatternTrigger_args(");
      boolean first = true;

      sb.append("uidLst:");
      if (this.uidLst == null) {
        sb.append("null");
      } else {
        sb.append(this.uidLst);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pidLst:");
      if (this.pidLst == null) {
        sb.append("null");
      } else {
        sb.append(this.pidLst);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cidLst:");
      if (this.cidLst == null) {
        sb.append("null");
      } else {
        sb.append(this.cidLst);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("compLoad:");
      sb.append(this.compLoad);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class BM4ComparePatternTrigger_argsStandardSchemeFactory implements SchemeFactory {
      public BM4ComparePatternTrigger_argsStandardScheme getScheme() {
        return new BM4ComparePatternTrigger_argsStandardScheme();
      }
    }

    private static class BM4ComparePatternTrigger_argsStandardScheme extends StandardScheme<BM4ComparePatternTrigger_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, BM4ComparePatternTrigger_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID_LST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list58 = iprot.readListBegin();
                  struct.uidLst = new ArrayList<Long>(_list58.size);
                  long _elem59;
                  for (int _i60 = 0; _i60 < _list58.size; ++_i60)
                  {
                    _elem59 = iprot.readI64();
                    struct.uidLst.add(_elem59);
                  }
                  iprot.readListEnd();
                }
                struct.setUidLstIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PID_LST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list61 = iprot.readListBegin();
                  struct.pidLst = new ArrayList<Long>(_list61.size);
                  long _elem62;
                  for (int _i63 = 0; _i63 < _list61.size; ++_i63)
                  {
                    _elem62 = iprot.readI64();
                    struct.pidLst.add(_elem62);
                  }
                  iprot.readListEnd();
                }
                struct.setPidLstIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CID_LST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                  struct.cidLst = new ArrayList<Integer>(_list64.size);
                  int _elem65;
                  for (int _i66 = 0; _i66 < _list64.size; ++_i66)
                  {
                    _elem65 = iprot.readI32();
                    struct.cidLst.add(_elem65);
                  }
                  iprot.readListEnd();
                }
                struct.setCidLstIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // COMP_LOAD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.compLoad = iprot.readI32();
                struct.setCompLoadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, BM4ComparePatternTrigger_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uidLst != null) {
          oprot.writeFieldBegin(UID_LST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.uidLst.size()));
            for (long _iter67 : struct.uidLst)
            {
              oprot.writeI64(_iter67);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.pidLst != null) {
          oprot.writeFieldBegin(PID_LST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.pidLst.size()));
            for (long _iter68 : struct.pidLst)
            {
              oprot.writeI64(_iter68);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.cidLst != null) {
          oprot.writeFieldBegin(CID_LST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.cidLst.size()));
            for (int _iter69 : struct.cidLst)
            {
              oprot.writeI32(_iter69);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(COMP_LOAD_FIELD_DESC);
        oprot.writeI32(struct.compLoad);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class BM4ComparePatternTrigger_argsTupleSchemeFactory implements SchemeFactory {
      public BM4ComparePatternTrigger_argsTupleScheme getScheme() {
        return new BM4ComparePatternTrigger_argsTupleScheme();
      }
    }

    private static class BM4ComparePatternTrigger_argsTupleScheme extends TupleScheme<BM4ComparePatternTrigger_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, BM4ComparePatternTrigger_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUidLst()) {
          optionals.set(0);
        }
        if (struct.isSetPidLst()) {
          optionals.set(1);
        }
        if (struct.isSetCidLst()) {
          optionals.set(2);
        }
        if (struct.isSetCompLoad()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetUidLst()) {
          {
            oprot.writeI32(struct.uidLst.size());
            for (long _iter70 : struct.uidLst)
            {
              oprot.writeI64(_iter70);
            }
          }
        }
        if (struct.isSetPidLst()) {
          {
            oprot.writeI32(struct.pidLst.size());
            for (long _iter71 : struct.pidLst)
            {
              oprot.writeI64(_iter71);
            }
          }
        }
        if (struct.isSetCidLst()) {
          {
            oprot.writeI32(struct.cidLst.size());
            for (int _iter72 : struct.cidLst)
            {
              oprot.writeI32(_iter72);
            }
          }
        }
        if (struct.isSetCompLoad()) {
          oprot.writeI32(struct.compLoad);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, BM4ComparePatternTrigger_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list73 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.uidLst = new ArrayList<Long>(_list73.size);
            long _elem74;
            for (int _i75 = 0; _i75 < _list73.size; ++_i75)
            {
              _elem74 = iprot.readI64();
              struct.uidLst.add(_elem74);
            }
          }
          struct.setUidLstIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list76 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.pidLst = new ArrayList<Long>(_list76.size);
            long _elem77;
            for (int _i78 = 0; _i78 < _list76.size; ++_i78)
            {
              _elem77 = iprot.readI64();
              struct.pidLst.add(_elem77);
            }
          }
          struct.setPidLstIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list79 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.cidLst = new ArrayList<Integer>(_list79.size);
            int _elem80;
            for (int _i81 = 0; _i81 < _list79.size; ++_i81)
            {
              _elem80 = iprot.readI32();
              struct.cidLst.add(_elem80);
            }
          }
          struct.setCidLstIsSet(true);
        }
        if (incoming.get(3)) {
          struct.compLoad = iprot.readI32();
          struct.setCompLoadIsSet(true);
        }
      }
    }

  }

  public static class BM4ComparePatternTrigger_result implements org.apache.thrift.TBase<BM4ComparePatternTrigger_result, BM4ComparePatternTrigger_result._Fields>, java.io.Serializable, Cloneable, Comparable<BM4ComparePatternTrigger_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BM4ComparePatternTrigger_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new BM4ComparePatternTrigger_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new BM4ComparePatternTrigger_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BM4ComparePatternTrigger_result.class, metaDataMap);
    }

    public BM4ComparePatternTrigger_result() {
    }

    public BM4ComparePatternTrigger_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public BM4ComparePatternTrigger_result(BM4ComparePatternTrigger_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public BM4ComparePatternTrigger_result deepCopy() {
      return new BM4ComparePatternTrigger_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public BM4ComparePatternTrigger_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof BM4ComparePatternTrigger_result)
        return this.equals((BM4ComparePatternTrigger_result)that);
      return false;
    }

    public boolean equals(BM4ComparePatternTrigger_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(BM4ComparePatternTrigger_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("BM4ComparePatternTrigger_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class BM4ComparePatternTrigger_resultStandardSchemeFactory implements SchemeFactory {
      public BM4ComparePatternTrigger_resultStandardScheme getScheme() {
        return new BM4ComparePatternTrigger_resultStandardScheme();
      }
    }

    private static class BM4ComparePatternTrigger_resultStandardScheme extends StandardScheme<BM4ComparePatternTrigger_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, BM4ComparePatternTrigger_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, BM4ComparePatternTrigger_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class BM4ComparePatternTrigger_resultTupleSchemeFactory implements SchemeFactory {
      public BM4ComparePatternTrigger_resultTupleScheme getScheme() {
        return new BM4ComparePatternTrigger_resultTupleScheme();
      }
    }

    private static class BM4ComparePatternTrigger_resultTupleScheme extends TupleScheme<BM4ComparePatternTrigger_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, BM4ComparePatternTrigger_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, BM4ComparePatternTrigger_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class BM5CompareTransferDataSize_args implements org.apache.thrift.TBase<BM5CompareTransferDataSize_args, BM5CompareTransferDataSize_args._Fields>, java.io.Serializable, Cloneable, Comparable<BM5CompareTransferDataSize_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BM5CompareTransferDataSize_args");

    private static final org.apache.thrift.protocol.TField DATA_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("dataSize", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new BM5CompareTransferDataSize_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new BM5CompareTransferDataSize_argsTupleSchemeFactory());
    }

    public int dataSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATA_SIZE((short)1, "dataSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATA_SIZE
            return DATA_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DATASIZE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATA_SIZE, new org.apache.thrift.meta_data.FieldMetaData("dataSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BM5CompareTransferDataSize_args.class, metaDataMap);
    }

    public BM5CompareTransferDataSize_args() {
    }

    public BM5CompareTransferDataSize_args(
      int dataSize)
    {
      this();
      this.dataSize = dataSize;
      setDataSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public BM5CompareTransferDataSize_args(BM5CompareTransferDataSize_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.dataSize = other.dataSize;
    }

    public BM5CompareTransferDataSize_args deepCopy() {
      return new BM5CompareTransferDataSize_args(this);
    }

    @Override
    public void clear() {
      setDataSizeIsSet(false);
      this.dataSize = 0;
    }

    public int getDataSize() {
      return this.dataSize;
    }

    public BM5CompareTransferDataSize_args setDataSize(int dataSize) {
      this.dataSize = dataSize;
      setDataSizeIsSet(true);
      return this;
    }

    public void unsetDataSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATASIZE_ISSET_ID);
    }

    /** Returns true if field dataSize is set (has been assigned a value) and false otherwise */
    public boolean isSetDataSize() {
      return EncodingUtils.testBit(__isset_bitfield, __DATASIZE_ISSET_ID);
    }

    public void setDataSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATASIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATA_SIZE:
        if (value == null) {
          unsetDataSize();
        } else {
          setDataSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATA_SIZE:
        return getDataSize();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATA_SIZE:
        return isSetDataSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof BM5CompareTransferDataSize_args)
        return this.equals((BM5CompareTransferDataSize_args)that);
      return false;
    }

    public boolean equals(BM5CompareTransferDataSize_args that) {
      if (that == null)
        return false;

      boolean this_present_dataSize = true;
      boolean that_present_dataSize = true;
      if (this_present_dataSize || that_present_dataSize) {
        if (!(this_present_dataSize && that_present_dataSize))
          return false;
        if (this.dataSize != that.dataSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dataSize = true;
      list.add(present_dataSize);
      if (present_dataSize)
        list.add(dataSize);

      return list.hashCode();
    }

    @Override
    public int compareTo(BM5CompareTransferDataSize_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDataSize()).compareTo(other.isSetDataSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataSize, other.dataSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("BM5CompareTransferDataSize_args(");
      boolean first = true;

      sb.append("dataSize:");
      sb.append(this.dataSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class BM5CompareTransferDataSize_argsStandardSchemeFactory implements SchemeFactory {
      public BM5CompareTransferDataSize_argsStandardScheme getScheme() {
        return new BM5CompareTransferDataSize_argsStandardScheme();
      }
    }

    private static class BM5CompareTransferDataSize_argsStandardScheme extends StandardScheme<BM5CompareTransferDataSize_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, BM5CompareTransferDataSize_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATA_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.dataSize = iprot.readI32();
                struct.setDataSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, BM5CompareTransferDataSize_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DATA_SIZE_FIELD_DESC);
        oprot.writeI32(struct.dataSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class BM5CompareTransferDataSize_argsTupleSchemeFactory implements SchemeFactory {
      public BM5CompareTransferDataSize_argsTupleScheme getScheme() {
        return new BM5CompareTransferDataSize_argsTupleScheme();
      }
    }

    private static class BM5CompareTransferDataSize_argsTupleScheme extends TupleScheme<BM5CompareTransferDataSize_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, BM5CompareTransferDataSize_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDataSize()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDataSize()) {
          oprot.writeI32(struct.dataSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, BM5CompareTransferDataSize_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.dataSize = iprot.readI32();
          struct.setDataSizeIsSet(true);
        }
      }
    }

  }

  public static class BM5CompareTransferDataSize_result implements org.apache.thrift.TBase<BM5CompareTransferDataSize_result, BM5CompareTransferDataSize_result._Fields>, java.io.Serializable, Cloneable, Comparable<BM5CompareTransferDataSize_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BM5CompareTransferDataSize_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new BM5CompareTransferDataSize_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new BM5CompareTransferDataSize_resultTupleSchemeFactory());
    }

    public CommentInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CommentInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BM5CompareTransferDataSize_result.class, metaDataMap);
    }

    public BM5CompareTransferDataSize_result() {
    }

    public BM5CompareTransferDataSize_result(
      CommentInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public BM5CompareTransferDataSize_result(BM5CompareTransferDataSize_result other) {
      if (other.isSetSuccess()) {
        this.success = new CommentInfo(other.success);
      }
    }

    public BM5CompareTransferDataSize_result deepCopy() {
      return new BM5CompareTransferDataSize_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public CommentInfo getSuccess() {
      return this.success;
    }

    public BM5CompareTransferDataSize_result setSuccess(CommentInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CommentInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof BM5CompareTransferDataSize_result)
        return this.equals((BM5CompareTransferDataSize_result)that);
      return false;
    }

    public boolean equals(BM5CompareTransferDataSize_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(BM5CompareTransferDataSize_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("BM5CompareTransferDataSize_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class BM5CompareTransferDataSize_resultStandardSchemeFactory implements SchemeFactory {
      public BM5CompareTransferDataSize_resultStandardScheme getScheme() {
        return new BM5CompareTransferDataSize_resultStandardScheme();
      }
    }

    private static class BM5CompareTransferDataSize_resultStandardScheme extends StandardScheme<BM5CompareTransferDataSize_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, BM5CompareTransferDataSize_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CommentInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, BM5CompareTransferDataSize_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class BM5CompareTransferDataSize_resultTupleSchemeFactory implements SchemeFactory {
      public BM5CompareTransferDataSize_resultTupleScheme getScheme() {
        return new BM5CompareTransferDataSize_resultTupleScheme();
      }
    }

    private static class BM5CompareTransferDataSize_resultTupleScheme extends TupleScheme<BM5CompareTransferDataSize_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, BM5CompareTransferDataSize_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, BM5CompareTransferDataSize_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CommentInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class BM6CompareMemBindWidth_args implements org.apache.thrift.TBase<BM6CompareMemBindWidth_args, BM6CompareMemBindWidth_args._Fields>, java.io.Serializable, Cloneable, Comparable<BM6CompareMemBindWidth_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BM6CompareMemBindWidth_args");

    private static final org.apache.thrift.protocol.TField DATA_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("dataSize", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new BM6CompareMemBindWidth_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new BM6CompareMemBindWidth_argsTupleSchemeFactory());
    }

    public int dataSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATA_SIZE((short)1, "dataSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATA_SIZE
            return DATA_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DATASIZE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATA_SIZE, new org.apache.thrift.meta_data.FieldMetaData("dataSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BM6CompareMemBindWidth_args.class, metaDataMap);
    }

    public BM6CompareMemBindWidth_args() {
    }

    public BM6CompareMemBindWidth_args(
      int dataSize)
    {
      this();
      this.dataSize = dataSize;
      setDataSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public BM6CompareMemBindWidth_args(BM6CompareMemBindWidth_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.dataSize = other.dataSize;
    }

    public BM6CompareMemBindWidth_args deepCopy() {
      return new BM6CompareMemBindWidth_args(this);
    }

    @Override
    public void clear() {
      setDataSizeIsSet(false);
      this.dataSize = 0;
    }

    public int getDataSize() {
      return this.dataSize;
    }

    public BM6CompareMemBindWidth_args setDataSize(int dataSize) {
      this.dataSize = dataSize;
      setDataSizeIsSet(true);
      return this;
    }

    public void unsetDataSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATASIZE_ISSET_ID);
    }

    /** Returns true if field dataSize is set (has been assigned a value) and false otherwise */
    public boolean isSetDataSize() {
      return EncodingUtils.testBit(__isset_bitfield, __DATASIZE_ISSET_ID);
    }

    public void setDataSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATASIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATA_SIZE:
        if (value == null) {
          unsetDataSize();
        } else {
          setDataSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATA_SIZE:
        return getDataSize();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATA_SIZE:
        return isSetDataSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof BM6CompareMemBindWidth_args)
        return this.equals((BM6CompareMemBindWidth_args)that);
      return false;
    }

    public boolean equals(BM6CompareMemBindWidth_args that) {
      if (that == null)
        return false;

      boolean this_present_dataSize = true;
      boolean that_present_dataSize = true;
      if (this_present_dataSize || that_present_dataSize) {
        if (!(this_present_dataSize && that_present_dataSize))
          return false;
        if (this.dataSize != that.dataSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dataSize = true;
      list.add(present_dataSize);
      if (present_dataSize)
        list.add(dataSize);

      return list.hashCode();
    }

    @Override
    public int compareTo(BM6CompareMemBindWidth_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDataSize()).compareTo(other.isSetDataSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataSize, other.dataSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("BM6CompareMemBindWidth_args(");
      boolean first = true;

      sb.append("dataSize:");
      sb.append(this.dataSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class BM6CompareMemBindWidth_argsStandardSchemeFactory implements SchemeFactory {
      public BM6CompareMemBindWidth_argsStandardScheme getScheme() {
        return new BM6CompareMemBindWidth_argsStandardScheme();
      }
    }

    private static class BM6CompareMemBindWidth_argsStandardScheme extends StandardScheme<BM6CompareMemBindWidth_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, BM6CompareMemBindWidth_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATA_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.dataSize = iprot.readI32();
                struct.setDataSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, BM6CompareMemBindWidth_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DATA_SIZE_FIELD_DESC);
        oprot.writeI32(struct.dataSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class BM6CompareMemBindWidth_argsTupleSchemeFactory implements SchemeFactory {
      public BM6CompareMemBindWidth_argsTupleScheme getScheme() {
        return new BM6CompareMemBindWidth_argsTupleScheme();
      }
    }

    private static class BM6CompareMemBindWidth_argsTupleScheme extends TupleScheme<BM6CompareMemBindWidth_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, BM6CompareMemBindWidth_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDataSize()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDataSize()) {
          oprot.writeI32(struct.dataSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, BM6CompareMemBindWidth_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.dataSize = iprot.readI32();
          struct.setDataSizeIsSet(true);
        }
      }
    }

  }

  public static class BM6CompareMemBindWidth_result implements org.apache.thrift.TBase<BM6CompareMemBindWidth_result, BM6CompareMemBindWidth_result._Fields>, java.io.Serializable, Cloneable, Comparable<BM6CompareMemBindWidth_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BM6CompareMemBindWidth_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new BM6CompareMemBindWidth_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new BM6CompareMemBindWidth_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BM6CompareMemBindWidth_result.class, metaDataMap);
    }

    public BM6CompareMemBindWidth_result() {
    }

    public BM6CompareMemBindWidth_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public BM6CompareMemBindWidth_result(BM6CompareMemBindWidth_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public BM6CompareMemBindWidth_result deepCopy() {
      return new BM6CompareMemBindWidth_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public BM6CompareMemBindWidth_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof BM6CompareMemBindWidth_result)
        return this.equals((BM6CompareMemBindWidth_result)that);
      return false;
    }

    public boolean equals(BM6CompareMemBindWidth_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(BM6CompareMemBindWidth_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("BM6CompareMemBindWidth_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class BM6CompareMemBindWidth_resultStandardSchemeFactory implements SchemeFactory {
      public BM6CompareMemBindWidth_resultStandardScheme getScheme() {
        return new BM6CompareMemBindWidth_resultStandardScheme();
      }
    }

    private static class BM6CompareMemBindWidth_resultStandardScheme extends StandardScheme<BM6CompareMemBindWidth_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, BM6CompareMemBindWidth_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, BM6CompareMemBindWidth_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class BM6CompareMemBindWidth_resultTupleSchemeFactory implements SchemeFactory {
      public BM6CompareMemBindWidth_resultTupleScheme getScheme() {
        return new BM6CompareMemBindWidth_resultTupleScheme();
      }
    }

    private static class BM6CompareMemBindWidth_resultTupleScheme extends TupleScheme<BM6CompareMemBindWidth_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, BM6CompareMemBindWidth_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, BM6CompareMemBindWidth_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetComments_args implements org.apache.thrift.TBase<GetComments_args, GetComments_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetComments_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetComments_args");

    private static final org.apache.thrift.protocol.TField PROD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("prodId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField COMT_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("comtNum", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetComments_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetComments_argsTupleSchemeFactory());
    }

    public long prodId; // required
    public int comtNum; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROD_ID((short)1, "prodId"),
      COMT_NUM((short)2, "comtNum");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROD_ID
            return PROD_ID;
          case 2: // COMT_NUM
            return COMT_NUM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PRODID_ISSET_ID = 0;
    private static final int __COMTNUM_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROD_ID, new org.apache.thrift.meta_data.FieldMetaData("prodId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.COMT_NUM, new org.apache.thrift.meta_data.FieldMetaData("comtNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetComments_args.class, metaDataMap);
    }

    public GetComments_args() {
    }

    public GetComments_args(
      long prodId,
      int comtNum)
    {
      this();
      this.prodId = prodId;
      setProdIdIsSet(true);
      this.comtNum = comtNum;
      setComtNumIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetComments_args(GetComments_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.prodId = other.prodId;
      this.comtNum = other.comtNum;
    }

    public GetComments_args deepCopy() {
      return new GetComments_args(this);
    }

    @Override
    public void clear() {
      setProdIdIsSet(false);
      this.prodId = 0;
      setComtNumIsSet(false);
      this.comtNum = 0;
    }

    public long getProdId() {
      return this.prodId;
    }

    public GetComments_args setProdId(long prodId) {
      this.prodId = prodId;
      setProdIdIsSet(true);
      return this;
    }

    public void unsetProdId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODID_ISSET_ID);
    }

    /** Returns true if field prodId is set (has been assigned a value) and false otherwise */
    public boolean isSetProdId() {
      return EncodingUtils.testBit(__isset_bitfield, __PRODID_ISSET_ID);
    }

    public void setProdIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODID_ISSET_ID, value);
    }

    public int getComtNum() {
      return this.comtNum;
    }

    public GetComments_args setComtNum(int comtNum) {
      this.comtNum = comtNum;
      setComtNumIsSet(true);
      return this;
    }

    public void unsetComtNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMTNUM_ISSET_ID);
    }

    /** Returns true if field comtNum is set (has been assigned a value) and false otherwise */
    public boolean isSetComtNum() {
      return EncodingUtils.testBit(__isset_bitfield, __COMTNUM_ISSET_ID);
    }

    public void setComtNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMTNUM_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROD_ID:
        if (value == null) {
          unsetProdId();
        } else {
          setProdId((Long)value);
        }
        break;

      case COMT_NUM:
        if (value == null) {
          unsetComtNum();
        } else {
          setComtNum((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROD_ID:
        return getProdId();

      case COMT_NUM:
        return getComtNum();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROD_ID:
        return isSetProdId();
      case COMT_NUM:
        return isSetComtNum();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetComments_args)
        return this.equals((GetComments_args)that);
      return false;
    }

    public boolean equals(GetComments_args that) {
      if (that == null)
        return false;

      boolean this_present_prodId = true;
      boolean that_present_prodId = true;
      if (this_present_prodId || that_present_prodId) {
        if (!(this_present_prodId && that_present_prodId))
          return false;
        if (this.prodId != that.prodId)
          return false;
      }

      boolean this_present_comtNum = true;
      boolean that_present_comtNum = true;
      if (this_present_comtNum || that_present_comtNum) {
        if (!(this_present_comtNum && that_present_comtNum))
          return false;
        if (this.comtNum != that.comtNum)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_prodId = true;
      list.add(present_prodId);
      if (present_prodId)
        list.add(prodId);

      boolean present_comtNum = true;
      list.add(present_comtNum);
      if (present_comtNum)
        list.add(comtNum);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetComments_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProdId()).compareTo(other.isSetProdId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProdId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prodId, other.prodId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetComtNum()).compareTo(other.isSetComtNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetComtNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comtNum, other.comtNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetComments_args(");
      boolean first = true;

      sb.append("prodId:");
      sb.append(this.prodId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("comtNum:");
      sb.append(this.comtNum);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetComments_argsStandardSchemeFactory implements SchemeFactory {
      public GetComments_argsStandardScheme getScheme() {
        return new GetComments_argsStandardScheme();
      }
    }

    private static class GetComments_argsStandardScheme extends StandardScheme<GetComments_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetComments_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.prodId = iprot.readI64();
                struct.setProdIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMT_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.comtNum = iprot.readI32();
                struct.setComtNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetComments_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROD_ID_FIELD_DESC);
        oprot.writeI64(struct.prodId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COMT_NUM_FIELD_DESC);
        oprot.writeI32(struct.comtNum);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetComments_argsTupleSchemeFactory implements SchemeFactory {
      public GetComments_argsTupleScheme getScheme() {
        return new GetComments_argsTupleScheme();
      }
    }

    private static class GetComments_argsTupleScheme extends TupleScheme<GetComments_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetComments_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProdId()) {
          optionals.set(0);
        }
        if (struct.isSetComtNum()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProdId()) {
          oprot.writeI64(struct.prodId);
        }
        if (struct.isSetComtNum()) {
          oprot.writeI32(struct.comtNum);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetComments_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.prodId = iprot.readI64();
          struct.setProdIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.comtNum = iprot.readI32();
          struct.setComtNumIsSet(true);
        }
      }
    }

  }

  public static class GetComments_result implements org.apache.thrift.TBase<GetComments_result, GetComments_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetComments_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetComments_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetComments_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetComments_resultTupleSchemeFactory());
    }

    public List<CommentInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CommentInfo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetComments_result.class, metaDataMap);
    }

    public GetComments_result() {
    }

    public GetComments_result(
      List<CommentInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetComments_result(GetComments_result other) {
      if (other.isSetSuccess()) {
        List<CommentInfo> __this__success = new ArrayList<CommentInfo>(other.success.size());
        for (CommentInfo other_element : other.success) {
          __this__success.add(new CommentInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    public GetComments_result deepCopy() {
      return new GetComments_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<CommentInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(CommentInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<CommentInfo>();
      }
      this.success.add(elem);
    }

    public List<CommentInfo> getSuccess() {
      return this.success;
    }

    public GetComments_result setSuccess(List<CommentInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<CommentInfo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetComments_result)
        return this.equals((GetComments_result)that);
      return false;
    }

    public boolean equals(GetComments_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetComments_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetComments_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetComments_resultStandardSchemeFactory implements SchemeFactory {
      public GetComments_resultStandardScheme getScheme() {
        return new GetComments_resultStandardScheme();
      }
    }

    private static class GetComments_resultStandardScheme extends StandardScheme<GetComments_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetComments_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list82 = iprot.readListBegin();
                  struct.success = new ArrayList<CommentInfo>(_list82.size);
                  CommentInfo _elem83;
                  for (int _i84 = 0; _i84 < _list82.size; ++_i84)
                  {
                    _elem83 = new CommentInfo();
                    _elem83.read(iprot);
                    struct.success.add(_elem83);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetComments_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (CommentInfo _iter85 : struct.success)
            {
              _iter85.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetComments_resultTupleSchemeFactory implements SchemeFactory {
      public GetComments_resultTupleScheme getScheme() {
        return new GetComments_resultTupleScheme();
      }
    }

    private static class GetComments_resultTupleScheme extends TupleScheme<GetComments_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetComments_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (CommentInfo _iter86 : struct.success)
            {
              _iter86.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetComments_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list87 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<CommentInfo>(_list87.size);
            CommentInfo _elem88;
            for (int _i89 = 0; _i89 < _list87.size; ++_i89)
            {
              _elem88 = new CommentInfo();
              _elem88.read(iprot);
              struct.success.add(_elem88);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetMerchantInfoByProd_args implements org.apache.thrift.TBase<GetMerchantInfoByProd_args, GetMerchantInfoByProd_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetMerchantInfoByProd_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetMerchantInfoByProd_args");

    private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetMerchantInfoByProd_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetMerchantInfoByProd_argsTupleSchemeFactory());
    }

    public long pid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PID((short)1, "pid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PID
            return PID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetMerchantInfoByProd_args.class, metaDataMap);
    }

    public GetMerchantInfoByProd_args() {
    }

    public GetMerchantInfoByProd_args(
      long pid)
    {
      this();
      this.pid = pid;
      setPidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetMerchantInfoByProd_args(GetMerchantInfoByProd_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pid = other.pid;
    }

    public GetMerchantInfoByProd_args deepCopy() {
      return new GetMerchantInfoByProd_args(this);
    }

    @Override
    public void clear() {
      setPidIsSet(false);
      this.pid = 0;
    }

    public long getPid() {
      return this.pid;
    }

    public GetMerchantInfoByProd_args setPid(long pid) {
      this.pid = pid;
      setPidIsSet(true);
      return this;
    }

    public void unsetPid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
    }

    /** Returns true if field pid is set (has been assigned a value) and false otherwise */
    public boolean isSetPid() {
      return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
    }

    public void setPidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PID:
        if (value == null) {
          unsetPid();
        } else {
          setPid((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PID:
        return getPid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PID:
        return isSetPid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetMerchantInfoByProd_args)
        return this.equals((GetMerchantInfoByProd_args)that);
      return false;
    }

    public boolean equals(GetMerchantInfoByProd_args that) {
      if (that == null)
        return false;

      boolean this_present_pid = true;
      boolean that_present_pid = true;
      if (this_present_pid || that_present_pid) {
        if (!(this_present_pid && that_present_pid))
          return false;
        if (this.pid != that.pid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pid = true;
      list.add(present_pid);
      if (present_pid)
        list.add(pid);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetMerchantInfoByProd_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetMerchantInfoByProd_args(");
      boolean first = true;

      sb.append("pid:");
      sb.append(this.pid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetMerchantInfoByProd_argsStandardSchemeFactory implements SchemeFactory {
      public GetMerchantInfoByProd_argsStandardScheme getScheme() {
        return new GetMerchantInfoByProd_argsStandardScheme();
      }
    }

    private static class GetMerchantInfoByProd_argsStandardScheme extends StandardScheme<GetMerchantInfoByProd_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetMerchantInfoByProd_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.pid = iprot.readI64();
                struct.setPidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetMerchantInfoByProd_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeI64(struct.pid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetMerchantInfoByProd_argsTupleSchemeFactory implements SchemeFactory {
      public GetMerchantInfoByProd_argsTupleScheme getScheme() {
        return new GetMerchantInfoByProd_argsTupleScheme();
      }
    }

    private static class GetMerchantInfoByProd_argsTupleScheme extends TupleScheme<GetMerchantInfoByProd_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetMerchantInfoByProd_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPid()) {
          oprot.writeI64(struct.pid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetMerchantInfoByProd_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pid = iprot.readI64();
          struct.setPidIsSet(true);
        }
      }
    }

  }

  public static class GetMerchantInfoByProd_result implements org.apache.thrift.TBase<GetMerchantInfoByProd_result, GetMerchantInfoByProd_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetMerchantInfoByProd_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetMerchantInfoByProd_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetMerchantInfoByProd_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetMerchantInfoByProd_resultTupleSchemeFactory());
    }

    public MerchantInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MerchantInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetMerchantInfoByProd_result.class, metaDataMap);
    }

    public GetMerchantInfoByProd_result() {
    }

    public GetMerchantInfoByProd_result(
      MerchantInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetMerchantInfoByProd_result(GetMerchantInfoByProd_result other) {
      if (other.isSetSuccess()) {
        this.success = new MerchantInfo(other.success);
      }
    }

    public GetMerchantInfoByProd_result deepCopy() {
      return new GetMerchantInfoByProd_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public MerchantInfo getSuccess() {
      return this.success;
    }

    public GetMerchantInfoByProd_result setSuccess(MerchantInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MerchantInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetMerchantInfoByProd_result)
        return this.equals((GetMerchantInfoByProd_result)that);
      return false;
    }

    public boolean equals(GetMerchantInfoByProd_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetMerchantInfoByProd_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetMerchantInfoByProd_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetMerchantInfoByProd_resultStandardSchemeFactory implements SchemeFactory {
      public GetMerchantInfoByProd_resultStandardScheme getScheme() {
        return new GetMerchantInfoByProd_resultStandardScheme();
      }
    }

    private static class GetMerchantInfoByProd_resultStandardScheme extends StandardScheme<GetMerchantInfoByProd_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetMerchantInfoByProd_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MerchantInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetMerchantInfoByProd_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetMerchantInfoByProd_resultTupleSchemeFactory implements SchemeFactory {
      public GetMerchantInfoByProd_resultTupleScheme getScheme() {
        return new GetMerchantInfoByProd_resultTupleScheme();
      }
    }

    private static class GetMerchantInfoByProd_resultTupleScheme extends TupleScheme<GetMerchantInfoByProd_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetMerchantInfoByProd_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetMerchantInfoByProd_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MerchantInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
