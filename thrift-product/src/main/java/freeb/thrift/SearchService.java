/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package freeb.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2022-01-21")
public class SearchService {

  public interface Iface {

    public List<Long> GetRecommendByProdName(long userId, String words, SearchType type, SearchOrder order) throws TException;

    public List<Long> IdealResEfficiencyTest(int totalComputationLoad, int threadName) throws TException;

    public boolean BM2CompareParallelEfficiency(int totalComputationLoad, int threadNum, int type) throws TException;

    public boolean OfflineUserTagComputation(List<Long> uidLst) throws TException;

  }

  public interface AsyncIface {

    public void GetRecommendByProdName(long userId, String words, SearchType type, SearchOrder order, AsyncMethodCallback resultHandler) throws TException;

    public void IdealResEfficiencyTest(int totalComputationLoad, int threadName, AsyncMethodCallback resultHandler) throws TException;

    public void BM2CompareParallelEfficiency(int totalComputationLoad, int threadNum, int type, AsyncMethodCallback resultHandler) throws TException;

    public void OfflineUserTagComputation(List<Long> uidLst, AsyncMethodCallback resultHandler) throws TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<Long> GetRecommendByProdName(long userId, String words, SearchType type, SearchOrder order) throws TException
    {
      send_GetRecommendByProdName(userId, words, type, order);
      return recv_GetRecommendByProdName();
    }

    public void send_GetRecommendByProdName(long userId, String words, SearchType type, SearchOrder order) throws TException
    {
      GetRecommendByProdName_args args = new GetRecommendByProdName_args();
      args.setUserId(userId);
      args.setWords(words);
      args.setType(type);
      args.setOrder(order);
      sendBase("GetRecommendByProdName", args);
    }

    public List<Long> recv_GetRecommendByProdName() throws TException
    {
      GetRecommendByProdName_result result = new GetRecommendByProdName_result();
      receiveBase(result, "GetRecommendByProdName");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetRecommendByProdName failed: unknown result");
    }

    public List<Long> IdealResEfficiencyTest(int totalComputationLoad, int threadName) throws TException
    {
      send_IdealResEfficiencyTest(totalComputationLoad, threadName);
      return recv_IdealResEfficiencyTest();
    }

    public void send_IdealResEfficiencyTest(int totalComputationLoad, int threadName) throws TException
    {
      IdealResEfficiencyTest_args args = new IdealResEfficiencyTest_args();
      args.setTotalComputationLoad(totalComputationLoad);
      args.setThreadName(threadName);
      sendBase("IdealResEfficiencyTest", args);
    }

    public List<Long> recv_IdealResEfficiencyTest() throws TException
    {
      IdealResEfficiencyTest_result result = new IdealResEfficiencyTest_result();
      receiveBase(result, "IdealResEfficiencyTest");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "IdealResEfficiencyTest failed: unknown result");
    }

    public boolean BM2CompareParallelEfficiency(int totalComputationLoad, int threadNum, int type) throws TException
    {
      send_BM2CompareParallelEfficiency(totalComputationLoad, threadNum, type);
      return recv_BM2CompareParallelEfficiency();
    }

    public void send_BM2CompareParallelEfficiency(int totalComputationLoad, int threadNum, int type) throws TException
    {
      BM2CompareParallelEfficiency_args args = new BM2CompareParallelEfficiency_args();
      args.setTotalComputationLoad(totalComputationLoad);
      args.setThreadNum(threadNum);
      args.setType(type);
      sendBase("BM2CompareParallelEfficiency", args);
    }

    public boolean recv_BM2CompareParallelEfficiency() throws TException
    {
      BM2CompareParallelEfficiency_result result = new BM2CompareParallelEfficiency_result();
      receiveBase(result, "BM2CompareParallelEfficiency");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "BM2CompareParallelEfficiency failed: unknown result");
    }

    public boolean OfflineUserTagComputation(List<Long> uidLst) throws TException
    {
      send_OfflineUserTagComputation(uidLst);
      return recv_OfflineUserTagComputation();
    }

    public void send_OfflineUserTagComputation(List<Long> uidLst) throws TException
    {
      OfflineUserTagComputation_args args = new OfflineUserTagComputation_args();
      args.setUidLst(uidLst);
      sendBase("OfflineUserTagComputation", args);
    }

    public boolean recv_OfflineUserTagComputation() throws TException
    {
      OfflineUserTagComputation_result result = new OfflineUserTagComputation_result();
      receiveBase(result, "OfflineUserTagComputation");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "OfflineUserTagComputation failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void GetRecommendByProdName(long userId, String words, SearchType type, SearchOrder order, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      GetRecommendByProdName_call method_call = new GetRecommendByProdName_call(userId, words, type, order, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetRecommendByProdName_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long userId;
      private String words;
      private SearchType type;
      private SearchOrder order;
      public GetRecommendByProdName_call(long userId, String words, SearchType type, SearchOrder order, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.words = words;
        this.type = type;
        this.order = order;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetRecommendByProdName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetRecommendByProdName_args args = new GetRecommendByProdName_args();
        args.setUserId(userId);
        args.setWords(words);
        args.setType(type);
        args.setOrder(order);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetRecommendByProdName();
      }
    }

    public void IdealResEfficiencyTest(int totalComputationLoad, int threadName, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      IdealResEfficiencyTest_call method_call = new IdealResEfficiencyTest_call(totalComputationLoad, threadName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class IdealResEfficiencyTest_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int totalComputationLoad;
      private int threadName;
      public IdealResEfficiencyTest_call(int totalComputationLoad, int threadName, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.totalComputationLoad = totalComputationLoad;
        this.threadName = threadName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("IdealResEfficiencyTest", org.apache.thrift.protocol.TMessageType.CALL, 0));
        IdealResEfficiencyTest_args args = new IdealResEfficiencyTest_args();
        args.setTotalComputationLoad(totalComputationLoad);
        args.setThreadName(threadName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_IdealResEfficiencyTest();
      }
    }

    public void BM2CompareParallelEfficiency(int totalComputationLoad, int threadNum, int type, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      BM2CompareParallelEfficiency_call method_call = new BM2CompareParallelEfficiency_call(totalComputationLoad, threadNum, type, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class BM2CompareParallelEfficiency_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int totalComputationLoad;
      private int threadNum;
      private int type;
      public BM2CompareParallelEfficiency_call(int totalComputationLoad, int threadNum, int type, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.totalComputationLoad = totalComputationLoad;
        this.threadNum = threadNum;
        this.type = type;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("BM2CompareParallelEfficiency", org.apache.thrift.protocol.TMessageType.CALL, 0));
        BM2CompareParallelEfficiency_args args = new BM2CompareParallelEfficiency_args();
        args.setTotalComputationLoad(totalComputationLoad);
        args.setThreadNum(threadNum);
        args.setType(type);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_BM2CompareParallelEfficiency();
      }
    }

    public void OfflineUserTagComputation(List<Long> uidLst, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      OfflineUserTagComputation_call method_call = new OfflineUserTagComputation_call(uidLst, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class OfflineUserTagComputation_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Long> uidLst;
      public OfflineUserTagComputation_call(List<Long> uidLst, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uidLst = uidLst;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("OfflineUserTagComputation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        OfflineUserTagComputation_args args = new OfflineUserTagComputation_args();
        args.setUidLst(uidLst);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_OfflineUserTagComputation();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("GetRecommendByProdName", new GetRecommendByProdName());
      processMap.put("IdealResEfficiencyTest", new IdealResEfficiencyTest());
      processMap.put("BM2CompareParallelEfficiency", new BM2CompareParallelEfficiency());
      processMap.put("OfflineUserTagComputation", new OfflineUserTagComputation());
      return processMap;
    }

    public static class GetRecommendByProdName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetRecommendByProdName_args> {
      public GetRecommendByProdName() {
        super("GetRecommendByProdName");
      }

      public GetRecommendByProdName_args getEmptyArgsInstance() {
        return new GetRecommendByProdName_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetRecommendByProdName_result getResult(I iface, GetRecommendByProdName_args args) throws TException {
        GetRecommendByProdName_result result = new GetRecommendByProdName_result();
        result.success = iface.GetRecommendByProdName(args.userId, args.words, args.type, args.order);
        return result;
      }
    }

    public static class IdealResEfficiencyTest<I extends Iface> extends org.apache.thrift.ProcessFunction<I, IdealResEfficiencyTest_args> {
      public IdealResEfficiencyTest() {
        super("IdealResEfficiencyTest");
      }

      public IdealResEfficiencyTest_args getEmptyArgsInstance() {
        return new IdealResEfficiencyTest_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public IdealResEfficiencyTest_result getResult(I iface, IdealResEfficiencyTest_args args) throws TException {
        IdealResEfficiencyTest_result result = new IdealResEfficiencyTest_result();
        result.success = iface.IdealResEfficiencyTest(args.totalComputationLoad, args.threadName);
        return result;
      }
    }

    public static class BM2CompareParallelEfficiency<I extends Iface> extends org.apache.thrift.ProcessFunction<I, BM2CompareParallelEfficiency_args> {
      public BM2CompareParallelEfficiency() {
        super("BM2CompareParallelEfficiency");
      }

      public BM2CompareParallelEfficiency_args getEmptyArgsInstance() {
        return new BM2CompareParallelEfficiency_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public BM2CompareParallelEfficiency_result getResult(I iface, BM2CompareParallelEfficiency_args args) throws TException {
        BM2CompareParallelEfficiency_result result = new BM2CompareParallelEfficiency_result();
        result.success = iface.BM2CompareParallelEfficiency(args.totalComputationLoad, args.threadNum, args.type);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class OfflineUserTagComputation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, OfflineUserTagComputation_args> {
      public OfflineUserTagComputation() {
        super("OfflineUserTagComputation");
      }

      public OfflineUserTagComputation_args getEmptyArgsInstance() {
        return new OfflineUserTagComputation_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public OfflineUserTagComputation_result getResult(I iface, OfflineUserTagComputation_args args) throws TException {
        OfflineUserTagComputation_result result = new OfflineUserTagComputation_result();
        result.success = iface.OfflineUserTagComputation(args.uidLst);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("GetRecommendByProdName", new GetRecommendByProdName());
      processMap.put("IdealResEfficiencyTest", new IdealResEfficiencyTest());
      processMap.put("BM2CompareParallelEfficiency", new BM2CompareParallelEfficiency());
      processMap.put("OfflineUserTagComputation", new OfflineUserTagComputation());
      return processMap;
    }

    public static class GetRecommendByProdName<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetRecommendByProdName_args, List<Long>> {
      public GetRecommendByProdName() {
        super("GetRecommendByProdName");
      }

      public GetRecommendByProdName_args getEmptyArgsInstance() {
        return new GetRecommendByProdName_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            GetRecommendByProdName_result result = new GetRecommendByProdName_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetRecommendByProdName_result result = new GetRecommendByProdName_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetRecommendByProdName_args args, AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.GetRecommendByProdName(args.userId, args.words, args.type, args.order,resultHandler);
      }
    }

    public static class IdealResEfficiencyTest<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, IdealResEfficiencyTest_args, List<Long>> {
      public IdealResEfficiencyTest() {
        super("IdealResEfficiencyTest");
      }

      public IdealResEfficiencyTest_args getEmptyArgsInstance() {
        return new IdealResEfficiencyTest_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            IdealResEfficiencyTest_result result = new IdealResEfficiencyTest_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            IdealResEfficiencyTest_result result = new IdealResEfficiencyTest_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, IdealResEfficiencyTest_args args, AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.IdealResEfficiencyTest(args.totalComputationLoad, args.threadName,resultHandler);
      }
    }

    public static class BM2CompareParallelEfficiency<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, BM2CompareParallelEfficiency_args, Boolean> {
      public BM2CompareParallelEfficiency() {
        super("BM2CompareParallelEfficiency");
      }

      public BM2CompareParallelEfficiency_args getEmptyArgsInstance() {
        return new BM2CompareParallelEfficiency_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            BM2CompareParallelEfficiency_result result = new BM2CompareParallelEfficiency_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            BM2CompareParallelEfficiency_result result = new BM2CompareParallelEfficiency_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, BM2CompareParallelEfficiency_args args, AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.BM2CompareParallelEfficiency(args.totalComputationLoad, args.threadNum, args.type,resultHandler);
      }
    }

    public static class OfflineUserTagComputation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, OfflineUserTagComputation_args, Boolean> {
      public OfflineUserTagComputation() {
        super("OfflineUserTagComputation");
      }

      public OfflineUserTagComputation_args getEmptyArgsInstance() {
        return new OfflineUserTagComputation_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            OfflineUserTagComputation_result result = new OfflineUserTagComputation_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            OfflineUserTagComputation_result result = new OfflineUserTagComputation_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, OfflineUserTagComputation_args args, AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.OfflineUserTagComputation(args.uidLst,resultHandler);
      }
    }

  }

  public static class GetRecommendByProdName_args implements org.apache.thrift.TBase<GetRecommendByProdName_args, GetRecommendByProdName_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetRecommendByProdName_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetRecommendByProdName_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField WORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("words", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("order", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetRecommendByProdName_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetRecommendByProdName_argsTupleSchemeFactory());
    }

    public long userId; // required
    public String words; // required
    /**
     * 
     * @see SearchType
     */
    public SearchType type; // required
    /**
     * 
     * @see SearchOrder
     */
    public SearchOrder order; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      WORDS((short)2, "words"),
      /**
       * 
       * @see SearchType
       */
      TYPE((short)3, "type"),
      /**
       * 
       * @see SearchOrder
       */
      ORDER((short)4, "order");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // WORDS
            return WORDS;
          case 3: // TYPE
            return TYPE;
          case 4: // ORDER
            return ORDER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.WORDS, new org.apache.thrift.meta_data.FieldMetaData("words", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SearchType.class)));
      tmpMap.put(_Fields.ORDER, new org.apache.thrift.meta_data.FieldMetaData("order", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SearchOrder.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetRecommendByProdName_args.class, metaDataMap);
    }

    public GetRecommendByProdName_args() {
    }

    public GetRecommendByProdName_args(
      long userId,
      String words,
      SearchType type,
      SearchOrder order)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.words = words;
      this.type = type;
      this.order = order;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetRecommendByProdName_args(GetRecommendByProdName_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      if (other.isSetWords()) {
        this.words = other.words;
      }
      if (other.isSetType()) {
        this.type = other.type;
      }
      if (other.isSetOrder()) {
        this.order = other.order;
      }
    }

    public GetRecommendByProdName_args deepCopy() {
      return new GetRecommendByProdName_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      this.words = null;
      this.type = null;
      this.order = null;
    }

    public long getUserId() {
      return this.userId;
    }

    public GetRecommendByProdName_args setUserId(long userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public String getWords() {
      return this.words;
    }

    public GetRecommendByProdName_args setWords(String words) {
      this.words = words;
      return this;
    }

    public void unsetWords() {
      this.words = null;
    }

    /** Returns true if field words is set (has been assigned a value) and false otherwise */
    public boolean isSetWords() {
      return this.words != null;
    }

    public void setWordsIsSet(boolean value) {
      if (!value) {
        this.words = null;
      }
    }

    /**
     * 
     * @see SearchType
     */
    public SearchType getType() {
      return this.type;
    }

    /**
     * 
     * @see SearchType
     */
    public GetRecommendByProdName_args setType(SearchType type) {
      this.type = type;
      return this;
    }

    public void unsetType() {
      this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
      if (!value) {
        this.type = null;
      }
    }

    /**
     * 
     * @see SearchOrder
     */
    public SearchOrder getOrder() {
      return this.order;
    }

    /**
     * 
     * @see SearchOrder
     */
    public GetRecommendByProdName_args setOrder(SearchOrder order) {
      this.order = order;
      return this;
    }

    public void unsetOrder() {
      this.order = null;
    }

    /** Returns true if field order is set (has been assigned a value) and false otherwise */
    public boolean isSetOrder() {
      return this.order != null;
    }

    public void setOrderIsSet(boolean value) {
      if (!value) {
        this.order = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Long)value);
        }
        break;

      case WORDS:
        if (value == null) {
          unsetWords();
        } else {
          setWords((String)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((SearchType)value);
        }
        break;

      case ORDER:
        if (value == null) {
          unsetOrder();
        } else {
          setOrder((SearchOrder)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case WORDS:
        return getWords();

      case TYPE:
        return getType();

      case ORDER:
        return getOrder();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case WORDS:
        return isSetWords();
      case TYPE:
        return isSetType();
      case ORDER:
        return isSetOrder();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetRecommendByProdName_args)
        return this.equals((GetRecommendByProdName_args)that);
      return false;
    }

    public boolean equals(GetRecommendByProdName_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_words = true && this.isSetWords();
      boolean that_present_words = true && that.isSetWords();
      if (this_present_words || that_present_words) {
        if (!(this_present_words && that_present_words))
          return false;
        if (!this.words.equals(that.words))
          return false;
      }

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      boolean this_present_order = true && this.isSetOrder();
      boolean that_present_order = true && that.isSetOrder();
      if (this_present_order || that_present_order) {
        if (!(this_present_order && that_present_order))
          return false;
        if (!this.order.equals(that.order))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_words = true && (isSetWords());
      list.add(present_words);
      if (present_words)
        list.add(words);

      boolean present_type = true && (isSetType());
      list.add(present_type);
      if (present_type)
        list.add(type.getValue());

      boolean present_order = true && (isSetOrder());
      list.add(present_order);
      if (present_order)
        list.add(order.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(GetRecommendByProdName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWords()).compareTo(other.isSetWords());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWords()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.words, other.words);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrder()).compareTo(other.isSetOrder());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrder()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.order, other.order);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetRecommendByProdName_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("words:");
      if (this.words == null) {
        sb.append("null");
      } else {
        sb.append(this.words);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("order:");
      if (this.order == null) {
        sb.append("null");
      } else {
        sb.append(this.order);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetRecommendByProdName_argsStandardSchemeFactory implements SchemeFactory {
      public GetRecommendByProdName_argsStandardScheme getScheme() {
        return new GetRecommendByProdName_argsStandardScheme();
      }
    }

    private static class GetRecommendByProdName_argsStandardScheme extends StandardScheme<GetRecommendByProdName_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetRecommendByProdName_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userId = iprot.readI64();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // WORDS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.words = iprot.readString();
                struct.setWordsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = com.freeb.thrift.SearchType.findByValue(iprot.readI32());
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ORDER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.order = com.freeb.thrift.SearchOrder.findByValue(iprot.readI32());
                struct.setOrderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetRecommendByProdName_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userId);
        oprot.writeFieldEnd();
        if (struct.words != null) {
          oprot.writeFieldBegin(WORDS_FIELD_DESC);
          oprot.writeString(struct.words);
          oprot.writeFieldEnd();
        }
        if (struct.type != null) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.order != null) {
          oprot.writeFieldBegin(ORDER_FIELD_DESC);
          oprot.writeI32(struct.order.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetRecommendByProdName_argsTupleSchemeFactory implements SchemeFactory {
      public GetRecommendByProdName_argsTupleScheme getScheme() {
        return new GetRecommendByProdName_argsTupleScheme();
      }
    }

    private static class GetRecommendByProdName_argsTupleScheme extends TupleScheme<GetRecommendByProdName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetRecommendByProdName_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetWords()) {
          optionals.set(1);
        }
        if (struct.isSetType()) {
          optionals.set(2);
        }
        if (struct.isSetOrder()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetUserId()) {
          oprot.writeI64(struct.userId);
        }
        if (struct.isSetWords()) {
          oprot.writeString(struct.words);
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type.getValue());
        }
        if (struct.isSetOrder()) {
          oprot.writeI32(struct.order.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetRecommendByProdName_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.userId = iprot.readI64();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.words = iprot.readString();
          struct.setWordsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.type = com.freeb.thrift.SearchType.findByValue(iprot.readI32());
          struct.setTypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.order = com.freeb.thrift.SearchOrder.findByValue(iprot.readI32());
          struct.setOrderIsSet(true);
        }
      }
    }

  }

  public static class GetRecommendByProdName_result implements org.apache.thrift.TBase<GetRecommendByProdName_result, GetRecommendByProdName_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetRecommendByProdName_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetRecommendByProdName_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetRecommendByProdName_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetRecommendByProdName_resultTupleSchemeFactory());
    }

    public List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetRecommendByProdName_result.class, metaDataMap);
    }

    public GetRecommendByProdName_result() {
    }

    public GetRecommendByProdName_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetRecommendByProdName_result(GetRecommendByProdName_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public GetRecommendByProdName_result deepCopy() {
      return new GetRecommendByProdName_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public GetRecommendByProdName_result setSuccess(List<Long> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetRecommendByProdName_result)
        return this.equals((GetRecommendByProdName_result)that);
      return false;
    }

    public boolean equals(GetRecommendByProdName_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetRecommendByProdName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetRecommendByProdName_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetRecommendByProdName_resultStandardSchemeFactory implements SchemeFactory {
      public GetRecommendByProdName_resultStandardScheme getScheme() {
        return new GetRecommendByProdName_resultStandardScheme();
      }
    }

    private static class GetRecommendByProdName_resultStandardScheme extends StandardScheme<GetRecommendByProdName_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetRecommendByProdName_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list0.size);
                  long _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readI64();
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetRecommendByProdName_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter3 : struct.success)
            {
              oprot.writeI64(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetRecommendByProdName_resultTupleSchemeFactory implements SchemeFactory {
      public GetRecommendByProdName_resultTupleScheme getScheme() {
        return new GetRecommendByProdName_resultTupleScheme();
      }
    }

    private static class GetRecommendByProdName_resultTupleScheme extends TupleScheme<GetRecommendByProdName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetRecommendByProdName_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter4 : struct.success)
            {
              oprot.writeI64(_iter4);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetRecommendByProdName_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list5.size);
            long _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = iprot.readI64();
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class IdealResEfficiencyTest_args implements org.apache.thrift.TBase<IdealResEfficiencyTest_args, IdealResEfficiencyTest_args._Fields>, java.io.Serializable, Cloneable, Comparable<IdealResEfficiencyTest_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IdealResEfficiencyTest_args");

    private static final org.apache.thrift.protocol.TField TOTAL_COMPUTATION_LOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("totalComputationLoad", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField THREAD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("threadName", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new IdealResEfficiencyTest_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new IdealResEfficiencyTest_argsTupleSchemeFactory());
    }

    public int totalComputationLoad; // required
    public int threadName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOTAL_COMPUTATION_LOAD((short)1, "totalComputationLoad"),
      THREAD_NAME((short)2, "threadName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOTAL_COMPUTATION_LOAD
            return TOTAL_COMPUTATION_LOAD;
          case 2: // THREAD_NAME
            return THREAD_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TOTALCOMPUTATIONLOAD_ISSET_ID = 0;
    private static final int __THREADNAME_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOTAL_COMPUTATION_LOAD, new org.apache.thrift.meta_data.FieldMetaData("totalComputationLoad", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.THREAD_NAME, new org.apache.thrift.meta_data.FieldMetaData("threadName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IdealResEfficiencyTest_args.class, metaDataMap);
    }

    public IdealResEfficiencyTest_args() {
    }

    public IdealResEfficiencyTest_args(
      int totalComputationLoad,
      int threadName)
    {
      this();
      this.totalComputationLoad = totalComputationLoad;
      setTotalComputationLoadIsSet(true);
      this.threadName = threadName;
      setThreadNameIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public IdealResEfficiencyTest_args(IdealResEfficiencyTest_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.totalComputationLoad = other.totalComputationLoad;
      this.threadName = other.threadName;
    }

    public IdealResEfficiencyTest_args deepCopy() {
      return new IdealResEfficiencyTest_args(this);
    }

    @Override
    public void clear() {
      setTotalComputationLoadIsSet(false);
      this.totalComputationLoad = 0;
      setThreadNameIsSet(false);
      this.threadName = 0;
    }

    public int getTotalComputationLoad() {
      return this.totalComputationLoad;
    }

    public IdealResEfficiencyTest_args setTotalComputationLoad(int totalComputationLoad) {
      this.totalComputationLoad = totalComputationLoad;
      setTotalComputationLoadIsSet(true);
      return this;
    }

    public void unsetTotalComputationLoad() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALCOMPUTATIONLOAD_ISSET_ID);
    }

    /** Returns true if field totalComputationLoad is set (has been assigned a value) and false otherwise */
    public boolean isSetTotalComputationLoad() {
      return EncodingUtils.testBit(__isset_bitfield, __TOTALCOMPUTATIONLOAD_ISSET_ID);
    }

    public void setTotalComputationLoadIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALCOMPUTATIONLOAD_ISSET_ID, value);
    }

    public int getThreadName() {
      return this.threadName;
    }

    public IdealResEfficiencyTest_args setThreadName(int threadName) {
      this.threadName = threadName;
      setThreadNameIsSet(true);
      return this;
    }

    public void unsetThreadName() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __THREADNAME_ISSET_ID);
    }

    /** Returns true if field threadName is set (has been assigned a value) and false otherwise */
    public boolean isSetThreadName() {
      return EncodingUtils.testBit(__isset_bitfield, __THREADNAME_ISSET_ID);
    }

    public void setThreadNameIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __THREADNAME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOTAL_COMPUTATION_LOAD:
        if (value == null) {
          unsetTotalComputationLoad();
        } else {
          setTotalComputationLoad((Integer)value);
        }
        break;

      case THREAD_NAME:
        if (value == null) {
          unsetThreadName();
        } else {
          setThreadName((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOTAL_COMPUTATION_LOAD:
        return getTotalComputationLoad();

      case THREAD_NAME:
        return getThreadName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOTAL_COMPUTATION_LOAD:
        return isSetTotalComputationLoad();
      case THREAD_NAME:
        return isSetThreadName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof IdealResEfficiencyTest_args)
        return this.equals((IdealResEfficiencyTest_args)that);
      return false;
    }

    public boolean equals(IdealResEfficiencyTest_args that) {
      if (that == null)
        return false;

      boolean this_present_totalComputationLoad = true;
      boolean that_present_totalComputationLoad = true;
      if (this_present_totalComputationLoad || that_present_totalComputationLoad) {
        if (!(this_present_totalComputationLoad && that_present_totalComputationLoad))
          return false;
        if (this.totalComputationLoad != that.totalComputationLoad)
          return false;
      }

      boolean this_present_threadName = true;
      boolean that_present_threadName = true;
      if (this_present_threadName || that_present_threadName) {
        if (!(this_present_threadName && that_present_threadName))
          return false;
        if (this.threadName != that.threadName)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_totalComputationLoad = true;
      list.add(present_totalComputationLoad);
      if (present_totalComputationLoad)
        list.add(totalComputationLoad);

      boolean present_threadName = true;
      list.add(present_threadName);
      if (present_threadName)
        list.add(threadName);

      return list.hashCode();
    }

    @Override
    public int compareTo(IdealResEfficiencyTest_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTotalComputationLoad()).compareTo(other.isSetTotalComputationLoad());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTotalComputationLoad()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalComputationLoad, other.totalComputationLoad);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetThreadName()).compareTo(other.isSetThreadName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetThreadName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.threadName, other.threadName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("IdealResEfficiencyTest_args(");
      boolean first = true;

      sb.append("totalComputationLoad:");
      sb.append(this.totalComputationLoad);
      first = false;
      if (!first) sb.append(", ");
      sb.append("threadName:");
      sb.append(this.threadName);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class IdealResEfficiencyTest_argsStandardSchemeFactory implements SchemeFactory {
      public IdealResEfficiencyTest_argsStandardScheme getScheme() {
        return new IdealResEfficiencyTest_argsStandardScheme();
      }
    }

    private static class IdealResEfficiencyTest_argsStandardScheme extends StandardScheme<IdealResEfficiencyTest_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, IdealResEfficiencyTest_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOTAL_COMPUTATION_LOAD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.totalComputationLoad = iprot.readI32();
                struct.setTotalComputationLoadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // THREAD_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.threadName = iprot.readI32();
                struct.setThreadNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, IdealResEfficiencyTest_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TOTAL_COMPUTATION_LOAD_FIELD_DESC);
        oprot.writeI32(struct.totalComputationLoad);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(THREAD_NAME_FIELD_DESC);
        oprot.writeI32(struct.threadName);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class IdealResEfficiencyTest_argsTupleSchemeFactory implements SchemeFactory {
      public IdealResEfficiencyTest_argsTupleScheme getScheme() {
        return new IdealResEfficiencyTest_argsTupleScheme();
      }
    }

    private static class IdealResEfficiencyTest_argsTupleScheme extends TupleScheme<IdealResEfficiencyTest_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, IdealResEfficiencyTest_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTotalComputationLoad()) {
          optionals.set(0);
        }
        if (struct.isSetThreadName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTotalComputationLoad()) {
          oprot.writeI32(struct.totalComputationLoad);
        }
        if (struct.isSetThreadName()) {
          oprot.writeI32(struct.threadName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, IdealResEfficiencyTest_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.totalComputationLoad = iprot.readI32();
          struct.setTotalComputationLoadIsSet(true);
        }
        if (incoming.get(1)) {
          struct.threadName = iprot.readI32();
          struct.setThreadNameIsSet(true);
        }
      }
    }

  }

  public static class IdealResEfficiencyTest_result implements org.apache.thrift.TBase<IdealResEfficiencyTest_result, IdealResEfficiencyTest_result._Fields>, java.io.Serializable, Cloneable, Comparable<IdealResEfficiencyTest_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IdealResEfficiencyTest_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new IdealResEfficiencyTest_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new IdealResEfficiencyTest_resultTupleSchemeFactory());
    }

    public List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IdealResEfficiencyTest_result.class, metaDataMap);
    }

    public IdealResEfficiencyTest_result() {
    }

    public IdealResEfficiencyTest_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public IdealResEfficiencyTest_result(IdealResEfficiencyTest_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public IdealResEfficiencyTest_result deepCopy() {
      return new IdealResEfficiencyTest_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public IdealResEfficiencyTest_result setSuccess(List<Long> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof IdealResEfficiencyTest_result)
        return this.equals((IdealResEfficiencyTest_result)that);
      return false;
    }

    public boolean equals(IdealResEfficiencyTest_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(IdealResEfficiencyTest_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("IdealResEfficiencyTest_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class IdealResEfficiencyTest_resultStandardSchemeFactory implements SchemeFactory {
      public IdealResEfficiencyTest_resultStandardScheme getScheme() {
        return new IdealResEfficiencyTest_resultStandardScheme();
      }
    }

    private static class IdealResEfficiencyTest_resultStandardScheme extends StandardScheme<IdealResEfficiencyTest_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, IdealResEfficiencyTest_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list8.size);
                  long _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = iprot.readI64();
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, IdealResEfficiencyTest_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter11 : struct.success)
            {
              oprot.writeI64(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class IdealResEfficiencyTest_resultTupleSchemeFactory implements SchemeFactory {
      public IdealResEfficiencyTest_resultTupleScheme getScheme() {
        return new IdealResEfficiencyTest_resultTupleScheme();
      }
    }

    private static class IdealResEfficiencyTest_resultTupleScheme extends TupleScheme<IdealResEfficiencyTest_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, IdealResEfficiencyTest_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter12 : struct.success)
            {
              oprot.writeI64(_iter12);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, IdealResEfficiencyTest_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list13.size);
            long _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = iprot.readI64();
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class BM2CompareParallelEfficiency_args implements org.apache.thrift.TBase<BM2CompareParallelEfficiency_args, BM2CompareParallelEfficiency_args._Fields>, java.io.Serializable, Cloneable, Comparable<BM2CompareParallelEfficiency_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BM2CompareParallelEfficiency_args");

    private static final org.apache.thrift.protocol.TField TOTAL_COMPUTATION_LOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("totalComputationLoad", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField THREAD_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("threadNum", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new BM2CompareParallelEfficiency_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new BM2CompareParallelEfficiency_argsTupleSchemeFactory());
    }

    public int totalComputationLoad; // required
    public int threadNum; // required
    public int type; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOTAL_COMPUTATION_LOAD((short)1, "totalComputationLoad"),
      THREAD_NUM((short)2, "threadNum"),
      TYPE((short)3, "type");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOTAL_COMPUTATION_LOAD
            return TOTAL_COMPUTATION_LOAD;
          case 2: // THREAD_NUM
            return THREAD_NUM;
          case 3: // TYPE
            return TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TOTALCOMPUTATIONLOAD_ISSET_ID = 0;
    private static final int __THREADNUM_ISSET_ID = 1;
    private static final int __TYPE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOTAL_COMPUTATION_LOAD, new org.apache.thrift.meta_data.FieldMetaData("totalComputationLoad", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.THREAD_NUM, new org.apache.thrift.meta_data.FieldMetaData("threadNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BM2CompareParallelEfficiency_args.class, metaDataMap);
    }

    public BM2CompareParallelEfficiency_args() {
    }

    public BM2CompareParallelEfficiency_args(
      int totalComputationLoad,
      int threadNum,
      int type)
    {
      this();
      this.totalComputationLoad = totalComputationLoad;
      setTotalComputationLoadIsSet(true);
      this.threadNum = threadNum;
      setThreadNumIsSet(true);
      this.type = type;
      setTypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public BM2CompareParallelEfficiency_args(BM2CompareParallelEfficiency_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.totalComputationLoad = other.totalComputationLoad;
      this.threadNum = other.threadNum;
      this.type = other.type;
    }

    public BM2CompareParallelEfficiency_args deepCopy() {
      return new BM2CompareParallelEfficiency_args(this);
    }

    @Override
    public void clear() {
      setTotalComputationLoadIsSet(false);
      this.totalComputationLoad = 0;
      setThreadNumIsSet(false);
      this.threadNum = 0;
      setTypeIsSet(false);
      this.type = 0;
    }

    public int getTotalComputationLoad() {
      return this.totalComputationLoad;
    }

    public BM2CompareParallelEfficiency_args setTotalComputationLoad(int totalComputationLoad) {
      this.totalComputationLoad = totalComputationLoad;
      setTotalComputationLoadIsSet(true);
      return this;
    }

    public void unsetTotalComputationLoad() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALCOMPUTATIONLOAD_ISSET_ID);
    }

    /** Returns true if field totalComputationLoad is set (has been assigned a value) and false otherwise */
    public boolean isSetTotalComputationLoad() {
      return EncodingUtils.testBit(__isset_bitfield, __TOTALCOMPUTATIONLOAD_ISSET_ID);
    }

    public void setTotalComputationLoadIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALCOMPUTATIONLOAD_ISSET_ID, value);
    }

    public int getThreadNum() {
      return this.threadNum;
    }

    public BM2CompareParallelEfficiency_args setThreadNum(int threadNum) {
      this.threadNum = threadNum;
      setThreadNumIsSet(true);
      return this;
    }

    public void unsetThreadNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __THREADNUM_ISSET_ID);
    }

    /** Returns true if field threadNum is set (has been assigned a value) and false otherwise */
    public boolean isSetThreadNum() {
      return EncodingUtils.testBit(__isset_bitfield, __THREADNUM_ISSET_ID);
    }

    public void setThreadNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __THREADNUM_ISSET_ID, value);
    }

    public int getType() {
      return this.type;
    }

    public BM2CompareParallelEfficiency_args setType(int type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOTAL_COMPUTATION_LOAD:
        if (value == null) {
          unsetTotalComputationLoad();
        } else {
          setTotalComputationLoad((Integer)value);
        }
        break;

      case THREAD_NUM:
        if (value == null) {
          unsetThreadNum();
        } else {
          setThreadNum((Integer)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOTAL_COMPUTATION_LOAD:
        return getTotalComputationLoad();

      case THREAD_NUM:
        return getThreadNum();

      case TYPE:
        return getType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOTAL_COMPUTATION_LOAD:
        return isSetTotalComputationLoad();
      case THREAD_NUM:
        return isSetThreadNum();
      case TYPE:
        return isSetType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof BM2CompareParallelEfficiency_args)
        return this.equals((BM2CompareParallelEfficiency_args)that);
      return false;
    }

    public boolean equals(BM2CompareParallelEfficiency_args that) {
      if (that == null)
        return false;

      boolean this_present_totalComputationLoad = true;
      boolean that_present_totalComputationLoad = true;
      if (this_present_totalComputationLoad || that_present_totalComputationLoad) {
        if (!(this_present_totalComputationLoad && that_present_totalComputationLoad))
          return false;
        if (this.totalComputationLoad != that.totalComputationLoad)
          return false;
      }

      boolean this_present_threadNum = true;
      boolean that_present_threadNum = true;
      if (this_present_threadNum || that_present_threadNum) {
        if (!(this_present_threadNum && that_present_threadNum))
          return false;
        if (this.threadNum != that.threadNum)
          return false;
      }

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_totalComputationLoad = true;
      list.add(present_totalComputationLoad);
      if (present_totalComputationLoad)
        list.add(totalComputationLoad);

      boolean present_threadNum = true;
      list.add(present_threadNum);
      if (present_threadNum)
        list.add(threadNum);

      boolean present_type = true;
      list.add(present_type);
      if (present_type)
        list.add(type);

      return list.hashCode();
    }

    @Override
    public int compareTo(BM2CompareParallelEfficiency_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTotalComputationLoad()).compareTo(other.isSetTotalComputationLoad());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTotalComputationLoad()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalComputationLoad, other.totalComputationLoad);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetThreadNum()).compareTo(other.isSetThreadNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetThreadNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.threadNum, other.threadNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("BM2CompareParallelEfficiency_args(");
      boolean first = true;

      sb.append("totalComputationLoad:");
      sb.append(this.totalComputationLoad);
      first = false;
      if (!first) sb.append(", ");
      sb.append("threadNum:");
      sb.append(this.threadNum);
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class BM2CompareParallelEfficiency_argsStandardSchemeFactory implements SchemeFactory {
      public BM2CompareParallelEfficiency_argsStandardScheme getScheme() {
        return new BM2CompareParallelEfficiency_argsStandardScheme();
      }
    }

    private static class BM2CompareParallelEfficiency_argsStandardScheme extends StandardScheme<BM2CompareParallelEfficiency_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, BM2CompareParallelEfficiency_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOTAL_COMPUTATION_LOAD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.totalComputationLoad = iprot.readI32();
                struct.setTotalComputationLoadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // THREAD_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.threadNum = iprot.readI32();
                struct.setThreadNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = iprot.readI32();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, BM2CompareParallelEfficiency_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TOTAL_COMPUTATION_LOAD_FIELD_DESC);
        oprot.writeI32(struct.totalComputationLoad);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(THREAD_NUM_FIELD_DESC);
        oprot.writeI32(struct.threadNum);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class BM2CompareParallelEfficiency_argsTupleSchemeFactory implements SchemeFactory {
      public BM2CompareParallelEfficiency_argsTupleScheme getScheme() {
        return new BM2CompareParallelEfficiency_argsTupleScheme();
      }
    }

    private static class BM2CompareParallelEfficiency_argsTupleScheme extends TupleScheme<BM2CompareParallelEfficiency_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, BM2CompareParallelEfficiency_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTotalComputationLoad()) {
          optionals.set(0);
        }
        if (struct.isSetThreadNum()) {
          optionals.set(1);
        }
        if (struct.isSetType()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTotalComputationLoad()) {
          oprot.writeI32(struct.totalComputationLoad);
        }
        if (struct.isSetThreadNum()) {
          oprot.writeI32(struct.threadNum);
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, BM2CompareParallelEfficiency_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.totalComputationLoad = iprot.readI32();
          struct.setTotalComputationLoadIsSet(true);
        }
        if (incoming.get(1)) {
          struct.threadNum = iprot.readI32();
          struct.setThreadNumIsSet(true);
        }
        if (incoming.get(2)) {
          struct.type = iprot.readI32();
          struct.setTypeIsSet(true);
        }
      }
    }

  }

  public static class BM2CompareParallelEfficiency_result implements org.apache.thrift.TBase<BM2CompareParallelEfficiency_result, BM2CompareParallelEfficiency_result._Fields>, java.io.Serializable, Cloneable, Comparable<BM2CompareParallelEfficiency_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BM2CompareParallelEfficiency_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new BM2CompareParallelEfficiency_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new BM2CompareParallelEfficiency_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BM2CompareParallelEfficiency_result.class, metaDataMap);
    }

    public BM2CompareParallelEfficiency_result() {
    }

    public BM2CompareParallelEfficiency_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public BM2CompareParallelEfficiency_result(BM2CompareParallelEfficiency_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public BM2CompareParallelEfficiency_result deepCopy() {
      return new BM2CompareParallelEfficiency_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public BM2CompareParallelEfficiency_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof BM2CompareParallelEfficiency_result)
        return this.equals((BM2CompareParallelEfficiency_result)that);
      return false;
    }

    public boolean equals(BM2CompareParallelEfficiency_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(BM2CompareParallelEfficiency_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("BM2CompareParallelEfficiency_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class BM2CompareParallelEfficiency_resultStandardSchemeFactory implements SchemeFactory {
      public BM2CompareParallelEfficiency_resultStandardScheme getScheme() {
        return new BM2CompareParallelEfficiency_resultStandardScheme();
      }
    }

    private static class BM2CompareParallelEfficiency_resultStandardScheme extends StandardScheme<BM2CompareParallelEfficiency_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, BM2CompareParallelEfficiency_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, BM2CompareParallelEfficiency_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class BM2CompareParallelEfficiency_resultTupleSchemeFactory implements SchemeFactory {
      public BM2CompareParallelEfficiency_resultTupleScheme getScheme() {
        return new BM2CompareParallelEfficiency_resultTupleScheme();
      }
    }

    private static class BM2CompareParallelEfficiency_resultTupleScheme extends TupleScheme<BM2CompareParallelEfficiency_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, BM2CompareParallelEfficiency_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, BM2CompareParallelEfficiency_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class OfflineUserTagComputation_args implements org.apache.thrift.TBase<OfflineUserTagComputation_args, OfflineUserTagComputation_args._Fields>, java.io.Serializable, Cloneable, Comparable<OfflineUserTagComputation_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OfflineUserTagComputation_args");

    private static final org.apache.thrift.protocol.TField UID_LST_FIELD_DESC = new org.apache.thrift.protocol.TField("uidLst", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new OfflineUserTagComputation_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new OfflineUserTagComputation_argsTupleSchemeFactory());
    }

    public List<Long> uidLst; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID_LST((short)1, "uidLst");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID_LST
            return UID_LST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID_LST, new org.apache.thrift.meta_data.FieldMetaData("uidLst", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OfflineUserTagComputation_args.class, metaDataMap);
    }

    public OfflineUserTagComputation_args() {
    }

    public OfflineUserTagComputation_args(
      List<Long> uidLst)
    {
      this();
      this.uidLst = uidLst;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public OfflineUserTagComputation_args(OfflineUserTagComputation_args other) {
      if (other.isSetUidLst()) {
        List<Long> __this__uidLst = new ArrayList<Long>(other.uidLst);
        this.uidLst = __this__uidLst;
      }
    }

    public OfflineUserTagComputation_args deepCopy() {
      return new OfflineUserTagComputation_args(this);
    }

    @Override
    public void clear() {
      this.uidLst = null;
    }

    public int getUidLstSize() {
      return (this.uidLst == null) ? 0 : this.uidLst.size();
    }

    public java.util.Iterator<Long> getUidLstIterator() {
      return (this.uidLst == null) ? null : this.uidLst.iterator();
    }

    public void addToUidLst(long elem) {
      if (this.uidLst == null) {
        this.uidLst = new ArrayList<Long>();
      }
      this.uidLst.add(elem);
    }

    public List<Long> getUidLst() {
      return this.uidLst;
    }

    public OfflineUserTagComputation_args setUidLst(List<Long> uidLst) {
      this.uidLst = uidLst;
      return this;
    }

    public void unsetUidLst() {
      this.uidLst = null;
    }

    /** Returns true if field uidLst is set (has been assigned a value) and false otherwise */
    public boolean isSetUidLst() {
      return this.uidLst != null;
    }

    public void setUidLstIsSet(boolean value) {
      if (!value) {
        this.uidLst = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID_LST:
        if (value == null) {
          unsetUidLst();
        } else {
          setUidLst((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID_LST:
        return getUidLst();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID_LST:
        return isSetUidLst();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof OfflineUserTagComputation_args)
        return this.equals((OfflineUserTagComputation_args)that);
      return false;
    }

    public boolean equals(OfflineUserTagComputation_args that) {
      if (that == null)
        return false;

      boolean this_present_uidLst = true && this.isSetUidLst();
      boolean that_present_uidLst = true && that.isSetUidLst();
      if (this_present_uidLst || that_present_uidLst) {
        if (!(this_present_uidLst && that_present_uidLst))
          return false;
        if (!this.uidLst.equals(that.uidLst))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_uidLst = true && (isSetUidLst());
      list.add(present_uidLst);
      if (present_uidLst)
        list.add(uidLst);

      return list.hashCode();
    }

    @Override
    public int compareTo(OfflineUserTagComputation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUidLst()).compareTo(other.isSetUidLst());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUidLst()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uidLst, other.uidLst);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("OfflineUserTagComputation_args(");
      boolean first = true;

      sb.append("uidLst:");
      if (this.uidLst == null) {
        sb.append("null");
      } else {
        sb.append(this.uidLst);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class OfflineUserTagComputation_argsStandardSchemeFactory implements SchemeFactory {
      public OfflineUserTagComputation_argsStandardScheme getScheme() {
        return new OfflineUserTagComputation_argsStandardScheme();
      }
    }

    private static class OfflineUserTagComputation_argsStandardScheme extends StandardScheme<OfflineUserTagComputation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, OfflineUserTagComputation_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID_LST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.uidLst = new ArrayList<Long>(_list16.size);
                  long _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = iprot.readI64();
                    struct.uidLst.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setUidLstIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, OfflineUserTagComputation_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uidLst != null) {
          oprot.writeFieldBegin(UID_LST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.uidLst.size()));
            for (long _iter19 : struct.uidLst)
            {
              oprot.writeI64(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class OfflineUserTagComputation_argsTupleSchemeFactory implements SchemeFactory {
      public OfflineUserTagComputation_argsTupleScheme getScheme() {
        return new OfflineUserTagComputation_argsTupleScheme();
      }
    }

    private static class OfflineUserTagComputation_argsTupleScheme extends TupleScheme<OfflineUserTagComputation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, OfflineUserTagComputation_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUidLst()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUidLst()) {
          {
            oprot.writeI32(struct.uidLst.size());
            for (long _iter20 : struct.uidLst)
            {
              oprot.writeI64(_iter20);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, OfflineUserTagComputation_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.uidLst = new ArrayList<Long>(_list21.size);
            long _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = iprot.readI64();
              struct.uidLst.add(_elem22);
            }
          }
          struct.setUidLstIsSet(true);
        }
      }
    }

  }

  public static class OfflineUserTagComputation_result implements org.apache.thrift.TBase<OfflineUserTagComputation_result, OfflineUserTagComputation_result._Fields>, java.io.Serializable, Cloneable, Comparable<OfflineUserTagComputation_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OfflineUserTagComputation_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new OfflineUserTagComputation_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new OfflineUserTagComputation_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OfflineUserTagComputation_result.class, metaDataMap);
    }

    public OfflineUserTagComputation_result() {
    }

    public OfflineUserTagComputation_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public OfflineUserTagComputation_result(OfflineUserTagComputation_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public OfflineUserTagComputation_result deepCopy() {
      return new OfflineUserTagComputation_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public OfflineUserTagComputation_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof OfflineUserTagComputation_result)
        return this.equals((OfflineUserTagComputation_result)that);
      return false;
    }

    public boolean equals(OfflineUserTagComputation_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(OfflineUserTagComputation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("OfflineUserTagComputation_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class OfflineUserTagComputation_resultStandardSchemeFactory implements SchemeFactory {
      public OfflineUserTagComputation_resultStandardScheme getScheme() {
        return new OfflineUserTagComputation_resultStandardScheme();
      }
    }

    private static class OfflineUserTagComputation_resultStandardScheme extends StandardScheme<OfflineUserTagComputation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, OfflineUserTagComputation_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, OfflineUserTagComputation_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class OfflineUserTagComputation_resultTupleSchemeFactory implements SchemeFactory {
      public OfflineUserTagComputation_resultTupleScheme getScheme() {
        return new OfflineUserTagComputation_resultTupleScheme();
      }
    }

    private static class OfflineUserTagComputation_resultTupleScheme extends TupleScheme<OfflineUserTagComputation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, OfflineUserTagComputation_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, OfflineUserTagComputation_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
